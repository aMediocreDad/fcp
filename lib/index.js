(()=>{var Gi=Object.create;var Zn=Object.defineProperty;var Ji=Object.getOwnPropertyDescriptor;var Hi=Object.getOwnPropertyNames;var Wi=Object.getPrototypeOf,Zi=Object.prototype.hasOwnProperty;var N=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Qi=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Hi(t))!Zi.call(e,i)&&i!==n&&Zn(e,i,{get:()=>t[i],enumerable:!(r=Ji(t,i))||r.enumerable});return e};var es=(e,t,n)=>(n=e!=null?Gi(Wi(e)):{},Qi(t||!e||!e.__esModule?Zn(n,"default",{value:e,enumerable:!0}):n,e));var ne=N(me=>{"use strict";Object.defineProperty(me,"__esModule",{value:!0});me.__assign=function(){return me.__assign=Object.assign||function(t){for(var n,r=1,i=arguments.length;r<i;r++){n=arguments[r];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},me.__assign.apply(this,arguments)};function ms(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]]);return n}function gs(e){var t=typeof Symbol=="function"&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function _s(e,t){var n=typeof Symbol=="function"&&e[Symbol.iterator];if(!n)return e;var r=n.call(e),i,s=[],o;try{for(;(t===void 0||t-- >0)&&!(i=r.next()).done;)s.push(i.value)}catch(l){o={error:l}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(o)throw o.error}}return s}function bs(e,t,n){if(n||arguments.length===2)for(var r=0,i=t.length,s;r<i;r++)(s||!(r in t))&&(s||(s=Array.prototype.slice.call(t,0,r)),s[r]=t[r]);return e.concat(s||Array.prototype.slice.call(t))}me.__read=_s;me.__rest=ms;me.__spreadArray=bs;me.__values=gs});var $e=N(Ee=>{"use strict";Object.defineProperty(Ee,"__esModule",{value:!0});Ee.ActionTypes=void 0;(function(e){e.Start="xstate.start",e.Stop="xstate.stop",e.Raise="xstate.raise",e.Send="xstate.send",e.Cancel="xstate.cancel",e.NullEvent="",e.Assign="xstate.assign",e.After="xstate.after",e.DoneState="done.state",e.DoneInvoke="done.invoke",e.Log="xstate.log",e.Init="xstate.init",e.Invoke="xstate.invoke",e.ErrorExecution="error.execution",e.ErrorCommunication="error.communication",e.ErrorPlatform="error.platform",e.ErrorCustom="xstate.error",e.Update="xstate.update",e.Pure="xstate.pure",e.Choose="xstate.choose"})(Ee.ActionTypes||(Ee.ActionTypes={}));Ee.SpecialTargets=void 0;(function(e){e.Parent="#_parent",e.Internal="#_internal"})(Ee.SpecialTargets||(Ee.SpecialTargets={}))});var rt=N(U=>{"use strict";Object.defineProperty(U,"__esModule",{value:!0});var X=$e(),Ss=X.ActionTypes.Start,ws=X.ActionTypes.Stop,xs=X.ActionTypes.Raise,Es=X.ActionTypes.Send,Os=X.ActionTypes.Cancel,Ts=X.ActionTypes.NullEvent,Is=X.ActionTypes.Assign,As=X.ActionTypes.After,ks=X.ActionTypes.DoneState,Cs=X.ActionTypes.Log,Fs=X.ActionTypes.Init,$s=X.ActionTypes.Invoke,Ms=X.ActionTypes.ErrorExecution,Ns=X.ActionTypes.ErrorPlatform,Ps=X.ActionTypes.ErrorCustom,js=X.ActionTypes.Update,qs=X.ActionTypes.Choose,Ls=X.ActionTypes.Pure;U.after=As;U.assign=Is;U.cancel=Os;U.choose=qs;U.doneState=ks;U.error=Ps;U.errorExecution=Ms;U.errorPlatform=Ns;U.init=Fs;U.invoke=$s;U.log=Cs;U.nullEvent=Ts;U.pure=Ls;U.raise=xs;U.send=Es;U.start=Ss;U.stop=ws;U.update=js});var $t=N(De=>{"use strict";Object.defineProperty(De,"__esModule",{value:!0});var Ds=".",Rs={},Us="xstate.guard",Bs="";De.DEFAULT_GUARD_TYPE=Us;De.EMPTY_ACTIVITY_MAP=Rs;De.STATE_DELIMITER=Ds;De.TARGETLESS_KEY=Bs});var ge=N(mn=>{"use strict";Object.defineProperty(mn,"__esModule",{value:!0});var Vs=!0;mn.IS_PRODUCTION=Vs});var ue=N(E=>{"use strict";Object.defineProperty(E,"__esModule",{value:!0});var G=ne(),it=$t(),bn=ge(),Mt;function Xs(e){return Object.keys(e)}function _r(e,t,n){n===void 0&&(n=it.STATE_DELIMITER);var r=gn(e,n),i=gn(t,n);return ae(i)?ae(r)?i===r:!1:ae(r)?r in i:Object.keys(r).every(function(s){return s in i?_r(r[s],i[s]):!1})}function zs(e){try{return ae(e)||typeof e=="number"?"".concat(e):e.type}catch{throw new Error("Events must be strings or objects with a string event.type property.")}}function Ks(e){try{return ae(e)||typeof e=="number"?"".concat(e):de(e)?e.name:e.type}catch{throw new Error("Actions must be strings or objects with a string action.type property.")}}function br(e,t){try{return Nt(e)?e:e.toString().split(t)}catch{throw new Error("'".concat(e,"' is not a valid state path."))}}function Sr(e){return typeof e=="object"&&"value"in e&&"context"in e&&"event"in e&&"_event"in e}function gn(e,t){if(Sr(e))return e.value;if(Nt(e))return _n(e);if(typeof e!="string")return e;var n=br(e,t);return _n(n)}function _n(e){if(e.length===1)return e[0];for(var t={},n=t,r=0;r<e.length-1;r++)r===e.length-2?n[e[r]]=e[r+1]:(n[e[r]]={},n=n[e[r]]);return t}function wr(e,t){for(var n={},r=Object.keys(e),i=0;i<r.length;i++){var s=r[i];n[s]=t(e[s],s,e,i)}return n}function Ys(e,t,n){var r,i,s={};try{for(var o=G.__values(Object.keys(e)),l=o.next();!l.done;l=o.next()){var a=l.value,u=e[a];!n(u)||(s[a]=t(u,a,e))}}catch(c){r={error:c}}finally{try{l&&!l.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}return s}var Gs=function(e){return function(t){var n,r,i=t;try{for(var s=G.__values(e),o=s.next();!o.done;o=s.next()){var l=o.value;i=i[l]}}catch(a){n={error:a}}finally{try{o&&!o.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}return i}};function Js(e,t){return function(n){var r,i,s=n;try{for(var o=G.__values(e),l=o.next();!l.done;l=o.next()){var a=l.value;s=s[t][a]}}catch(u){r={error:u}}finally{try{l&&!l.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}return s}}function xr(e){if(!e)return[[]];if(ae(e))return[[e]];var t=Er(Object.keys(e).map(function(n){var r=e[n];return typeof r!="string"&&(!r||!Object.keys(r).length)?[[n]]:xr(e[n]).map(function(i){return[n].concat(i)})}));return t}function Hs(e){var t,n,r={};if(e&&e.length===1&&e[0].length===1)return e[0][0];try{for(var i=G.__values(e),s=i.next();!s.done;s=i.next())for(var o=s.value,l=r,a=0;a<o.length;a++){var u=o[a];if(a===o.length-2){l[u]=o[a+1];break}l[u]=l[u]||{},l=l[u]}}catch(c){t={error:c}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}function Er(e){var t;return(t=[]).concat.apply(t,G.__spreadArray([],G.__read(e),!1))}function Sn(e){return Nt(e)?e:[e]}function Or(e){return e===void 0?[]:Sn(e)}function Ws(e,t,n){var r,i;if(de(e))return e(t,n.data);var s={};try{for(var o=G.__values(Object.keys(e)),l=o.next();!l.done;l=o.next()){var a=l.value,u=e[a];de(u)?s[a]=u(t,n.data):s[a]=u}}catch(c){r={error:c}}finally{try{l&&!l.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}return s}function Zs(e){return/^(done|error)\./.test(e)}function Qs(e){return!!(e instanceof Promise||e!==null&&(de(e)||typeof e=="object")&&de(e.then))}function eo(e){return e!==null&&typeof e=="object"&&"transition"in e&&typeof e.transition=="function"}function to(e,t){var n,r,i=G.__read([[],[]],2),s=i[0],o=i[1];try{for(var l=G.__values(e),a=l.next();!a.done;a=l.next()){var u=a.value;t(u)?s.push(u):o.push(u)}}catch(c){n={error:c}}finally{try{a&&!a.done&&(r=l.return)&&r.call(l)}finally{if(n)throw n.error}}return[s,o]}function wn(e,t){return wr(e.states,function(n,r){if(!!n){var i=(ae(t)?void 0:t[r])||(n?n.current:void 0);if(!!i)return{current:i,states:wn(n,i)}}})}function no(e,t){return{current:t,states:wn(e,t)}}function ro(e,t,n,r){bn.IS_PRODUCTION||E.warn(!!e,"Attempting to update undefined context");var i=e&&n.reduce(function(s,o){var l,a,u=o.assignment,c={state:r,action:o,_event:t},d={};if(de(u))d=u(s,t.data,c);else try{for(var f=G.__values(Object.keys(u)),h=f.next();!h.done;h=f.next()){var p=h.value,v=u[p];d[p]=de(v)?v(s,t.data,c):v}}catch(m){l={error:m}}finally{try{h&&!h.done&&(a=f.return)&&a.call(f)}finally{if(l)throw l.error}}return Object.assign({},s,d)},e);return i}E.warn=function(){};bn.IS_PRODUCTION||(E.warn=function(e,t){var n=e instanceof Error?e:void 0;if(!(!n&&e)&&console!==void 0){var r=["Warning: ".concat(t)];n&&r.push(n),console.warn.apply(console,r)}});function Nt(e){return Array.isArray(e)}function de(e){return typeof e=="function"}function ae(e){return typeof e=="string"}function io(e,t){if(!!e)return ae(e)?{type:it.DEFAULT_GUARD_TYPE,name:e,predicate:t?t[e]:void 0}:de(e)?{type:it.DEFAULT_GUARD_TYPE,name:e.name,predicate:e}:e}function so(e){try{return"subscribe"in e&&de(e.subscribe)}catch{return!1}}var Tr=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}(),oo=(Mt={},Mt[Tr]=function(){return this},Mt[Symbol.observable]=function(){return this},Mt);function Ir(e){return!!e&&"__xstatenode"in e}function ao(e){return!!e&&typeof e.send=="function"}var uo=function(){var e=0;return function(){return e++,e.toString(16)}}();function Ar(e,t){return ae(e)||typeof e=="number"?G.__assign({type:e},t):e}function co(e,t){if(!ae(e)&&"$$type"in e&&e.$$type==="scxml")return e;var n=Ar(e);return G.__assign({name:n.type,data:n,$$type:"scxml",type:"external"},t)}function lo(e,t){var n=Sn(t).map(function(r){return typeof r>"u"||typeof r=="string"||Ir(r)?{target:r,event:e}:G.__assign(G.__assign({},r),{event:e})});return n}function fo(e){if(!(e===void 0||e===it.TARGETLESS_KEY))return Or(e)}function ho(e,t,n){if(!bn.IS_PRODUCTION){var r=e.stack?" Stacktrace was '".concat(e.stack,"'"):"";if(e===t)console.error("Missing onError handler for invocation '".concat(n,"', error was '").concat(e,"'.").concat(r));else{var i=t.stack?" Stacktrace was '".concat(t.stack,"'"):"";console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(n,"'. ")+"Original error: '".concat(e,"'. ").concat(r," Current error is '").concat(t,"'.").concat(i))}}}function po(e,t,n,r,i){var s=e.options.guards,o={state:i,cond:t,_event:r};if(t.type===it.DEFAULT_GUARD_TYPE)return(s?.[t.name]||t.predicate)(n,r.data,o);var l=s?.[t.type];if(!l)throw new Error("Guard '".concat(t.type,"' is not implemented on machine '").concat(e.id,"'."));return l(n,r.data,o)}function vo(e){return typeof e=="string"?{type:e}:e}function yo(e,t,n){var r=function(){},i=typeof e=="object",s=i?e:null;return{next:((i?e.next:e)||r).bind(s),error:((i?e.error:t)||r).bind(s),complete:((i?e.complete:n)||r).bind(s)}}function mo(e,t){return"".concat(e,":invocation[").concat(t,"]")}E.createInvokeId=mo;E.evaluateGuard=po;E.flatten=Er;E.getActionType=Ks;E.getEventType=zs;E.interopSymbols=oo;E.isActor=ao;E.isArray=Nt;E.isBehavior=eo;E.isBuiltInEvent=Zs;E.isFunction=de;E.isMachine=Ir;E.isObservable=so;E.isPromiseLike=Qs;E.isStateLike=Sr;E.isString=ae;E.keys=Xs;E.mapContext=Ws;E.mapFilterValues=Ys;E.mapValues=wr;E.matchesState=_r;E.nestedPath=Js;E.normalizeTarget=fo;E.partition=to;E.path=Gs;E.pathToStateValue=_n;E.pathsToStateValue=Hs;E.reportUnhandledExceptionOnInvocation=ho;E.symbolObservable=Tr;E.toArray=Or;E.toArrayStrict=Sn;E.toEventObject=Ar;E.toGuard=io;E.toInvokeSource=vo;E.toObserver=yo;E.toSCXMLEvent=co;E.toStatePath=br;E.toStatePaths=xr;E.toStateValue=gn;E.toTransitionConfigArray=lo;E.uniqueId=uo;E.updateContext=ro;E.updateHistoryStates=wn;E.updateHistoryValue=no});var Ue=N(M=>{"use strict";Object.defineProperty(M,"__esModule",{value:!0});var P=ne(),Z=$e(),z=rt(),$=ue(),kr=ge(),go=$.toSCXMLEvent({type:z.init});function xn(e,t){return t&&t[e]||void 0}function Pt(e,t){var n;if($.isString(e)||typeof e=="number"){var r=xn(e,t);$.isFunction(r)?n={type:e,exec:r}:r?n=r:n={type:e,exec:void 0}}else if($.isFunction(e))n={type:e.name||e.toString(),exec:e};else{var r=xn(e.type,t);if($.isFunction(r))n=P.__assign(P.__assign({},e),{exec:r});else if(r){var i=r.type||e.type;n=P.__assign(P.__assign(P.__assign({},r),e),{type:i})}else n=e}return n}var En=function(e,t){if(!e)return[];var n=$.isArray(e)?e:[e];return n.map(function(r){return Pt(r,t)})};function Tn(e){var t=Pt(e);return P.__assign(P.__assign({id:$.isString(e)?e:t.id},t),{type:t.type})}function _o(e){return $.isString(e)?{type:z.raise,event:e}:Re(e,{to:Z.SpecialTargets.Internal})}function Cr(e){return{type:z.raise,_event:$.toSCXMLEvent(e.event)}}function Re(e,t){return{to:t?t.to:void 0,type:z.send,event:$.isFunction(e)?e:$.toEventObject(e),delay:t?t.delay:void 0,id:t&&t.id!==void 0?t.id:$.isFunction(e)?e.name:$.getEventType(e)}}function Fr(e,t,n,r){var i={_event:n},s=$.toSCXMLEvent($.isFunction(e.event)?e.event(t,n.data,i):e.event),o;if($.isString(e.delay)){var l=r&&r[e.delay];o=$.isFunction(l)?l(t,n.data,i):l}else o=$.isFunction(e.delay)?e.delay(t,n.data,i):e.delay;var a=$.isFunction(e.to)?e.to(t,n.data,i):e.to;return P.__assign(P.__assign({},e),{to:a,_event:s,event:s.data,delay:o})}function In(e,t){return Re(e,P.__assign(P.__assign({},t),{to:Z.SpecialTargets.Parent}))}function bo(e,t,n){return Re(t,P.__assign(P.__assign({},n),{to:e}))}function So(){return In(z.update)}function wo(e,t){return Re(e,P.__assign(P.__assign({},t),{to:function(n,r,i){var s=i._event;return s.origin}}))}var xo=function(e,t){return{context:e,event:t}};function Eo(e,t){return e===void 0&&(e=xo),{type:z.log,label:t,expr:e}}var $r=function(e,t,n){return P.__assign(P.__assign({},e),{value:$.isString(e.expr)?e.expr:e.expr(t,n.data,{_event:n})})},Oo=function(e){return{type:z.cancel,sendId:e}};function To(e){var t=Tn(e);return{type:Z.ActionTypes.Start,activity:t,exec:void 0}}function Io(e){var t=$.isFunction(e)?e:Tn(e);return{type:Z.ActionTypes.Stop,activity:t,exec:void 0}}function Mr(e,t,n){var r=$.isFunction(e.activity)?e.activity(t,n.data):e.activity,i=typeof r=="string"?{id:r}:r,s={type:Z.ActionTypes.Stop,activity:i};return s}var Ao=function(e){return{type:z.assign,assignment:e}};function ko(e){return typeof e=="object"&&"type"in e}function Co(e,t){var n=t?"#".concat(t):"";return"".concat(Z.ActionTypes.After,"(").concat(e,")").concat(n)}function Fo(e,t){var n="".concat(Z.ActionTypes.DoneState,".").concat(e),r={type:n,data:t};return r.toString=function(){return n},r}function $o(e,t){var n="".concat(Z.ActionTypes.DoneInvoke,".").concat(e),r={type:n,data:t};return r.toString=function(){return n},r}function Mo(e,t){var n="".concat(Z.ActionTypes.ErrorPlatform,".").concat(e),r={type:n,data:t};return r.toString=function(){return n},r}function No(e){return{type:Z.ActionTypes.Pure,get:e}}function Po(e,t){if(!kr.IS_PRODUCTION&&(!e||typeof e=="function")){var n=e;e=function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var s=typeof n=="function"?n.apply(void 0,P.__spreadArray([],P.__read(r),!1)):n;if(!s)throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");return s}}return Re(function(r,i){return i},P.__assign(P.__assign({},t),{to:e}))}function jo(e,t){return In(function(n,r,i){return{type:z.error,data:$.isFunction(e)?e(n,r,i):e}},P.__assign(P.__assign({},t),{to:Z.SpecialTargets.Parent}))}function qo(e){return{type:Z.ActionTypes.Choose,conds:e}}function On(e,t,n,r,i,s,o){o===void 0&&(o=!1);var l=P.__read(o?[[],i]:$.partition(i,function(h){return h.type===z.assign}),2),a=l[0],u=l[1],c=a.length?$.updateContext(n,r,a,t):n,d=o?[n]:void 0,f=$.flatten(u.map(function(h){var p;switch(h.type){case z.raise:return Cr(h);case z.send:var v=Fr(h,c,r,e.options.delays);return kr.IS_PRODUCTION||$.warn(!$.isString(h.delay)||typeof v.delay=="number","No delay reference for delay expression '".concat(h.delay,"' was found on machine '").concat(e.id,"'")),v.to!==Z.SpecialTargets.Internal&&s?.(v,c,r),v;case z.log:{var m=$r(h,c,r);return s?.(m,c,r),m}case z.choose:{var b=h,g=(p=b.conds.find(function(K){var ee=$.toGuard(K.cond,e.options.guards);return!ee||$.evaluateGuard(e,ee,c,r,s?void 0:t)}))===null||p===void 0?void 0:p.actions;if(!g)return[];var S=P.__read(On(e,t,c,r,En($.toArray(g),e.options.actions),s,o),2),T=S[0],A=S[1];return c=A,d?.push(c),T}case z.pure:{var g=h.get(c,r.data);if(!g)return[];var j=P.__read(On(e,t,c,r,En($.toArray(g),e.options.actions),s,o),2),k=j[0],I=j[1];return c=I,d?.push(c),k}case z.stop:{var m=Mr(h,c,r);return s?.(m,c,r),m}case z.assign:{c=$.updateContext(c,r,[h],s?void 0:t),d?.push(c);break}default:var O=Pt(h,e.options.actions),C=O.exec;if(s)s(O,c,r);else if(C&&d){var Q=d.length-1;O=P.__assign(P.__assign({},O),{exec:function(K){for(var ee=[],H=1;H<arguments.length;H++)ee[H-1]=arguments[H];C.apply(void 0,P.__spreadArray([d[Q]],P.__read(ee),!1))}})}return O}}).filter(function(h){return!!h}));return[f,c]}M.actionTypes=z;M.after=Co;M.assign=Ao;M.cancel=Oo;M.choose=qo;M.done=Fo;M.doneInvoke=$o;M.error=Mo;M.escalate=jo;M.forwardTo=Po;M.getActionFunction=xn;M.initEvent=go;M.isActionObject=ko;M.log=Eo;M.pure=No;M.raise=_o;M.resolveActions=On;M.resolveLog=$r;M.resolveRaise=Cr;M.resolveSend=Fr;M.resolveStop=Mr;M.respond=wo;M.send=Re;M.sendParent=In;M.sendTo=bo;M.sendUpdate=So;M.start=To;M.stop=Io;M.toActionObject=Pt;M.toActionObjects=En;M.toActivityDefinition=Tn});var An=N(qt=>{"use strict";Object.defineProperty(qt,"__esModule",{value:!0});var jt=[],Lo=function(e,t){jt.push(e);var n=t(e);return jt.pop(),n},Do=function(e){return e(jt[jt.length-1])};qt.consume=Do;qt.provide=Lo});var ot=N(Oe=>{"use strict";Object.defineProperty(Oe,"__esModule",{value:!0});var Ro=ne(),st=ue(),Uo=An();function kn(e){var t;return t={id:e,send:function(){},subscribe:function(){return{unsubscribe:function(){}}},getSnapshot:function(){},toJSON:function(){return{id:e}}},t[st.symbolObservable]=function(){return this},t}function Bo(e,t,n,r){var i,s=st.toInvokeSource(e.src),o=(i=t?.options.services)===null||i===void 0?void 0:i[s.type],l=e.data?st.mapContext(e.data,n,r):void 0,a=o?Nr(o,e.id,l):kn(e.id);return a.meta=e,a}function Nr(e,t,n){var r=kn(t);if(r.deferred=!0,st.isMachine(e)){var i=r.state=Uo.provide(void 0,function(){return(n?e.withContext(n):e).initialState});r.getSnapshot=function(){return i}}return r}function Pr(e){try{return typeof e.send=="function"}catch{return!1}}function Vo(e){return Pr(e)&&"id"in e}function Xo(e){var t;return Ro.__assign((t={subscribe:function(){return{unsubscribe:function(){}}},id:"anonymous",getSnapshot:function(){}},t[st.symbolObservable]=function(){return this},t),e)}Oe.createDeferredActor=Nr;Oe.createInvocableActor=Bo;Oe.createNullActor=kn;Oe.isActor=Pr;Oe.isSpawnedActor=Vo;Oe.toActorRef=Xo});var $n=N(J=>{"use strict";Object.defineProperty(J,"__esModule",{value:!0});var _e=ne(),Cn=ue(),Fn=function(e){return e.type==="atomic"||e.type==="final"};function jr(e){return Object.keys(e.states).map(function(t){return e.states[t]})}function at(e){return jr(e).filter(function(t){return t.type!=="history"})}function qr(e){var t=[e];return Fn(e)?t:t.concat(Cn.flatten(at(e).map(qr)))}function Lr(e,t){var n,r,i,s,o,l,a,u,c=new Set(e),d=Lt(c),f=new Set(t);try{for(var h=_e.__values(f),p=h.next();!p.done;p=h.next())for(var v=p.value,m=v.parent;m&&!f.has(m);)f.add(m),m=m.parent}catch(O){n={error:O}}finally{try{p&&!p.done&&(r=h.return)&&r.call(h)}finally{if(n)throw n.error}}var b=Lt(f);try{for(var g=_e.__values(f),S=g.next();!S.done;S=g.next()){var v=S.value;if(v.type==="compound"&&(!b.get(v)||!b.get(v).length))d.get(v)?d.get(v).forEach(function(C){return f.add(C)}):v.initialStateNodes.forEach(function(C){return f.add(C)});else if(v.type==="parallel")try{for(var T=(o=void 0,_e.__values(at(v))),A=T.next();!A.done;A=T.next()){var j=A.value;f.has(j)||(f.add(j),d.get(j)?d.get(j).forEach(function(C){return f.add(C)}):j.initialStateNodes.forEach(function(C){return f.add(C)}))}}catch(C){o={error:C}}finally{try{A&&!A.done&&(l=T.return)&&l.call(T)}finally{if(o)throw o.error}}}}catch(O){i={error:O}}finally{try{S&&!S.done&&(s=g.return)&&s.call(g)}finally{if(i)throw i.error}}try{for(var k=_e.__values(f),I=k.next();!I.done;I=k.next())for(var v=I.value,m=v.parent;m&&!f.has(m);)f.add(m),m=m.parent}catch(O){a={error:O}}finally{try{I&&!I.done&&(u=k.return)&&u.call(k)}finally{if(a)throw a.error}}return f}function Dr(e,t){var n=t.get(e);if(!n)return{};if(e.type==="compound"){var r=n[0];if(r){if(Fn(r))return r.key}else return{}}var i={};return n.forEach(function(s){i[s.key]=Dr(s,t)}),i}function Lt(e){var t,n,r=new Map;try{for(var i=_e.__values(e),s=i.next();!s.done;s=i.next()){var o=s.value;r.has(o)||r.set(o,[]),o.parent&&(r.has(o.parent)||r.set(o.parent,[]),r.get(o.parent).push(o))}}catch(l){t={error:l}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}function zo(e,t){var n=Lr([e],t);return Dr(e,Lt(n))}function Rr(e,t){return Array.isArray(e)?e.some(function(n){return n===t}):e instanceof Set?e.has(t):!1}function Ko(e){return _e.__spreadArray([],_e.__read(new Set(Cn.flatten(_e.__spreadArray([],_e.__read(e.map(function(t){return t.ownEvents})),!1)))),!1)}function Ur(e,t){return t.type==="compound"?at(t).some(function(n){return n.type==="final"&&Rr(e,n)}):t.type==="parallel"?at(t).every(function(n){return Ur(e,n)}):!1}function Yo(e){return e===void 0&&(e=[]),e.reduce(function(t,n){return n.meta!==void 0&&(t[n.id]=n.meta),t},{})}function Go(e){return new Set(Cn.flatten(e.map(function(t){return t.tags})))}J.getAdjList=Lt;J.getAllChildren=jr;J.getAllStateNodes=qr;J.getChildren=at;J.getConfiguration=Lr;J.getMeta=Yo;J.getTagsFromConfiguration=Go;J.getValue=zo;J.has=Rr;J.isInFinalState=Ur;J.isLeafNode=Fn;J.nextEvents=Ko});var ct=N(Ne=>{"use strict";Object.defineProperty(Ne,"__esModule",{value:!0});var Me=ne(),Br=$t(),ut=ue(),Vr=$n(),Xr=Ue(),Jo=ge();function zr(e,t){if(e===t)return!0;if(e===void 0||t===void 0)return!1;if(ut.isString(e)||ut.isString(t))return e===t;var n=Object.keys(e),r=Object.keys(t);return n.length===r.length&&n.every(function(i){return zr(e[i],t[i])})}function Kr(e){return typeof e!="object"||e===null?!1:"value"in e&&"_event"in e}var Ho=Kr;function Wo(e,t){var n=e.exec,r=Me.__assign(Me.__assign({},e),{exec:n!==void 0?function(){return n(t.context,t.event,{action:e,state:t,_event:t._event})}:void 0});return r}var Zo=function(){function e(t){var n=this,r;this.actions=[],this.activities=Br.EMPTY_ACTIVITY_MAP,this.meta={},this.events=[],this.value=t.value,this.context=t.context,this._event=t._event,this._sessionid=t._sessionid,this.event=this._event.data,this.historyValue=t.historyValue,this.history=t.history,this.actions=t.actions||[],this.activities=t.activities||Br.EMPTY_ACTIVITY_MAP,this.meta=Vr.getMeta(t.configuration),this.events=t.events||[],this.matches=this.matches.bind(this),this.toStrings=this.toStrings.bind(this),this.configuration=t.configuration,this.transitions=t.transitions,this.children=t.children,this.done=!!t.done,this.tags=(r=Array.isArray(t.tags)?new Set(t.tags):t.tags)!==null&&r!==void 0?r:new Set,this.machine=t.machine,Object.defineProperty(this,"nextEvents",{get:function(){return Vr.nextEvents(n.configuration)}})}return e.from=function(t,n){if(t instanceof e)return t.context!==n?new e({value:t.value,context:n,_event:t._event,_sessionid:null,historyValue:t.historyValue,history:t.history,actions:[],activities:t.activities,meta:{},events:[],configuration:[],transitions:[],children:{}}):t;var r=Xr.initEvent;return new e({value:t,context:n,_event:r,_sessionid:null,historyValue:void 0,history:void 0,actions:[],activities:void 0,meta:void 0,events:[],configuration:[],transitions:[],children:{}})},e.create=function(t){return new e(t)},e.inert=function(t,n){if(t instanceof e){if(!t.actions.length)return t;var r=Xr.initEvent;return new e({value:t.value,context:n,_event:r,_sessionid:null,historyValue:t.historyValue,history:t.history,activities:t.activities,configuration:t.configuration,transitions:[],children:{}})}return e.from(t,n)},e.prototype.toStrings=function(t,n){var r=this;if(t===void 0&&(t=this.value),n===void 0&&(n="."),ut.isString(t))return[t];var i=Object.keys(t);return i.concat.apply(i,Me.__spreadArray([],Me.__read(i.map(function(s){return r.toStrings(t[s],n).map(function(o){return s+n+o})})),!1))},e.prototype.toJSON=function(){var t=this;t.configuration,t.transitions;var n=t.tags;t.machine;var r=Me.__rest(t,["configuration","transitions","tags","machine"]);return Me.__assign(Me.__assign({},r),{tags:Array.from(n)})},e.prototype.matches=function(t){return ut.matchesState(t,this.value)},e.prototype.hasTag=function(t){return this.tags.has(t)},e.prototype.can=function(t){var n;Jo.IS_PRODUCTION&&ut.warn(!!this.machine,"state.can(...) used outside of a machine-created State object; this will always return false.");var r=(n=this.machine)===null||n===void 0?void 0:n.getTransitionData(this,t);return!!r?.transitions.length&&r.transitions.some(function(i){return i.target!==void 0||i.actions.length})},e}();Ne.State=Zo;Ne.bindActionToState=Wo;Ne.isState=Ho;Ne.isStateConfig=Kr;Ne.stateValuesEqual=zr});var Gr=N(Mn=>{"use strict";Object.defineProperty(Mn,"__esModule",{value:!0});var Yr=ne(),Qo={deferEvents:!1},ea=function(){function e(t){this.processingEvent=!1,this.queue=[],this.initialized=!1,this.options=Yr.__assign(Yr.__assign({},Qo),t)}return e.prototype.initialize=function(t){if(this.initialized=!0,t){if(!this.options.deferEvents){this.schedule(t);return}this.process(t)}this.flushEvents()},e.prototype.schedule=function(t){if(!this.initialized||this.processingEvent){this.queue.push(t);return}if(this.queue.length!==0)throw new Error("Event queue should be empty when it is not processing events");this.process(t),this.flushEvents()},e.prototype.clear=function(){this.queue=[]},e.prototype.flushEvents=function(){for(var t=this.queue.shift();t;)this.process(t),t=this.queue.shift()},e.prototype.process=function(t){this.processingEvent=!0;try{t()}catch(n){throw this.clear(),n}finally{this.processingEvent=!1}},e}();Mn.Scheduler=ea});var Jr=N(Pn=>{"use strict";Object.defineProperty(Pn,"__esModule",{value:!0});var Nn=new Map,ta=0,na={bookId:function(){return"x:".concat(ta++)},register:function(e,t){return Nn.set(e,t),e},get:function(e){return Nn.get(e)},free:function(e){Nn.delete(e)}};Pn.registry=na});var Hr=N(Dt=>{"use strict";Object.defineProperty(Dt,"__esModule",{value:!0});var ra=ge();function jn(){if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;ra.IS_PRODUCTION||console.warn("XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues")}function ia(){var e=jn();if(e&&"__xstate__"in e)return e.__xstate__}function sa(e){if(!!jn()){var t=ia();t&&t.register(e)}}Dt.getGlobal=jn;Dt.registerService=sa});var qn=N(lt=>{"use strict";Object.defineProperty(lt,"__esModule",{value:!0});var Wr=Ue(),oa=ot(),aa=ue();function ua(e,t){return{transition:e,initialState:t}}function ca(e){var t={error:void 0,data:void 0,status:"pending"};return{transition:function(n,r,i){var s=i.parent,o=i.id,l=i.observers;switch(r.type){case"fulfill":return s?.send(Wr.doneInvoke(o,r.data)),{error:void 0,data:r.data,status:"fulfilled"};case"reject":return s?.send(Wr.error(o,r.error)),l.forEach(function(a){a.error(r.error)}),{error:r.error,data:void 0,status:"rejected"};default:return n}},initialState:t,start:function(n){var r=n.self;return e().then(function(i){r.send({type:"fulfill",data:i})},function(i){r.send({type:"reject",error:i})}),t}}}function la(e,t){t===void 0&&(t={});var n=e.initialState,r=new Set,i=[],s=!1,o=function(){if(!s){for(s=!0;i.length>0;){var u=i.shift();n=e.transition(n,u,a),r.forEach(function(c){return c.next(n)})}s=!1}},l=oa.toActorRef({id:t.id,send:function(u){i.push(u),o()},getSnapshot:function(){return n},subscribe:function(u,c,d){var f=aa.toObserver(u,c,d);return r.add(f),f.next(n),{unsubscribe:function(){r.delete(f)}}}}),a={parent:t.parent,self:l,id:t.id||"anonymous",observers:r};return n=e.start?e.start(a):n,l}lt.fromPromise=ca;lt.fromReducer=ua;lt.spawnBehavior=la});var ni=N(D=>{"use strict";Object.defineProperty(D,"__esModule",{value:!0});var F=ne(),Ln=$e(),Rt=ct(),ce=rt(),re=Ue(),be=ge(),x=ue(),Zr=Gr(),Dn=ot(),Ut=Jr(),Qr=Hr(),Be=An(),fa=qn(),Rn={sync:!1,autoForward:!1};D.InterpreterStatus=void 0;(function(e){e[e.NotStarted=0]="NotStarted",e[e.Running=1]="Running",e[e.Stopped=2]="Stopped"})(D.InterpreterStatus||(D.InterpreterStatus={}));var ei=function(){function e(t,n){var r=this;n===void 0&&(n=e.defaultOptions),this.machine=t,this.delayedEventsMap={},this.listeners=new Set,this.contextListeners=new Set,this.stopListeners=new Set,this.doneListeners=new Set,this.eventListeners=new Set,this.sendListeners=new Set,this.initialized=!1,this.status=D.InterpreterStatus.NotStarted,this.children=new Map,this.forwardTo=new Set,this.init=this.start,this.send=function(c,d){if(x.isArray(c))return r.batch(c),r.state;var f=x.toSCXMLEvent(x.toEventObject(c,d));if(r.status===D.InterpreterStatus.Stopped)return be.IS_PRODUCTION||x.warn(!1,'Event "'.concat(f.name,'" was sent to stopped service "').concat(r.machine.id,`". This service has already reached its final state, and will not transition.
Event: `).concat(JSON.stringify(f.data))),r.state;if(r.status!==D.InterpreterStatus.Running&&!r.options.deferEvents)throw new Error('Event "'.concat(f.name,'" was sent to uninitialized service "').concat(r.machine.id,`". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.
Event: `).concat(JSON.stringify(f.data)));return r.scheduler.schedule(function(){r.forward(f);var h=r._nextState(f);r.update(h,f)}),r._state},this.sendTo=function(c,d){var f=r.parent&&(d===Ln.SpecialTargets.Parent||r.parent.id===d),h=f?r.parent:x.isString(d)?r.children.get(d)||Ut.registry.get(d):x.isActor(d)?d:void 0;if(!h){if(!f)throw new Error("Unable to send event to child '".concat(d,"' from service '").concat(r.id,"'."));be.IS_PRODUCTION||x.warn(!1,"Service '".concat(r.id,"' has no parent: unable to send event ").concat(c.type));return}"machine"in h?(r.status!==D.InterpreterStatus.Stopped||r.parent!==h||r.state.done)&&h.send(F.__assign(F.__assign({},c),{name:c.name===ce.error?"".concat(re.error(r.id)):c.name,origin:r.sessionId})):h.send(c.data)},this._exec=function(c,d,f,h){h===void 0&&(h=r.machine.options.actions);var p=c.exec||re.getActionFunction(c.type,h),v=x.isFunction(p)?p:p?p.exec:c.exec;if(v)try{return v(d,f.data,r.machine.config.predictableActionArguments?{action:c,_event:f}:{action:c,state:r.state,_event:f})}catch(K){throw r.parent&&r.parent.send({type:"xstate.error",data:K}),K}switch(c.type){case ce.send:var m=c;if(typeof m.delay=="number"){r.defer(m);return}else m.to?r.sendTo(m._event,m.to):r.send(m._event);break;case ce.cancel:r.cancel(c.sendId);break;case ce.start:{if(r.status!==D.InterpreterStatus.Running)return;var b=c.activity;if(!r.machine.config.predictableActionArguments&&!r.state.activities[b.id||b.type])break;if(b.type===Ln.ActionTypes.Invoke){var g=x.toInvokeSource(b.src),S=r.machine.options.services?r.machine.options.services[g.type]:void 0,T=b.id,A=b.data;be.IS_PRODUCTION||x.warn(!("forward"in b),"`forward` property is deprecated (found in invocation of '".concat(b.src,"' in in machine '").concat(r.machine.id,"'). ")+"Please use `autoForward` instead.");var j="autoForward"in b?b.autoForward:!!b.forward;if(!S){be.IS_PRODUCTION||x.warn(!1,"No service found for invocation '".concat(b.src,"' in machine '").concat(r.machine.id,"'."));return}var k=A?x.mapContext(A,d,f):void 0;if(typeof S=="string")return;var I=x.isFunction(S)?S(d,f.data,{data:k,src:g,meta:b.meta}):S;if(!I)return;var O=void 0;x.isMachine(I)&&(I=k?I.withContext(k):I,O={autoForward:j}),r.spawn(I,T,O)}else r.spawnActivity(b);break}case ce.stop:{r.stopChild(c.activity.id);break}case ce.log:var C=c.label,Q=c.value;C?r.logger(C,Q):r.logger(Q);break;default:be.IS_PRODUCTION||x.warn(!1,"No implementation found for action type '".concat(c.type,"'"));break}};var i=F.__assign(F.__assign({},e.defaultOptions),n),s=i.clock,o=i.logger,l=i.parent,a=i.id,u=a!==void 0?a:t.id;this.id=u,this.logger=o,this.clock=s,this.parent=l,this.options=i,this.scheduler=new Zr.Scheduler({deferEvents:this.options.deferEvents}),this.sessionId=Ut.registry.bookId()}return Object.defineProperty(e.prototype,"initialState",{get:function(){var t=this;return this._initialState?this._initialState:Be.provide(this,function(){return t._initialState=t.machine.initialState,t._initialState})},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"state",{get:function(){return be.IS_PRODUCTION||x.warn(this.status!==D.InterpreterStatus.NotStarted,"Attempted to read state from uninitialized service '".concat(this.id,"'. Make sure the service is started first.")),this._state},enumerable:!1,configurable:!0}),e.prototype.execute=function(t,n){var r,i;try{for(var s=F.__values(t.actions),o=s.next();!o.done;o=s.next()){var l=o.value;this.exec(l,t,n)}}catch(a){r={error:a}}finally{try{o&&!o.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}},e.prototype.update=function(t,n){var r,i,s,o,l,a,u,c,d=this;if(t._sessionid=this.sessionId,this._state=t,(!this.machine.config.predictableActionArguments||n===re.initEvent)&&this.options.execute&&this.execute(this.state),this.children.forEach(function(I){d.state.children[I.id]=I}),this.devTools&&this.devTools.send(n.data,t),t.event)try{for(var f=F.__values(this.eventListeners),h=f.next();!h.done;h=f.next()){var p=h.value;p(t.event)}}catch(I){r={error:I}}finally{try{h&&!h.done&&(i=f.return)&&i.call(f)}finally{if(r)throw r.error}}try{for(var v=F.__values(this.listeners),m=v.next();!m.done;m=v.next()){var p=m.value;p(t,t.event)}}catch(I){s={error:I}}finally{try{m&&!m.done&&(o=v.return)&&o.call(v)}finally{if(s)throw s.error}}try{for(var b=F.__values(this.contextListeners),g=b.next();!g.done;g=b.next()){var S=g.value;S(this.state.context,this.state.history?this.state.history.context:void 0)}}catch(I){l={error:I}}finally{try{g&&!g.done&&(a=b.return)&&a.call(b)}finally{if(l)throw l.error}}if(this.state.done){var T=t.configuration.find(function(I){return I.type==="final"&&I.parent===d.machine}),A=T&&T.doneData?x.mapContext(T.doneData,t.context,n):void 0;try{for(var j=F.__values(this.doneListeners),k=j.next();!k.done;k=j.next()){var p=k.value;p(re.doneInvoke(this.id,A))}}catch(I){u={error:I}}finally{try{k&&!k.done&&(c=j.return)&&c.call(j)}finally{if(u)throw u.error}}this._stop()}},e.prototype.onTransition=function(t){return this.listeners.add(t),this.status===D.InterpreterStatus.Running&&t(this.state,this.state.event),this},e.prototype.subscribe=function(t,n,r){var i=this,s=x.toObserver(t,n,r);this.listeners.add(s.next),this.status!==D.InterpreterStatus.NotStarted&&s.next(this.state);var o=function(){i.doneListeners.delete(o),i.stopListeners.delete(o),s.complete()};return this.status===D.InterpreterStatus.Stopped?s.complete():(this.onDone(o),this.onStop(o)),{unsubscribe:function(){i.listeners.delete(s.next),i.doneListeners.delete(o),i.stopListeners.delete(o)}}},e.prototype.onEvent=function(t){return this.eventListeners.add(t),this},e.prototype.onSend=function(t){return this.sendListeners.add(t),this},e.prototype.onChange=function(t){return this.contextListeners.add(t),this},e.prototype.onStop=function(t){return this.stopListeners.add(t),this},e.prototype.onDone=function(t){return this.doneListeners.add(t),this},e.prototype.off=function(t){return this.listeners.delete(t),this.eventListeners.delete(t),this.sendListeners.delete(t),this.stopListeners.delete(t),this.doneListeners.delete(t),this.contextListeners.delete(t),this},e.prototype.start=function(t){var n=this;if(this.status===D.InterpreterStatus.Running)return this;this.machine._init(),Ut.registry.register(this.sessionId,this),this.initialized=!0,this.status=D.InterpreterStatus.Running;var r=t===void 0?this.initialState:Be.provide(this,function(){return Rt.isStateConfig(t)?n.machine.resolveState(t):n.machine.resolveState(Rt.State.from(t,n.machine.context))});return this.options.devTools&&this.attachDev(),this.scheduler.initialize(function(){n.update(r,re.initEvent)}),this},e.prototype._stop=function(){var t,n,r,i,s,o,l,a,u,c;try{for(var d=F.__values(this.listeners),f=d.next();!f.done;f=d.next()){var h=f.value;this.listeners.delete(h)}}catch(k){t={error:k}}finally{try{f&&!f.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}try{for(var p=F.__values(this.stopListeners),v=p.next();!v.done;v=p.next()){var h=v.value;h(),this.stopListeners.delete(h)}}catch(k){r={error:k}}finally{try{v&&!v.done&&(i=p.return)&&i.call(p)}finally{if(r)throw r.error}}try{for(var m=F.__values(this.contextListeners),b=m.next();!b.done;b=m.next()){var h=b.value;this.contextListeners.delete(h)}}catch(k){s={error:k}}finally{try{b&&!b.done&&(o=m.return)&&o.call(m)}finally{if(s)throw s.error}}try{for(var g=F.__values(this.doneListeners),S=g.next();!S.done;S=g.next()){var h=S.value;this.doneListeners.delete(h)}}catch(k){l={error:k}}finally{try{S&&!S.done&&(a=g.return)&&a.call(g)}finally{if(l)throw l.error}}if(!this.initialized)return this;this.initialized=!1,this.status=D.InterpreterStatus.Stopped,this._initialState=void 0;try{for(var T=F.__values(Object.keys(this.delayedEventsMap)),A=T.next();!A.done;A=T.next()){var j=A.value;this.clock.clearTimeout(this.delayedEventsMap[j])}}catch(k){u={error:k}}finally{try{A&&!A.done&&(c=T.return)&&c.call(T)}finally{if(u)throw u.error}}this.scheduler.clear(),this.scheduler=new Zr.Scheduler({deferEvents:this.options.deferEvents})},e.prototype.stop=function(){var t=this,n=this.scheduler;return this._stop(),n.schedule(function(){var r=x.toSCXMLEvent({type:"xstate.stop"}),i=Be.provide(t,function(){var s=x.flatten(F.__spreadArray([],F.__read(t.state.configuration),!1).sort(function(c,d){return d.order-c.order}).map(function(c){return re.toActionObjects(c.onExit,t.machine.options.actions)})),o=F.__read(re.resolveActions(t.machine,t.state,t.state.context,r,s,t.machine.config.predictableActionArguments?t._exec:void 0,t.machine.config.predictableActionArguments||t.machine.config.preserveActionOrder),2),l=o[0],a=o[1],u=new Rt.State({value:t.state.value,context:a,_event:r,_sessionid:t.sessionId,historyValue:void 0,history:t.state,actions:l.filter(function(c){return c.type!==ce.raise&&(c.type!==ce.send||!!c.to&&c.to!==Ln.SpecialTargets.Internal)}),activities:{},events:[],configuration:[],transitions:[],children:{},done:t.state.done,tags:t.state.tags,machine:t.machine});return u.changed=!0,u});t.update(i,r),t.children.forEach(function(s){x.isFunction(s.stop)&&s.stop()}),t.children.clear(),Ut.registry.free(t.sessionId)}),this},e.prototype.batch=function(t){var n=this;if(this.status===D.InterpreterStatus.NotStarted&&this.options.deferEvents)be.IS_PRODUCTION||x.warn(!1,"".concat(t.length,' event(s) were sent to uninitialized service "').concat(this.machine.id,`" and are deferred. Make sure .start() is called for this service.
Event: `).concat(JSON.stringify(event)));else if(this.status!==D.InterpreterStatus.Running)throw new Error("".concat(t.length,' event(s) were sent to uninitialized service "').concat(this.machine.id,'". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.'));this.scheduler.schedule(function(){var r,i,s=n.state,o=!1,l=[],a=function(f){var h=x.toSCXMLEvent(f);n.forward(h),s=Be.provide(n,function(){return n.machine.transition(s,h)}),l.push.apply(l,F.__spreadArray([],F.__read(s.actions.map(function(p){return Rt.bindActionToState(p,s)})),!1)),o=o||!!s.changed};try{for(var u=F.__values(t),c=u.next();!c.done;c=u.next()){var d=c.value;a(d)}}catch(f){r={error:f}}finally{try{c&&!c.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}s.changed=o,s.actions=l,n.update(s,x.toSCXMLEvent(t[t.length-1]))})},e.prototype.sender=function(t){return this.send.bind(this,t)},e.prototype._nextState=function(t,n){var r=this;n===void 0&&(n=!!this.machine.config.predictableActionArguments&&this._exec);var i=x.toSCXMLEvent(t);if(i.name.indexOf(ce.errorPlatform)===0&&!this.state.nextEvents.some(function(o){return o.indexOf(ce.errorPlatform)===0}))throw i.data.data;var s=Be.provide(this,function(){return r.machine.transition(r.state,i,void 0,n||void 0)});return s},e.prototype.nextState=function(t){return this._nextState(t,!1)},e.prototype.forward=function(t){var n,r;try{for(var i=F.__values(this.forwardTo),s=i.next();!s.done;s=i.next()){var o=s.value,l=this.children.get(o);if(!l)throw new Error("Unable to forward event '".concat(t,"' from interpreter '").concat(this.id,"' to nonexistant child '").concat(o,"'."));l.send(t)}}catch(a){n={error:a}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},e.prototype.defer=function(t){var n=this;this.delayedEventsMap[t.id]=this.clock.setTimeout(function(){t.to?n.sendTo(t._event,t.to):n.send(t._event)},t.delay)},e.prototype.cancel=function(t){this.clock.clearTimeout(this.delayedEventsMap[t]),delete this.delayedEventsMap[t]},e.prototype.exec=function(t,n,r){r===void 0&&(r=this.machine.options.actions),this._exec(t,n.context,n._event,r)},e.prototype.removeChild=function(t){var n;this.children.delete(t),this.forwardTo.delete(t),(n=this.state)===null||n===void 0||delete n.children[t]},e.prototype.stopChild=function(t){var n=this.children.get(t);!n||(this.removeChild(t),x.isFunction(n.stop)&&n.stop())},e.prototype.spawn=function(t,n,r){if(this.status!==D.InterpreterStatus.Running)return Dn.createDeferredActor(t,n);if(x.isPromiseLike(t))return this.spawnPromise(Promise.resolve(t),n);if(x.isFunction(t))return this.spawnCallback(t,n);if(Dn.isSpawnedActor(t))return this.spawnActor(t,n);if(x.isObservable(t))return this.spawnObservable(t,n);if(x.isMachine(t))return this.spawnMachine(t,F.__assign(F.__assign({},r),{id:n}));if(x.isBehavior(t))return this.spawnBehavior(t,n);throw new Error('Unable to spawn entity "'.concat(n,'" of type "').concat(typeof t,'".'))},e.prototype.spawnMachine=function(t,n){var r=this;n===void 0&&(n={});var i=new e(t,F.__assign(F.__assign({},this.options),{parent:this,id:n.id||t.id})),s=F.__assign(F.__assign({},Rn),n);s.sync&&i.onTransition(function(l){r.send(ce.update,{state:l,id:i.id})});var o=i;return this.children.set(i.id,o),s.autoForward&&this.forwardTo.add(i.id),i.onDone(function(l){r.removeChild(i.id),r.send(x.toSCXMLEvent(l,{origin:i.id}))}).start(),o},e.prototype.spawnBehavior=function(t,n){var r=fa.spawnBehavior(t,{id:n,parent:this});return this.children.set(n,r),r},e.prototype.spawnPromise=function(t,n){var r,i=this,s=!1,o;t.then(function(a){s||(o=a,i.removeChild(n),i.send(x.toSCXMLEvent(re.doneInvoke(n,a),{origin:n})))},function(a){if(!s){i.removeChild(n);var u=re.error(n,a);try{i.send(x.toSCXMLEvent(u,{origin:n}))}catch(c){x.reportUnhandledExceptionOnInvocation(a,c,n),i.devTools&&i.devTools.send(u,i.state),i.machine.strict&&i.stop()}}});var l=(r={id:n,send:function(){},subscribe:function(a,u,c){var d=x.toObserver(a,u,c),f=!1;return t.then(function(h){f||(d.next(h),!f&&d.complete())},function(h){f||d.error(h)}),{unsubscribe:function(){return f=!0}}},stop:function(){s=!0},toJSON:function(){return{id:n}},getSnapshot:function(){return o}},r[x.symbolObservable]=function(){return this},r);return this.children.set(n,l),l},e.prototype.spawnCallback=function(t,n){var r,i=this,s=!1,o=new Set,l=new Set,a,u=function(f){a=f,l.forEach(function(h){return h(f)}),!s&&i.send(x.toSCXMLEvent(f,{origin:n}))},c;try{c=t(u,function(f){o.add(f)})}catch(f){this.send(re.error(n,f))}if(x.isPromiseLike(c))return this.spawnPromise(c,n);var d=(r={id:n,send:function(f){return o.forEach(function(h){return h(f)})},subscribe:function(f){var h=x.toObserver(f);return l.add(h.next),{unsubscribe:function(){l.delete(h.next)}}},stop:function(){s=!0,x.isFunction(c)&&c()},toJSON:function(){return{id:n}},getSnapshot:function(){return a}},r[x.symbolObservable]=function(){return this},r);return this.children.set(n,d),d},e.prototype.spawnObservable=function(t,n){var r,i=this,s,o=t.subscribe(function(a){s=a,i.send(x.toSCXMLEvent(a,{origin:n}))},function(a){i.removeChild(n),i.send(x.toSCXMLEvent(re.error(n,a),{origin:n}))},function(){i.removeChild(n),i.send(x.toSCXMLEvent(re.doneInvoke(n),{origin:n}))}),l=(r={id:n,send:function(){},subscribe:function(a,u,c){return t.subscribe(a,u,c)},stop:function(){return o.unsubscribe()},getSnapshot:function(){return s},toJSON:function(){return{id:n}}},r[x.symbolObservable]=function(){return this},r);return this.children.set(n,l),l},e.prototype.spawnActor=function(t,n){return this.children.set(n,t),t},e.prototype.spawnActivity=function(t){var n=this.machine.options&&this.machine.options.activities?this.machine.options.activities[t.type]:void 0;if(!n){be.IS_PRODUCTION||x.warn(!1,"No implementation found for activity '".concat(t.type,"'"));return}var r=n(this.state.context,t);this.spawnEffect(t.id,r)},e.prototype.spawnEffect=function(t,n){var r;this.children.set(t,(r={id:t,send:function(){},subscribe:function(){return{unsubscribe:function(){}}},stop:n||void 0,getSnapshot:function(){},toJSON:function(){return{id:t}}},r[x.symbolObservable]=function(){return this},r))},e.prototype.attachDev=function(){var t=Qr.getGlobal();if(this.options.devTools&&t){if(t.__REDUX_DEVTOOLS_EXTENSION__){var n=typeof this.options.devTools=="object"?this.options.devTools:void 0;this.devTools=t.__REDUX_DEVTOOLS_EXTENSION__.connect(F.__assign(F.__assign({name:this.id,autoPause:!0,stateSanitizer:function(r){return{value:r.value,context:r.context,actions:r.actions}}},n),{features:F.__assign({jump:!1,skip:!1},n?n.features:void 0)}),this.machine),this.devTools.init(this.state)}Qr.registerService(this)}},e.prototype.toJSON=function(){return{id:this.id}},e.prototype[x.symbolObservable]=function(){return this},e.prototype.getSnapshot=function(){return this.status===D.InterpreterStatus.NotStarted?this.initialState:this._state},e.defaultOptions={execute:!0,deferEvents:!0,clock:{setTimeout:function(t,n){return setTimeout(t,n)},clearTimeout:function(t){return clearTimeout(t)}},logger:console.log.bind(console),devTools:!1},e.interpret=ti,e}(),da=function(e){return x.isString(e)?F.__assign(F.__assign({},Rn),{name:e}):F.__assign(F.__assign(F.__assign({},Rn),{name:x.uniqueId()}),e)};function ha(e,t){var n=da(t);return Be.consume(function(r){if(!be.IS_PRODUCTION){var i=x.isMachine(e)||x.isFunction(e);x.warn(!!r||i,'Attempted to spawn an Actor (ID: "'.concat(x.isMachine(e)?e.id:"undefined",'") outside of a service. This will have no effect.'))}return r?r.spawn(e,n.name,n):Dn.createDeferredActor(e,n.name)})}function ti(e,t){var n=new ei(e,t);return n}D.Interpreter=ei;D.interpret=ti;D.spawn=ha});var si=N(Bt=>{"use strict";Object.defineProperty(Bt,"__esModule",{value:!0});var ft=ne();$e();var ri=rt();ue();ge();function ii(e){if(typeof e=="string"){var t={type:e};return t.toString=function(){return e},t}return e}function pa(e){return ft.__assign(ft.__assign({type:ri.invoke},e),{toJSON:function(){e.onDone,e.onError;var t=ft.__rest(e,["onDone","onError"]);return ft.__assign(ft.__assign({},t),{type:ri.invoke,src:ii(e.src)})}})}Bt.toInvokeDefinition=pa;Bt.toInvokeSource=ii});var Vn=N(Bn=>{"use strict";Object.defineProperty(Bn,"__esModule",{value:!0});var _=ne(),y=ue(),oi=$e(),Se=ct(),he=rt(),B=Ue(),Ve=ge(),va=$t(),V=$n(),ya=ot(),Vt=si(),Ke="",Un="#",dt="*",Xe={},ze=function(e){return e[0]===Un},ma=function(){return{actions:{},guards:{},services:{},activities:{},delays:{}}},ga=function(e,t,n){var r=n.slice(0,-1).some(function(s){return!("cond"in s)&&!("in"in s)&&(y.isString(s.target)||y.isMachine(s.target))}),i=t===Ke?"the transient event":"event '".concat(t,"'");y.warn(!r,"One or more transitions for ".concat(i," on state '").concat(e.id,"' are unreachable. ")+"Make sure that the default transition is the last one defined.")},_a=function(){function e(t,n,r,i){var s=this;r===void 0&&(r="context"in t?t.context:void 0);var o;this.config=t,this._context=r,this.order=-1,this.__xstatenode=!0,this.__cache={events:void 0,relativeValue:new Map,initialStateValue:void 0,initialState:void 0,on:void 0,transitions:void 0,candidates:{},delayedTransitions:void 0},this.idMap={},this.tags=[],this.options=Object.assign(ma(),n),this.parent=i?.parent,this.key=this.config.key||i?.key||this.config.id||"(machine)",this.machine=this.parent?this.parent.machine:this,this.path=this.parent?this.parent.path.concat(this.key):[],this.delimiter=this.config.delimiter||(this.parent?this.parent.delimiter:va.STATE_DELIMITER),this.id=this.config.id||_.__spreadArray([this.machine.key],_.__read(this.path),!1).join(this.delimiter),this.version=this.parent?this.parent.version:this.config.version,this.type=this.config.type||(this.config.parallel?"parallel":this.config.states&&Object.keys(this.config.states).length?"compound":this.config.history?"history":"atomic"),this.schema=this.parent?this.machine.schema:(o=this.config.schema)!==null&&o!==void 0?o:{},this.description=this.config.description,Ve.IS_PRODUCTION||y.warn(!("parallel"in this.config),'The "parallel" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel?"Replace with `type: 'parallel'`":"Use `type: '".concat(this.type,"'`")," in the config for state node '").concat(this.id,"' instead.")),this.initial=this.config.initial,this.states=this.config.states?y.mapValues(this.config.states,function(u,c){var d,f=new e(u,{},void 0,{parent:s,key:c});return Object.assign(s.idMap,_.__assign((d={},d[f.id]=f,d),f.idMap)),f}):Xe;var l=0;function a(u){var c,d;u.order=l++;try{for(var f=_.__values(V.getAllChildren(u)),h=f.next();!h.done;h=f.next()){var p=h.value;a(p)}}catch(v){c={error:v}}finally{try{h&&!h.done&&(d=f.return)&&d.call(f)}finally{if(c)throw c.error}}}a(this),this.history=this.config.history===!0?"shallow":this.config.history||!1,this._transient=!!this.config.always||(this.config.on?Array.isArray(this.config.on)?this.config.on.some(function(u){var c=u.event;return c===Ke}):Ke in this.config.on:!1),this.strict=!!this.config.strict,this.onEntry=y.toArray(this.config.entry||this.config.onEntry).map(function(u){return B.toActionObject(u)}),this.onExit=y.toArray(this.config.exit||this.config.onExit).map(function(u){return B.toActionObject(u)}),this.meta=this.config.meta,this.doneData=this.type==="final"?this.config.data:void 0,this.invoke=y.toArray(this.config.invoke).map(function(u,c){var d,f;if(y.isMachine(u)){var h=y.createInvokeId(s.id,c);return s.machine.options.services=_.__assign((d={},d[h]=u,d),s.machine.options.services),Vt.toInvokeDefinition({src:h,id:h})}else if(y.isString(u.src)){var h=u.id||y.createInvokeId(s.id,c);return Vt.toInvokeDefinition(_.__assign(_.__assign({},u),{id:h,src:u.src}))}else if(y.isMachine(u.src)||y.isFunction(u.src)){var h=u.id||y.createInvokeId(s.id,c);return s.machine.options.services=_.__assign((f={},f[h]=u.src,f),s.machine.options.services),Vt.toInvokeDefinition(_.__assign(_.__assign({id:h},u),{src:h}))}else{var p=u.src;return Vt.toInvokeDefinition(_.__assign(_.__assign({id:y.createInvokeId(s.id,c)},u),{src:p}))}}),this.activities=y.toArray(this.config.activities).concat(this.invoke).map(function(u){return B.toActivityDefinition(u)}),this.transition=this.transition.bind(this),this.tags=y.toArray(this.config.tags)}return e.prototype._init=function(){this.__cache.transitions||V.getAllStateNodes(this).forEach(function(t){return t.on})},e.prototype.withConfig=function(t,n){var r=this.options,i=r.actions,s=r.activities,o=r.guards,l=r.services,a=r.delays;return new e(this.config,{actions:_.__assign(_.__assign({},i),t.actions),activities:_.__assign(_.__assign({},s),t.activities),guards:_.__assign(_.__assign({},o),t.guards),services:_.__assign(_.__assign({},l),t.services),delays:_.__assign(_.__assign({},a),t.delays)},n??this.context)},e.prototype.withContext=function(t){return new e(this.config,this.options,t)},Object.defineProperty(e.prototype,"context",{get:function(){return y.isFunction(this._context)?this._context():this._context},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"definition",{get:function(){return{id:this.id,key:this.key,version:this.version,context:this.context,type:this.type,initial:this.initial,history:this.history,states:y.mapValues(this.states,function(t){return t.definition}),on:this.on,transitions:this.transitions,entry:this.onEntry,exit:this.onExit,activities:this.activities||[],meta:this.meta,order:this.order||-1,data:this.doneData,invoke:this.invoke,description:this.description,tags:this.tags}},enumerable:!1,configurable:!0}),e.prototype.toJSON=function(){return this.definition},Object.defineProperty(e.prototype,"on",{get:function(){if(this.__cache.on)return this.__cache.on;var t=this.transitions;return this.__cache.on=t.reduce(function(n,r){return n[r.eventType]=n[r.eventType]||[],n[r.eventType].push(r),n},{})},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"after",{get:function(){return this.__cache.delayedTransitions||(this.__cache.delayedTransitions=this.getDelayedTransitions(),this.__cache.delayedTransitions)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"transitions",{get:function(){return this.__cache.transitions||(this.__cache.transitions=this.formatTransitions(),this.__cache.transitions)},enumerable:!1,configurable:!0}),e.prototype.getCandidates=function(t){if(this.__cache.candidates[t])return this.__cache.candidates[t];var n=t===Ke,r=this.transitions.filter(function(i){var s=i.eventType===t;return n?s:s||i.eventType===dt});return this.__cache.candidates[t]=r,r},e.prototype.getDelayedTransitions=function(){var t=this,n=this.config.after;if(!n)return[];var r=function(s,o){var l=y.isFunction(s)?"".concat(t.id,":delay[").concat(o,"]"):s,a=B.after(l,t.id);return t.onEntry.push(B.send(a,{delay:s})),t.onExit.push(B.cancel(a)),a},i=y.isArray(n)?n.map(function(s,o){var l=r(s.delay,o);return _.__assign(_.__assign({},s),{event:l})}):y.flatten(Object.keys(n).map(function(s,o){var l=n[s],a=y.isString(l)?{target:l}:l,u=isNaN(+s)?s:+s,c=r(u,o);return y.toArray(a).map(function(d){return _.__assign(_.__assign({},d),{event:c,delay:u})})}));return i.map(function(s){var o=s.delay;return _.__assign(_.__assign({},t.formatTransition(s)),{delay:o})})},e.prototype.getStateNodes=function(t){var n,r=this;if(!t)return[];var i=t instanceof Se.State?t.value:y.toStateValue(t,this.delimiter);if(y.isString(i)){var s=this.getStateNode(i).initial;return s!==void 0?this.getStateNodes((n={},n[i]=s,n)):[this,this.states[i]]}var o=Object.keys(i),l=[this];return l.push.apply(l,_.__spreadArray([],_.__read(y.flatten(o.map(function(a){return r.getStateNode(a).getStateNodes(i[a])}))),!1)),l},e.prototype.handles=function(t){var n=y.getEventType(t);return this.events.includes(n)},e.prototype.resolveState=function(t){var n=t instanceof Se.State?t:Se.State.create(t),r=Array.from(V.getConfiguration([],this.getStateNodes(n.value)));return new Se.State(_.__assign(_.__assign({},n),{value:this.resolve(n.value),configuration:r,done:V.isInFinalState(r,this),tags:V.getTagsFromConfiguration(r),machine:this.machine}))},e.prototype.transitionLeafNode=function(t,n,r){var i=this.getStateNode(t),s=i.next(n,r);return!s||!s.transitions.length?this.next(n,r):s},e.prototype.transitionCompoundNode=function(t,n,r){var i=Object.keys(t),s=this.getStateNode(i[0]),o=s._transition(t[i[0]],n,r);return!o||!o.transitions.length?this.next(n,r):o},e.prototype.transitionParallelNode=function(t,n,r){var i,s,o={};try{for(var l=_.__values(Object.keys(t)),a=l.next();!a.done;a=l.next()){var u=a.value,c=t[u];if(!!c){var d=this.getStateNode(u),f=d._transition(c,n,r);f&&(o[u]=f)}}}catch(g){i={error:g}}finally{try{a&&!a.done&&(s=l.return)&&s.call(l)}finally{if(i)throw i.error}}var h=Object.keys(o).map(function(g){return o[g]}),p=y.flatten(h.map(function(g){return g.transitions})),v=h.some(function(g){return g.transitions.length>0});if(!v)return this.next(n,r);var m=y.flatten(h.map(function(g){return g.entrySet})),b=y.flatten(Object.keys(o).map(function(g){return o[g].configuration}));return{transitions:p,entrySet:m,exitSet:y.flatten(h.map(function(g){return g.exitSet})),configuration:b,source:n,actions:y.flatten(Object.keys(o).map(function(g){return o[g].actions}))}},e.prototype._transition=function(t,n,r){return y.isString(t)?this.transitionLeafNode(t,n,r):Object.keys(t).length===1?this.transitionCompoundNode(t,n,r):this.transitionParallelNode(t,n,r)},e.prototype.getTransitionData=function(t,n){return this._transition(t.value,t,y.toSCXMLEvent(n))},e.prototype.next=function(t,n){var r,i,s=this,o=n.name,l=[],a=[],u;try{for(var c=_.__values(this.getCandidates(o)),d=c.next();!d.done;d=c.next()){var f=d.value,h=f.cond,p=f.in,v=t.context,m=p?y.isString(p)&&ze(p)?t.matches(y.toStateValue(this.getStateNodeById(p).path,this.delimiter)):y.matchesState(y.toStateValue(p,this.delimiter),y.path(this.path.slice(0,-2))(t.value)):!0,b=!1;try{b=!h||y.evaluateGuard(this.machine,h,v,n,t)}catch(A){throw new Error("Unable to evaluate guard '".concat(h.name||h.type,"' in transition for event '").concat(o,"' in state node '").concat(this.id,`':
`).concat(A.message))}if(b&&m){f.target!==void 0&&(a=f.target),l.push.apply(l,_.__spreadArray([],_.__read(f.actions),!1)),u=f;break}}}catch(A){r={error:A}}finally{try{d&&!d.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}if(!!u){if(!a.length)return{transitions:[u],entrySet:[],exitSet:[],configuration:t.value?[this]:[],source:t,actions:l};var g=y.flatten(a.map(function(A){return s.getRelativeStateNodes(A,t.historyValue)})),S=!!u.internal,T=[];return S||a.forEach(function(A){T.push.apply(T,_.__spreadArray([],_.__read(s.getExternalReentryNodes(A)),!1))}),{transitions:[u],entrySet:T,exitSet:S?[]:[this],configuration:g,source:t,actions:l}}},e.prototype.getExternalReentryNodes=function(t){for(var n=[],r=_.__read(t.order>this.order?[t,this]:[this,t],2),i=r[0],s=r[1];i&&i!==s;)n.push(i),i=i.parent;return i!==s?[]:(n.push(s),n)},e.prototype.getActions=function(t,n,r,i,s,o){var l,a,u,c,d=V.getConfiguration([],o?this.getStateNodes(o.value):[this]);try{for(var f=_.__values(t),h=f.next();!h.done;h=f.next()){var p=h.value;(!V.has(d,p)||V.has(r.entrySet,p.parent))&&r.entrySet.push(p)}}catch(O){l={error:O}}finally{try{h&&!h.done&&(a=f.return)&&a.call(f)}finally{if(l)throw l.error}}try{for(var v=_.__values(d),m=v.next();!m.done;m=v.next()){var p=m.value;(!V.has(t,p)||V.has(r.exitSet,p.parent))&&r.exitSet.push(p)}}catch(O){u={error:O}}finally{try{m&&!m.done&&(c=v.return)&&c.call(v)}finally{if(u)throw u.error}}var b=y.flatten(r.entrySet.map(function(O){var C=[];if(O.type!=="final")return C;var Q=O.parent;if(!Q.parent)return C;C.push(B.done(O.id,O.doneData),B.done(Q.id,O.doneData?y.mapContext(O.doneData,i,s):void 0));var K=Q.parent;return K.type==="parallel"&&V.getChildren(K).every(function(ee){return V.isInFinalState(r.configuration,ee)})&&C.push(B.done(K.id)),C}));r.exitSet.sort(function(O,C){return C.order-O.order}),r.entrySet.sort(function(O,C){return O.order-C.order});var g=new Set(r.entrySet),S=new Set(r.exitSet),T=_.__read([y.flatten(Array.from(g).map(function(O){return _.__spreadArray(_.__spreadArray([],_.__read(O.activities.map(function(C){return B.start(C)})),!1),_.__read(O.onEntry),!1)})).concat(b.map(B.raise)),y.flatten(Array.from(S).map(function(O){return _.__spreadArray(_.__spreadArray([],_.__read(O.onExit),!1),_.__read(O.activities.map(function(C){return B.stop(C)})),!1)}))],2),A=T[0],j=T[1],k=B.toActionObjects(j.concat(r.actions).concat(A),this.machine.options.actions);if(n){var I=B.toActionObjects(y.flatten(_.__spreadArray([],_.__read(t),!1).sort(function(O,C){return C.order-O.order}).map(function(O){return O.onExit})),this.machine.options.actions).filter(function(O){return O.type!==he.raise&&(O.type!==he.send||!!O.to&&O.to!==oi.SpecialTargets.Internal)});return k.concat(I)}return k},e.prototype.transition=function(t,n,r,i){t===void 0&&(t=this.initialState);var s=y.toSCXMLEvent(n),o;if(t instanceof Se.State)o=r===void 0?t:this.resolveState(Se.State.from(t,r));else{var l=y.isString(t)?this.resolve(y.pathToStateValue(this.getResolvedPath(t))):this.resolve(t),a=r??this.machine.context;o=this.resolveState(Se.State.from(l,a))}if(!Ve.IS_PRODUCTION&&s.name===dt)throw new Error("An event cannot have the wildcard type ('".concat(dt,"')"));if(this.strict&&!this.events.includes(s.name)&&!y.isBuiltInEvent(s.name))throw new Error("Machine '".concat(this.id,"' does not accept event '").concat(s.name,"'"));var u=this._transition(o.value,o,s)||{transitions:[],configuration:[],entrySet:[],exitSet:[],source:o,actions:[]},c=V.getConfiguration([],this.getStateNodes(o.value)),d=u.configuration.length?V.getConfiguration(c,u.configuration):c;return u.configuration=_.__spreadArray([],_.__read(d),!1),this.resolveTransition(u,o,o.context,i,s)},e.prototype.resolveRaisedTransition=function(t,n,r,i){var s,o=t.actions;return t=this.transition(t,n,void 0,i),t._event=r,t.event=r.data,(s=t.actions).unshift.apply(s,_.__spreadArray([],_.__read(o),!1)),t},e.prototype.resolveTransition=function(t,n,r,i,s){var o,l,a=this;s===void 0&&(s=B.initEvent);var u=t.configuration,c=!n||t.transitions.length>0,d=c?t.configuration:n?n.configuration:[],f=V.isInFinalState(d,this),h=c?V.getValue(this.machine,u):void 0,p=n?n.historyValue?n.historyValue:t.source?this.machine.historyValue(n.value):void 0:void 0,v=this.getActions(new Set(d),f,t,r,s,n),m=n?_.__assign({},n.activities):{};try{for(var b=_.__values(v),g=b.next();!g.done;g=b.next()){var S=g.value;S.type===he.start?m[S.activity.id||S.activity.type]=S:S.type===he.stop&&(m[S.activity.id||S.activity.type]=!1)}}catch(R){o={error:R}}finally{try{g&&!g.done&&(l=b.return)&&l.call(b)}finally{if(o)throw o.error}}var T=_.__read(B.resolveActions(this,n,r,s,v,i,this.machine.config.predictableActionArguments||this.machine.config.preserveActionOrder),2),A=T[0],j=T[1],k=_.__read(y.partition(A,function(R){return R.type===he.raise||R.type===he.send&&R.to===oi.SpecialTargets.Internal}),2),I=k[0],O=k[1],C=A.filter(function(R){var se;return R.type===he.start&&((se=R.activity)===null||se===void 0?void 0:se.type)===he.invoke}),Q=C.reduce(function(R,se){return R[se.activity.id]=ya.createInvocableActor(se.activity,a.machine,j,s),R},n?_.__assign({},n.children):{}),K=new Se.State({value:h||n.value,context:j,_event:s,_sessionid:n?n._sessionid:null,historyValue:h?p?y.updateHistoryValue(p,h):void 0:n?n.historyValue:void 0,history:!h||t.source?n:void 0,actions:h?O:[],activities:h?m:n?n.activities:{},events:[],configuration:d,transitions:t.transitions,children:Q,done:f,tags:V.getTagsFromConfiguration(d),machine:this}),ee=r!==j;K.changed=s.name===he.update||ee;var H=K.history;H&&delete H.history;var yt=!f&&(this._transient||u.some(function(R){return R._transient}));if(!c&&(!yt||s.name===Ke))return K;var W=K;if(!f)for(yt&&(W=this.resolveRaisedTransition(W,{type:he.nullEvent},s,i));I.length;){var w=I.shift();W=this.resolveRaisedTransition(W,w._event,s,i)}var L=W.changed||(H?!!W.actions.length||ee||typeof H.value!=typeof W.value||!Se.stateValuesEqual(W.value,H.value):void 0);return W.changed=L,W.history=H,W},e.prototype.getStateNode=function(t){if(ze(t))return this.machine.getStateNodeById(t);if(!this.states)throw new Error("Unable to retrieve child state '".concat(t,"' from '").concat(this.id,"'; no child states exist."));var n=this.states[t];if(!n)throw new Error("Child state '".concat(t,"' does not exist on '").concat(this.id,"'"));return n},e.prototype.getStateNodeById=function(t){var n=ze(t)?t.slice(Un.length):t;if(n===this.id)return this;var r=this.machine.idMap[n];if(!r)throw new Error("Child state node '#".concat(n,"' does not exist on machine '").concat(this.id,"'"));return r},e.prototype.getStateNodeByPath=function(t){if(typeof t=="string"&&ze(t))try{return this.getStateNodeById(t.slice(1))}catch{}for(var n=y.toStatePath(t,this.delimiter).slice(),r=this;n.length;){var i=n.shift();if(!i.length)break;r=r.getStateNode(i)}return r},e.prototype.resolve=function(t){var n,r=this;if(!t)return this.initialStateValue||Xe;switch(this.type){case"parallel":return y.mapValues(this.initialStateValue,function(s,o){return s?r.getStateNode(o).resolve(t[o]||s):Xe});case"compound":if(y.isString(t)){var i=this.getStateNode(t);return i.type==="parallel"||i.type==="compound"?(n={},n[t]=i.initialStateValue,n):t}return Object.keys(t).length?y.mapValues(t,function(s,o){return s?r.getStateNode(o).resolve(s):Xe}):this.initialStateValue||{};default:return t||Xe}},e.prototype.getResolvedPath=function(t){if(ze(t)){var n=this.machine.idMap[t.slice(Un.length)];if(!n)throw new Error("Unable to find state node '".concat(t,"'"));return n.path}return y.toStatePath(t,this.delimiter)},Object.defineProperty(e.prototype,"initialStateValue",{get:function(){var t;if(this.__cache.initialStateValue)return this.__cache.initialStateValue;var n;if(this.type==="parallel")n=y.mapFilterValues(this.states,function(r){return r.initialStateValue||Xe},function(r){return r.type!=="history"});else if(this.initial!==void 0){if(!this.states[this.initial])throw new Error("Initial state '".concat(this.initial,"' not found on '").concat(this.key,"'"));n=V.isLeafNode(this.states[this.initial])?this.initial:(t={},t[this.initial]=this.states[this.initial].initialStateValue,t)}else n={};return this.__cache.initialStateValue=n,this.__cache.initialStateValue},enumerable:!1,configurable:!0}),e.prototype.getInitialState=function(t,n){this._init();var r=this.getStateNodes(t);return this.resolveTransition({configuration:r,entrySet:_.__spreadArray([],_.__read(r),!1),exitSet:[],transitions:[],source:void 0,actions:[]},void 0,n??this.machine.context,void 0)},Object.defineProperty(e.prototype,"initialState",{get:function(){var t=this.initialStateValue;if(!t)throw new Error("Cannot retrieve initial state from simple state '".concat(this.id,"'."));return this.getInitialState(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"target",{get:function(){var t;if(this.type==="history"){var n=this.config;y.isString(n.target)?t=ze(n.target)?y.pathToStateValue(this.machine.getStateNodeById(n.target).path.slice(this.path.length-1)):n.target:t=n.target}return t},enumerable:!1,configurable:!0}),e.prototype.getRelativeStateNodes=function(t,n,r){return r===void 0&&(r=!0),r?t.type==="history"?t.resolveHistory(n):t.initialStateNodes:[t]},Object.defineProperty(e.prototype,"initialStateNodes",{get:function(){var t=this;if(V.isLeafNode(this))return[this];if(this.type==="compound"&&!this.initial)return Ve.IS_PRODUCTION||y.warn(!1,"Compound state node '".concat(this.id,"' has no initial state.")),[this];var n=y.toStatePaths(this.initialStateValue);return y.flatten(n.map(function(r){return t.getFromRelativePath(r)}))},enumerable:!1,configurable:!0}),e.prototype.getFromRelativePath=function(t){if(!t.length)return[this];var n=_.__read(t),r=n[0],i=n.slice(1);if(!this.states)throw new Error("Cannot retrieve subPath '".concat(r,"' from node with no states"));var s=this.getStateNode(r);if(s.type==="history")return s.resolveHistory();if(!this.states[r])throw new Error("Child state '".concat(r,"' does not exist on '").concat(this.id,"'"));return this.states[r].getFromRelativePath(i)},e.prototype.historyValue=function(t){if(!!Object.keys(this.states).length)return{current:t||this.initialStateValue,states:y.mapFilterValues(this.states,function(n,r){if(!t)return n.historyValue();var i=y.isString(t)?void 0:t[r];return n.historyValue(i||n.initialStateValue)},function(n){return!n.history})}},e.prototype.resolveHistory=function(t){var n=this;if(this.type!=="history")return[this];var r=this.parent;if(!t){var i=this.target;return i?y.flatten(y.toStatePaths(i).map(function(o){return r.getFromRelativePath(o)})):r.initialStateNodes}var s=y.nestedPath(r.path,"states")(t).current;return y.isString(s)?[r.getStateNode(s)]:y.flatten(y.toStatePaths(s).map(function(o){return n.history==="deep"?r.getFromRelativePath(o):[r.states[o[0]]]}))},Object.defineProperty(e.prototype,"stateIds",{get:function(){var t=this,n=y.flatten(Object.keys(this.states).map(function(r){return t.states[r].stateIds}));return[this.id].concat(n)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"events",{get:function(){var t,n,r,i;if(this.__cache.events)return this.__cache.events;var s=this.states,o=new Set(this.ownEvents);if(s)try{for(var l=_.__values(Object.keys(s)),a=l.next();!a.done;a=l.next()){var u=a.value,c=s[u];if(c.states)try{for(var d=(r=void 0,_.__values(c.events)),f=d.next();!f.done;f=d.next()){var h=f.value;o.add("".concat(h))}}catch(p){r={error:p}}finally{try{f&&!f.done&&(i=d.return)&&i.call(d)}finally{if(r)throw r.error}}}}catch(p){t={error:p}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}return this.__cache.events=Array.from(o)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"ownEvents",{get:function(){var t=new Set(this.transitions.filter(function(n){return!(!n.target&&!n.actions.length&&n.internal)}).map(function(n){return n.eventType}));return Array.from(t)},enumerable:!1,configurable:!0}),e.prototype.resolveTarget=function(t){var n=this;if(t!==void 0)return t.map(function(r){if(!y.isString(r))return r;var i=r[0]===n.delimiter;if(i&&!n.parent)return n.getStateNodeByPath(r.slice(1));var s=i?n.key+r:r;if(n.parent)try{var o=n.parent.getStateNodeByPath(s);return o}catch(l){throw new Error("Invalid transition definition for state node '".concat(n.id,`':
`).concat(l.message))}else return n.getStateNodeByPath(s)})},e.prototype.formatTransition=function(t){var n=this,r=y.normalizeTarget(t.target),i="internal"in t?t.internal:r?r.some(function(a){return y.isString(a)&&a[0]===n.delimiter}):!0,s=this.machine.options.guards,o=this.resolveTarget(r),l=_.__assign(_.__assign({},t),{actions:B.toActionObjects(y.toArray(t.actions)),cond:y.toGuard(t.cond,s),target:o,source:this,internal:i,eventType:t.event,toJSON:function(){return _.__assign(_.__assign({},l),{target:l.target?l.target.map(function(a){return"#".concat(a.id)}):void 0,source:"#".concat(n.id)})}});return l},e.prototype.formatTransitions=function(){var t,n,r=this,i;if(!this.config.on)i=[];else if(Array.isArray(this.config.on))i=this.config.on;else{var s=this.config.on,o=dt,l=s[o],a=l===void 0?[]:l,u=_.__rest(s,[typeof o=="symbol"?o:o+""]);i=y.flatten(Object.keys(u).map(function(g){!Ve.IS_PRODUCTION&&g===Ke&&y.warn(!1,"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. "+'Please check the `on` configuration for "#'.concat(r.id,'".'));var S=y.toTransitionConfigArray(g,u[g]);return Ve.IS_PRODUCTION||ga(r,g,S),S}).concat(y.toTransitionConfigArray(dt,a)))}var c=this.config.always?y.toTransitionConfigArray("",this.config.always):[],d=this.config.onDone?y.toTransitionConfigArray(String(B.done(this.id)),this.config.onDone):[];Ve.IS_PRODUCTION||y.warn(!(this.config.onDone&&!this.parent),'Root nodes cannot have an ".onDone" transition. Please check the config of "'.concat(this.id,'".'));var f=y.flatten(this.invoke.map(function(g){var S=[];return g.onDone&&S.push.apply(S,_.__spreadArray([],_.__read(y.toTransitionConfigArray(String(B.doneInvoke(g.id)),g.onDone)),!1)),g.onError&&S.push.apply(S,_.__spreadArray([],_.__read(y.toTransitionConfigArray(String(B.error(g.id)),g.onError)),!1)),S})),h=this.after,p=y.flatten(_.__spreadArray(_.__spreadArray(_.__spreadArray(_.__spreadArray([],_.__read(d),!1),_.__read(f),!1),_.__read(i),!1),_.__read(c),!1).map(function(g){return y.toArray(g).map(function(S){return r.formatTransition(S)})}));try{for(var v=_.__values(h),m=v.next();!m.done;m=v.next()){var b=m.value;p.push(b)}}catch(g){t={error:g}}finally{try{m&&!m.done&&(n=v.return)&&n.call(v)}finally{if(t)throw t.error}}return p},e}();Bn.StateNode=_a});var li=N(Xt=>{"use strict";Object.defineProperty(Xt,"__esModule",{value:!0});var ci=Vn(),ba=ge(),ai=!1;function Sa(e,t,n){return n===void 0&&(n=e.context),new ci.StateNode(e,t,n)}function wa(e,t){return!ba.IS_PRODUCTION&&!e.predictableActionArguments&&!ai&&(ai=!0,console.warn("It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html")),new ci.StateNode(e,t)}Xt.Machine=Sa;Xt.createMachine=wa});var fi=N(Xn=>{"use strict";Object.defineProperty(Xn,"__esModule",{value:!0});var xa=ne(),Ea=ue();function Oa(e,t){var n,r,i;try{for(var s=xa.__values(Object.keys(e)),o=s.next();!o.done;o=s.next()){var l=o.value;Ea.matchesState(l,t)&&(!i||t.length>i.length)&&(i=l)}}catch(a){n={error:a}}finally{try{o&&!o.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}return e[i]}Xn.mapState=Oa});var pi=N(zn=>{"use strict";Object.defineProperty(zn,"__esModule",{value:!0});var di=ne(),hi=ct();function Ta(e,t,n){var r,i,s=hi.State.from(e,e instanceof hi.State?e.context:void 0);try{for(var o=di.__values(t),l=o.next();!l.done;l=o.next()){var a=di.__read(l.value,2),u=a[0],c=a[1];if(s.matches(u))return c(s)}}catch(d){r={error:d}}finally{try{l&&!l.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}return n(s)}zn.matchState=Ta});var yi=N(zt=>{"use strict";Object.defineProperty(zt,"__esModule",{value:!0});function vi(e){return e}var Ia=vi;zt.createSchema=vi;zt.t=Ia});var Kn=N(q=>{"use strict";Object.defineProperty(q,"__esModule",{value:!0});var Pe=Ue(),Aa=ot(),Kt=ni(),mi=li(),ka=fi(),Ca=pi(),gi=yi(),Fa=ct(),$a=Vn(),Ma=qn(),_i=$e(),Yt=ue(),Na=Pe.assign,Pa=Pe.send,ja=Pe.sendParent,qa=Pe.sendUpdate,La=Pe.forwardTo,Da=Pe.doneInvoke;q.actions=Pe;q.toActorRef=Aa.toActorRef;q.Interpreter=Kt.Interpreter;Object.defineProperty(q,"InterpreterStatus",{enumerable:!0,get:function(){return Kt.InterpreterStatus}});q.interpret=Kt.interpret;q.spawn=Kt.spawn;q.Machine=mi.Machine;q.createMachine=mi.createMachine;q.mapState=ka.mapState;q.matchState=Ca.matchState;q.createSchema=gi.createSchema;q.t=gi.t;q.State=Fa.State;q.StateNode=$a.StateNode;q.spawnBehavior=Ma.spawnBehavior;Object.defineProperty(q,"ActionTypes",{enumerable:!0,get:function(){return _i.ActionTypes}});Object.defineProperty(q,"SpecialTargets",{enumerable:!0,get:function(){return _i.SpecialTargets}});q.matchesState=Yt.matchesState;q.toEventObject=Yt.toEventObject;q.toObserver=Yt.toObserver;q.toSCXMLEvent=Yt.toSCXMLEvent;q.assign=Na;q.doneInvoke=Da;q.forwardTo=La;q.send=Pa;q.sendParent=ja;q.sendUpdate=qa});var Yn=N(Ye=>{"use strict";Object.defineProperty(Ye,"__esModule",{value:!0});Ye.persistExec=Ye.getHistoricCallsForInput=void 0;var Gt="actus-exec-graph",Ra=100,Ua=.7;function Ba(e,t){if(typeof localStorage>"u"){console.log("Can't store execution graph, local storage not found");return}localStorage.setItem(e,JSON.stringify(t))}function Si(e){if(typeof localStorage>"u"){console.log("Can't load execution graph, local storage not found");return}try{let t=localStorage.getItem(e),n=JSON.parse(t);return n??{entrygraph:{next:{}}}}catch(t){return console.log("Couldn't load execution graph from local storage:",t),{entrygraph:{next:{}}}}}function Va(e,t){let n=t!=null?t():Si(Gt);return wi(e,n).commands||[]}Ye.getHistoricCallsForInput=Va;function Xa(e,t,n,r){let i=n!=null?n():Si(Gt);i=za(e,t,i),r!=null?r(Gt,i):Ba(Gt,i)}Ye.persistExec=Xa;function wi(e,t){let n=e[0].split("").reduce((s,o)=>s.concat("next",o),[]),r=t.entrygraph;for(;n.length;){let s=n.shift();r=bi(r,s,{}),r=r[s]}let i=r;return i=bi(i,"commands",[]),i}function za(e,t,n){let i=wi(e,n).commands,s=i.findIndex(o=>o.id===t);return s>-1?(i[s].calls++,i[s].calls>=Ra&&xi(n.entrygraph.next),n):(i.push({id:t,calls:1}),n)}function bi(e,t,n){return typeof e[t]>"u"&&(e[t]=n),e}function xi(e){Object.keys(e).forEach(n=>{if(e[n].commands.length)for(let r=e[n].commands.length-1;r>=0;r--)e[n].commands[r].calls=Math.floor(e[n].commands[r].calls*Ua),e[n].commands[r].calls<1&&e[n].commands.splice(r,1);e[n].next&&xi(e[n].next)})}});var Oi=N((Ei,Jt)=>{(function(e,t){typeof Jt=="object"&&Jt.exports?Jt.exports=t():e.nearley=t()})(Ei,function(){function e(a,u,c){return this.id=++e.highestId,this.name=a,this.symbols=u,this.postprocess=c,this}e.highestId=0,e.prototype.toString=function(a){var u=typeof a>"u"?this.symbols.map(l).join(" "):this.symbols.slice(0,a).map(l).join(" ")+" \u25CF "+this.symbols.slice(a).map(l).join(" ");return this.name+" \u2192 "+u};function t(a,u,c,d){this.rule=a,this.dot=u,this.reference=c,this.data=[],this.wantedBy=d,this.isComplete=this.dot===a.symbols.length}t.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},t.prototype.nextState=function(a){var u=new t(this.rule,this.dot+1,this.reference,this.wantedBy);return u.left=this,u.right=a,u.isComplete&&(u.data=u.build(),u.right=void 0),u},t.prototype.build=function(){var a=[],u=this;do a.push(u.right.data),u=u.left;while(u.left);return a.reverse(),a},t.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,s.fail))};function n(a,u){this.grammar=a,this.index=u,this.states=[],this.wants={},this.scannable=[],this.completed={}}n.prototype.process=function(a){for(var u=this.states,c=this.wants,d=this.completed,f=0;f<u.length;f++){var h=u[f];if(h.isComplete){if(h.finish(),h.data!==s.fail){for(var p=h.wantedBy,v=p.length;v--;){var m=p[v];this.complete(m,h)}if(h.reference===this.index){var b=h.rule.name;(this.completed[b]=this.completed[b]||[]).push(h)}}}else{var b=h.rule.symbols[h.dot];if(typeof b!="string"){this.scannable.push(h);continue}if(c[b]){if(c[b].push(h),d.hasOwnProperty(b))for(var g=d[b],v=0;v<g.length;v++){var S=g[v];this.complete(h,S)}}else c[b]=[h],this.predict(b)}}},n.prototype.predict=function(a){for(var u=this.grammar.byName[a]||[],c=0;c<u.length;c++){var d=u[c],f=this.wants[a],h=new t(d,0,this.index,f);this.states.push(h)}},n.prototype.complete=function(a,u){var c=a.nextState(u);this.states.push(c)};function r(a,u){this.rules=a,this.start=u||this.rules[0].name;var c=this.byName={};this.rules.forEach(function(d){c.hasOwnProperty(d.name)||(c[d.name]=[]),c[d.name].push(d)})}r.fromCompiled=function(d,u){var c=d.Lexer;d.ParserStart&&(u=d.ParserStart,d=d.ParserRules);var d=d.map(function(h){return new e(h.name,h.symbols,h.postprocess)}),f=new r(d,u);return f.lexer=c,f};function i(){this.reset("")}i.prototype.reset=function(a,u){this.buffer=a,this.index=0,this.line=u?u.line:1,this.lastLineBreak=u?-u.col:0},i.prototype.next=function(){if(this.index<this.buffer.length){var a=this.buffer[this.index++];return a===`
`&&(this.line+=1,this.lastLineBreak=this.index),{value:a}}},i.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},i.prototype.formatError=function(a,u){var c=this.buffer;if(typeof c=="string"){var d=c.split(`
`).slice(Math.max(0,this.line-5),this.line),f=c.indexOf(`
`,this.index);f===-1&&(f=c.length);var h=this.index-this.lastLineBreak,p=String(this.line).length;return u+=" at line "+this.line+" col "+h+`:

`,u+=d.map(function(m,b){return v(this.line-d.length+b+1,p)+" "+m},this).join(`
`),u+=`
`+v("",p+h)+`^
`,u}else return u+" at index "+(this.index-1);function v(m,b){var g=String(m);return Array(b-g.length+1).join(" ")+g}};function s(a,u,c){if(a instanceof r)var d=a,c=u;else var d=r.fromCompiled(a,u);this.grammar=d,this.options={keepHistory:!1,lexer:d.lexer||new i};for(var f in c||{})this.options[f]=c[f];this.lexer=this.options.lexer,this.lexerState=void 0;var h=new n(d,0),p=this.table=[h];h.wants[d.start]=[],h.predict(d.start),h.process(),this.current=0}s.fail={},s.prototype.feed=function(a){var u=this.lexer;u.reset(a,this.lexerState);for(var c;;){try{if(c=u.next(),!c)break}catch(j){var p=new n(this.grammar,this.current+1);this.table.push(p);var d=new Error(this.reportLexerError(j));throw d.offset=this.current,d.token=j.token,d}var f=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var h=this.current+1,p=new n(this.grammar,h);this.table.push(p);for(var v=c.text!==void 0?c.text:c.value,m=u.constructor===i?c.value:c,b=f.scannable,g=b.length;g--;){var S=b[g],T=S.rule.symbols[S.dot];if(T.test?T.test(m):T.type?T.type===c.type:T.literal===v){var A=S.nextState({data:m,token:c,isToken:!0,reference:h-1});p.states.push(A)}}if(p.process(),p.states.length===0){var d=new Error(this.reportError(c));throw d.offset=this.current,d.token=c,d}this.options.keepHistory&&(f.lexerState=u.save()),this.current++}return f&&(this.lexerState=u.save()),this.results=this.finish(),this},s.prototype.reportLexerError=function(a){var u,c,d=a.token;return d?(u="input "+JSON.stringify(d.text[0])+" (lexer error)",c=this.lexer.formatError(d,"Syntax error")):(u="input (lexer error)",c=a.message),this.reportErrorCommon(c,u)},s.prototype.reportError=function(a){var u=(a.type?a.type+" token: ":"")+JSON.stringify(a.value!==void 0?a.value:a),c=this.lexer.formatError(a,"Syntax error");return this.reportErrorCommon(c,u)},s.prototype.reportErrorCommon=function(a,u){var c=[];c.push(a);var d=this.table.length-2,f=this.table[d],h=f.states.filter(function(v){var m=v.rule.symbols[v.dot];return m&&typeof m!="string"});if(h.length===0)c.push("Unexpected "+u+`. I did not expect any more input. Here is the state of my parse table:
`),this.displayStateStack(f.states,c);else{c.push("Unexpected "+u+`. Instead, I was expecting to see one of the following:
`);var p=h.map(function(v){return this.buildFirstStateStack(v,[])||[v]},this);p.forEach(function(v){var m=v[0],b=m.rule.symbols[m.dot],g=this.getSymbolDisplay(b);c.push("A "+g+" based on:"),this.displayStateStack(v,c)},this)}return c.push(""),c.join(`
`)},s.prototype.displayStateStack=function(a,u){for(var c,d=0,f=0;f<a.length;f++){var h=a[f],p=h.rule.toString(h.dot);p===c?d++:(d>0&&u.push("    ^ "+d+" more lines identical to this"),d=0,u.push("    "+p)),c=p}},s.prototype.getSymbolDisplay=function(a){return o(a)},s.prototype.buildFirstStateStack=function(a,u){if(u.indexOf(a)!==-1)return null;if(a.wantedBy.length===0)return[a];var c=a.wantedBy[0],d=[a].concat(u),f=this.buildFirstStateStack(c,d);return f===null?null:[a].concat(f)},s.prototype.save=function(){var a=this.table[this.current];return a.lexerState=this.lexerState,a},s.prototype.restore=function(a){var u=a.index;this.current=u,this.table[u]=a,this.table.splice(u+1),this.lexerState=a.lexerState,this.results=this.finish()},s.prototype.rewind=function(a){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[a])},s.prototype.finish=function(){var a=[],u=this.grammar.start,c=this.table[this.table.length-1];return c.states.forEach(function(d){d.rule.name===u&&d.dot===d.rule.symbols.length&&d.reference===0&&d.data!==s.fail&&a.push(d)}),a.map(function(d){return d.data})};function o(a){var u=typeof a;if(u==="string")return a;if(u==="object"){if(a.literal)return JSON.stringify(a.literal);if(a instanceof RegExp)return"character matching "+a;if(a.type)return a.type+" token";if(a.test)return"token matching "+String(a.test);throw new Error("Unknown symbol type: "+a)}}function l(a){var u=typeof a;if(u==="string")return a;if(u==="object"){if(a.literal)return JSON.stringify(a.literal);if(a instanceof RegExp)return a.toString();if(a.type)return"%"+a.type;if(a.test)return"<"+String(a.test)+">";throw new Error("Unknown symbol type: "+a)}}return{Parser:s,Grammar:r,Rule:e}})});var Ti=N(Gn=>{"use strict";Object.defineProperty(Gn,"__esModule",{value:!0});function ht(e){return e[0]}var Ka={Lexer:void 0,ParserRules:[{name:"dqstring$ebnf$1",symbols:[]},{name:"dqstring$ebnf$1",symbols:["dqstring$ebnf$1","dstrchar"],postprocess:e=>e[0].concat([e[1]])},{name:"dqstring",symbols:[{literal:'"'},"dqstring$ebnf$1",{literal:'"'}],postprocess:function(e){return e[1].join("")}},{name:"sqstring$ebnf$1",symbols:[]},{name:"sqstring$ebnf$1",symbols:["sqstring$ebnf$1","sstrchar"],postprocess:e=>e[0].concat([e[1]])},{name:"sqstring",symbols:[{literal:"'"},"sqstring$ebnf$1",{literal:"'"}],postprocess:function(e){return e[1].join("")}},{name:"btstring$ebnf$1",symbols:[]},{name:"btstring$ebnf$1",symbols:["btstring$ebnf$1",/[^`]/],postprocess:e=>e[0].concat([e[1]])},{name:"btstring",symbols:[{literal:"`"},"btstring$ebnf$1",{literal:"`"}],postprocess:function(e){return e[1].join("")}},{name:"dstrchar",symbols:[/[^\\"\n]/],postprocess:ht},{name:"dstrchar",symbols:[{literal:"\\"},"strescape"],postprocess:function(e){return JSON.parse('"'+e.join("")+'"')}},{name:"sstrchar",symbols:[/[^\\'\n]/],postprocess:ht},{name:"sstrchar",symbols:[{literal:"\\"},"strescape"],postprocess:function(e){return JSON.parse('"'+e.join("")+'"')}},{name:"sstrchar$string$1",symbols:[{literal:"\\"},{literal:"'"}],postprocess:e=>e.join("")},{name:"sstrchar",symbols:["sstrchar$string$1"],postprocess:function(e){return"'"}},{name:"strescape",symbols:[/["\\/bfnrt]/],postprocess:ht},{name:"strescape",symbols:[{literal:"u"},/[a-fA-F0-9]/,/[a-fA-F0-9]/,/[a-fA-F0-9]/,/[a-fA-F0-9]/],postprocess:function(e){return e.join("")}},{name:"main",symbols:["cmd","params","_"],postprocess:e=>[e[0],e[1]]},{name:"main",symbols:["cmd","_"],postprocess:e=>[e[0]]},{name:"cmd",symbols:["cmdToken"],postprocess:e=>e.join("").trim()},{name:"params$ebnf$1",symbols:["param"]},{name:"params$ebnf$1",symbols:["params$ebnf$1","param"],postprocess:e=>e[0].concat([e[1]])},{name:"params",symbols:["params$ebnf$1"],postprocess:e=>Object.assign({},e[0].reduce((t,n)=>Object.assign(Object.assign({},t),n),{}))},{name:"param",symbols:["paramName"],postprocess:e=>e[0]!==null?{[e[0]]:null}:{}},{name:"param",symbols:["paramName","__","paramVal"],postprocess:e=>({[e[0]]:e[2]})},{name:"paramName$ebnf$1",symbols:[]},{name:"paramName$ebnf$1",symbols:["paramName$ebnf$1",/[^- ]/],postprocess:e=>e[0].concat([e[1]])},{name:"paramName",symbols:["__","FLAG_START","paramName$ebnf$1"],postprocess:e=>e[2].join("").trim()||null},{name:"paramVal",symbols:["paramValToken"],postprocess:ht},{name:"paramVal",symbols:["dqstring"],postprocess:ht},{name:"FLAG_START",symbols:["_",{literal:"-"}],postprocess:null},{name:"cmdToken$ebnf$1",symbols:[/[^- ]/]},{name:"cmdToken$ebnf$1",symbols:["cmdToken$ebnf$1",/[^- ]/],postprocess:e=>e[0].concat([e[1]])},{name:"cmdToken$ebnf$2",symbols:[]},{name:"cmdToken$ebnf$2$subexpression$1$ebnf$1",symbols:[{literal:" "}]},{name:"cmdToken$ebnf$2$subexpression$1$ebnf$1",symbols:["cmdToken$ebnf$2$subexpression$1$ebnf$1",{literal:" "}],postprocess:e=>e[0].concat([e[1]])},{name:"cmdToken$ebnf$2$subexpression$1$ebnf$2",symbols:[/[^- ]/]},{name:"cmdToken$ebnf$2$subexpression$1$ebnf$2",symbols:["cmdToken$ebnf$2$subexpression$1$ebnf$2",/[^- ]/],postprocess:e=>e[0].concat([e[1]])},{name:"cmdToken$ebnf$2$subexpression$1",symbols:["cmdToken$ebnf$2$subexpression$1$ebnf$1","cmdToken$ebnf$2$subexpression$1$ebnf$2"]},{name:"cmdToken$ebnf$2",symbols:["cmdToken$ebnf$2","cmdToken$ebnf$2$subexpression$1"],postprocess:e=>e[0].concat([e[1]])},{name:"cmdToken",symbols:["cmdToken$ebnf$1","cmdToken$ebnf$2"],postprocess:e=>[e[0].join("")].concat(...e[1].map(t=>[].concat(...t))).join("")},{name:"paramValToken$ebnf$1",symbols:[/[^- "]/]},{name:"paramValToken$ebnf$1",symbols:["paramValToken$ebnf$1",/[^- "]/],postprocess:e=>e[0].concat([e[1]])},{name:"paramValToken",symbols:["paramValToken$ebnf$1"],postprocess:e=>e[0].join("")},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1",/[ ]/],postprocess:e=>e[0].concat([e[1]])},{name:"_",symbols:["_$ebnf$1"],postprocess:()=>null},{name:"__",symbols:[/[ ]/],postprocess:()=>null}],ParserStart:"main"};Gn.default=Ka});var Ii=N(pt=>{"use strict";Object.defineProperty(pt,"__esModule",{value:!0});pt.MatchScore=void 0;var Ya;(function(e){e[e.HISTORY=1]="HISTORY",e[e.EXACT=10]="EXACT",e[e.STARTS=3]="STARTS",e[e.CONTAINS=2]="CONTAINS",e[e.ACRONYM=2]="ACRONYM",e[e.NO=0]="NO"})(Ya=pt.MatchScore||(pt.MatchScore={}))});var Jn=N(Te=>{"use strict";var Ci=Te&&Te.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Te,"__esModule",{value:!0});Te.rank=Te.parseInput=void 0;var Ai=Ci(Oi()),Ga=Yn(),Ja=Ci(Ti()),pe=Ii();function Fi(e){try{let t=new Ai.default.Parser(Ai.default.Grammar.fromCompiled(Ja.default));t.feed(e);let n=t.results[0];if(n.length<1)throw Error(`Could not parse "${e}"`);return n}catch{return null}}Te.parseInput=Fi;function Ha(e,t){let n=Fi(t);if(n===null)return null;let r=(0,Ga.getHistoricCallsForInput)(n),i=ki(n[0].toLowerCase());return e.map(o=>{let l=ki(tu(o,n).toLowerCase()),a=Wa(l,i)||Za(l,i)||Qa(l,i)||eu(l,i)||pe.MatchScore.NO,u=r.find(c=>o.id===c.id);if(u){let c=u.calls*pe.MatchScore.HISTORY;c>a&&(a=c)}return Object.assign(Object.assign({},o),{rank:a})}).filter(o=>o.rank>0).sort((o,l)=>l.rank-o.rank)}Te.rank=Ha;var Wa=(e,t)=>e===t?pe.MatchScore.EXACT:pe.MatchScore.NO,Za=(e,t)=>e.split(" ").map(n=>n.substring(0,1)).join("").indexOf(t)===0?pe.MatchScore.ACRONYM:pe.MatchScore.NO,Qa=(e,t)=>e.indexOf(t)===0?pe.MatchScore.STARTS:pe.MatchScore.NO,eu=(e,t)=>e.includes(t)?pe.MatchScore.CONTAINS:pe.MatchScore.NO,tu=(e,t)=>e.getMatchString?e.getMatchString(t):typeof e.title=="function"?e.title(t):e.title,ki=e=>e.normalize("NFD").replace(/\p{Diacritic}/gu,"")});var $i=N(Wt=>{"use strict";Object.defineProperty(Wt,"__esModule",{value:!0});Wt.selectionMachine=void 0;var je=Kn(),nu=Yn(),Ht=Jn();Wt.selectionMachine=(0,je.createMachine)({id:"result-selection",initial:"closed",context:{input:"",parsedInput:null,commands:[],resultIds:[],selectedId:"",toggleKey:"p",ctrlKey:!1},states:{closed:{on:{OPEN:"open"}},open:{on:{CLOSE:"closed",EXEC:{target:".executing",cond:"isExecutable"},SELECT:{actions:"select",target:".selected"}},initial:"autoSelected",states:{executing:{invoke:{src:"exec"},on:{EXEC_DONE:{target:"#result-selection.closed",actions:"clearInputAndResults"}}},autoSelected:{entry:"selectFirst",on:{STEP:{target:"selected",actions:"step"},NEW_COMMANDS:{actions:"setCommandsAndResults",target:"autoSelected"},INPUT:{actions:"saveInputAndResults",target:"autoSelected"}}},selected:{on:{STEP:{actions:"step"},NEW_COMMANDS:{actions:"setCommandsAndResults",target:"selectionValidation"},INPUT:{actions:"saveInputAndResults",target:"selectionValidation"}}},selectionValidation:{always:[{target:"selected",cond:"selectedExists"},{target:"autoSelected"}]}}}}},{services:{exec:(e,t)=>n=>{let r=t.id||e.selectedId,i=(0,Ht.parseInput)(e.input),s=e.commands.filter(l=>l.id===r);s&&s.length&&s[0].exec(s[0],i),(0,nu.persistExec)(i,s[0].id),n({type:"EXEC_DONE",id:r,input:i})}},actions:{saveInputAndResults:(0,je.assign)({input:(e,t)=>t.input,parsedInput:(e,t)=>(0,Ht.parseInput)(t.input),resultIds:(e,t)=>{if(t.input.length){let n=(0,Ht.rank)(e.commands,t.input);return n!==null?n.map(r=>r.id):e.resultIds}return[]}}),clearInputAndResults:(0,je.assign)({input:()=>"",resultIds:()=>[]}),select:(0,je.assign)({selectedId:(e,t)=>t.id}),selectFirst:(0,je.assign)({selectedId:e=>e.resultIds[0]||""}),setCommandsAndResults:(0,je.assign)({commands:(e,t)=>t.commands,resultIds:(e,t)=>{if(e.input.length){let n=(0,Ht.rank)(t.commands,e.input);return n!==null?n.map(r=>r.id):e.resultIds}return[]}}),step:(0,je.assign)({selectedId:(e,t)=>{if(!e.resultIds.length)return"";let n=e.resultIds.indexOf(e.selectedId);if(t.direction==="DOWN")return n===e.resultIds.length-1?e.resultIds[0]:e.resultIds[n+1];if(t.direction==="UP")return n===0?e.resultIds[e.resultIds.length-1]:e.resultIds[n-1]}})},guards:{selectedExists:e=>e.resultIds.includes(e.selectedId),isExecutable:e=>{if(e.input.length<1||e.resultIds.length<1||e.parsedInput===null||e.parsedInput[0].length<1)return!1;let t=e.commands.filter(r=>r.id===e.selectedId);if(!t.length)return!1;let n=t[0];if(n.requiredArgs){if(e.parsedInput.length<1)return!1;let r=e.parsedInput[1]||{};if(n.requiredArgs.map(s=>r[s]).filter(s=>s==null).length)return!1}return!0}}})});var Mi=N(Ge=>{"use strict";Object.defineProperty(Ge,"__esModule",{value:!0});Ge.setupOpenListener=Ge.setupInteractionListener=void 0;function ru(e,t){let n=i=>{let{key:s}=i;if(s==="Escape"){t.send({type:"CLOSE"});return}},r=i=>{let{key:s}=i;if(s==="Enter"){t.send({type:"EXEC"});return}if(s==="ArrowDown"){i.preventDefault(),t.send({type:"STEP",direction:"DOWN"});return}if(s==="ArrowUp"){i.preventDefault(),t.send({type:"STEP",direction:"UP"});return}};return e.addEventListener("keydown",r),document.addEventListener("keydown",n),()=>{e.removeEventListener("keydown",r),document.removeEventListener("keydown",n)}}Ge.setupInteractionListener=ru;function iu(e){let t=n=>{let{key:r}=n;n.target.tagName!=="INPUT"&&r===e.machine.context.toggleKey&&(!e.machine.context.ctrlKey||n.ctrlKey||n.metaKey)&&(n.preventDefault(),e.send({type:"OPEN"}))};return document.addEventListener("keydown",t),()=>document.removeEventListener("keydown",t)}Ge.setupOpenListener=iu});var Pi=N(ie=>{"use strict";Object.defineProperty(ie,"__esModule",{value:!0});ie.setupOpenListener=ie.setupInteractionListener=ie.parseInput=ie.interpret=ie.selectionMachine=void 0;var su=$i();Object.defineProperty(ie,"selectionMachine",{enumerable:!0,get:function(){return su.selectionMachine}});var ou=Kn();Object.defineProperty(ie,"interpret",{enumerable:!0,get:function(){return ou.interpret}});var au=Jn();Object.defineProperty(ie,"parseInput",{enumerable:!0,get:function(){return au.parseInput}});var Ni=Mi();Object.defineProperty(ie,"setupInteractionListener",{enumerable:!0,get:function(){return Ni.setupInteractionListener}});Object.defineProperty(ie,"setupOpenListener",{enumerable:!0,get:function(){return Ni.setupOpenListener}})});function ke(){}var Et=e=>e;function sn(e){return e()}function Qn(){return Object.create(null)}function te(e){e.forEach(sn)}function et(e){return typeof e=="function"}function Ot(e,t){return e!=e?t==t:e!==t||e&&typeof e=="object"||typeof e=="function"}function nr(e){return Object.keys(e).length===0}function ts(e,...t){if(e==null)return ke;let n=e.subscribe(...t);return n.unsubscribe?()=>n.unsubscribe():n}function rr(e,t,n){e.$$.on_destroy.push(ts(t,n))}function ir(e){return e&&et(e.destroy)?e.destroy:ke}var sr=typeof window<"u",ns=sr?()=>window.performance.now():()=>Date.now(),on=sr?e=>requestAnimationFrame(e):ke;var qe=new Set;function or(e){qe.forEach(t=>{t.c(e)||(qe.delete(t),t.f())}),qe.size!==0&&on(or)}function rs(e){let t;return qe.size===0&&on(or),{promise:new Promise(n=>{qe.add(t={c:e,f:n})}),abort(){qe.delete(t)}}}var ar=!1;function is(){ar=!0}function ss(){ar=!1}function le(e,t){e.appendChild(t)}function Tt(e,t,n){let r=an(e);if(!r.getElementById(t)){let i=oe("style");i.id=t,i.textContent=n,ur(r,i)}}function an(e){if(!e)return document;let t=e.getRootNode?e.getRootNode():e.ownerDocument;return t&&t.host?t:e.ownerDocument}function os(e){let t=oe("style");return ur(an(e),t),t.sheet}function ur(e,t){le(e.head||e,t)}function Ce(e,t,n){e.insertBefore(t,n||null)}function xe(e){e.parentNode.removeChild(e)}function cr(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}function oe(e){return document.createElement(e)}function tt(e){return document.createTextNode(e)}function It(){return tt(" ")}function lr(){return tt("")}function ye(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function At(e){return function(t){return t.preventDefault(),e.call(this,t)}}function fr(e){return function(t){return t.stopPropagation(),e.call(this,t)}}function Y(e,t,n){n==null?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function as(e){return Array.from(e.childNodes)}function un(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function cn(e,t,n){e.classList[n?"add":"remove"](t)}function dr(e,t,{bubbles:n=!1,cancelable:r=!1}={}){let i=document.createEvent("CustomEvent");return i.initCustomEvent(e,n,r,t),i}var St=new Map,wt=0;function us(e){let t=5381,n=e.length;for(;n--;)t=(t<<5)-t^e.charCodeAt(n);return t>>>0}function cs(e,t){let n={stylesheet:os(t),rules:{}};return St.set(e,n),n}function er(e,t,n,r,i,s,o,l=0){let a=16.666/r,u=`{
`;for(let m=0;m<=1;m+=a){let b=t+(n-t)*s(m);u+=m*100+`%{${o(b,1-b)}}
`}let c=u+`100% {${o(n,1-n)}}
}`,d=`__svelte_${us(c)}_${l}`,f=an(e),{stylesheet:h,rules:p}=St.get(f)||cs(f,e);p[d]||(p[d]=!0,h.insertRule(`@keyframes ${d} ${c}`,h.cssRules.length));let v=e.style.animation||"";return e.style.animation=`${v?`${v}, `:""}${d} ${r}ms linear ${i}ms 1 both`,wt+=1,d}function ls(e,t){let n=(e.style.animation||"").split(", "),r=n.filter(t?s=>s.indexOf(t)<0:s=>s.indexOf("__svelte")===-1),i=n.length-r.length;i&&(e.style.animation=r.join(", "),wt-=i,wt||fs())}function fs(){on(()=>{wt||(St.forEach(e=>{let{stylesheet:t}=e,n=t.cssRules.length;for(;n--;)t.deleteRule(n);e.rules={}}),St.clear())})}var Qe;function Ze(e){Qe=e}function hr(){if(!Qe)throw new Error("Function called outside component initialization");return Qe}function ln(e){hr().$$.on_mount.push(e)}function fn(){let e=hr();return(t,n,{cancelable:r=!1}={})=>{let i=e.$$.callbacks[t];if(i){let s=dr(t,n,{cancelable:r});return i.slice().forEach(o=>{o.call(e,s)}),!s.defaultPrevented}return!0}}var We=[];var xt=[],_t=[],tr=[],pr=Promise.resolve(),rn=!1;function vr(){rn||(rn=!0,pr.then(yr))}function kt(){return vr(),pr}function Ae(e){_t.push(e)}var tn=new Set,gt=0;function yr(){let e=Qe;do{for(;gt<We.length;){let t=We[gt];gt++,Ze(t),ds(t.$$)}for(Ze(null),We.length=0,gt=0;xt.length;)xt.pop()();for(let t=0;t<_t.length;t+=1){let n=_t[t];tn.has(n)||(tn.add(n),n())}_t.length=0}while(We.length);for(;tr.length;)tr.pop()();rn=!1,tn.clear(),Ze(e)}function ds(e){if(e.fragment!==null){e.update(),te(e.before_update);let t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Ae)}}var He;function hs(){return He||(He=Promise.resolve(),He.then(()=>{He=null})),He}function nn(e,t,n){e.dispatchEvent(dr(`${t?"intro":"outro"}${n}`))}var bt=new Set,ve;function dn(){ve={r:0,c:[],p:ve}}function hn(){ve.r||te(ve.c),ve=ve.p}function fe(e,t){e&&e.i&&(bt.delete(e),e.i(t))}function Fe(e,t,n,r){if(e&&e.o){if(bt.has(e))return;bt.add(e),ve.c.push(()=>{bt.delete(e),r&&(n&&e.d(1),r())}),e.o(t)}else r&&r()}var ps={duration:0};function nt(e,t,n,r){let i=t(e,n),s=r?0:1,o=null,l=null,a=null;function u(){a&&ls(e,a)}function c(f,h){let p=f.b-s;return h*=Math.abs(p),{a:s,b:f.b,d:p,duration:h,start:f.start,end:f.start+h,group:f.group}}function d(f){let{delay:h=0,duration:p=300,easing:v=Et,tick:m=ke,css:b}=i||ps,g={start:ns()+h,b:f};f||(g.group=ve,ve.r+=1),o||l?l=g:(b&&(u(),a=er(e,s,f,p,h,v,b)),f&&m(0,1),o=c(g,p),Ae(()=>nn(e,f,"start")),rs(S=>{if(l&&S>l.start&&(o=c(l,p),l=null,nn(e,o.b,"start"),b&&(u(),a=er(e,s,o.b,o.duration,0,v,i.css))),o){if(S>=o.end)m(s=o.b,1-s),nn(e,o.b,"end"),l||(o.b?u():--o.group.r||te(o.group.c)),o=null;else if(S>=o.start){let T=S-o.start;s=o.a+o.d*v(T/o.duration),m(s,1-s)}}return!!(o||l)}))}return{run(f){et(i)?hs().then(()=>{i=i(),d(f)}):d(f)},end(){u(),o=l=null}}}var mu=typeof window<"u"?window:typeof globalThis<"u"?globalThis:global;function mr(e){e&&e.c()}function pn(e,t,n,r){let{fragment:i,on_mount:s,on_destroy:o,after_update:l}=e.$$;i&&i.m(t,n),r||Ae(()=>{let a=s.map(sn).filter(et);o?o.push(...a):te(a),e.$$.on_mount=[]}),l.forEach(Ae)}function Ct(e,t){let n=e.$$;n.fragment!==null&&(te(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function vs(e,t){e.$$.dirty[0]===-1&&(We.push(e),vr(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function Ft(e,t,n,r,i,s,o,l=[-1]){let a=Qe;Ze(e);let u=e.$$={fragment:null,ctx:null,props:s,update:ke,not_equal:i,bound:Qn(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(a?a.$$.context:[])),callbacks:Qn(),dirty:l,skip_bound:!1,root:t.target||a.$$.root};o&&o(u.root);let c=!1;if(u.ctx=n?n(e,t.props||{},(d,f,...h)=>{let p=h.length?h[0]:f;return u.ctx&&i(u.ctx[d],u.ctx[d]=p)&&(!u.skip_bound&&u.bound[d]&&u.bound[d](p),c&&vs(e,d)),f}):[],u.update(),c=!0,te(u.before_update),u.fragment=r?r(u.ctx):!1,t.target){if(t.hydrate){is();let d=as(t.target);u.fragment&&u.fragment.l(d),d.forEach(xe)}else u.fragment&&u.fragment.c();t.intro&&fe(e.$$.fragment),pn(e,t.target,t.anchor,t.customElement),ss(),yr()}Ze(a)}var ys;typeof HTMLElement=="function"&&(ys=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){let{on_mount:e}=this.$$;this.$$.on_disconnect=e.map(sn).filter(et);for(let t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(e,t,n){this[e]=n}disconnectedCallback(){te(this.$$.on_disconnect)}$destroy(){Ct(this,1),this.$destroy=ke}$on(e,t){let n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{let r=n.indexOf(t);r!==-1&&n.splice(r,1)}}$set(e){this.$$set&&!nr(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});var Le=class{$destroy(){Ct(this,1),this.$destroy=ke}$on(t,n){let r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(n),()=>{let i=r.indexOf(n);i!==-1&&r.splice(i,1)}}$set(t){this.$$set&&!nr(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}};function gr(e){let t=e-1;return t*t*t+1}function vn(e,{delay:t=0,duration:n=400,easing:r=Et}={}){let i=+getComputedStyle(e).opacity;return{delay:t,duration:n,easing:r,css:s=>`opacity: ${s*i}`}}function yn(e,{delay:t=0,duration:n=400,easing:r=gr}={}){let i=getComputedStyle(e),s=+i.opacity,o=parseFloat(i.height),l=parseFloat(i.paddingTop),a=parseFloat(i.paddingBottom),u=parseFloat(i.marginTop),c=parseFloat(i.marginBottom),d=parseFloat(i.borderTopWidth),f=parseFloat(i.borderBottomWidth);return{delay:t,duration:n,easing:r,css:h=>`overflow: hidden;opacity: ${Math.min(h*20,1)*s};height: ${h*o}px;padding-top: ${h*l}px;padding-bottom: ${h*a}px;margin-top: ${h*u}px;margin-bottom: ${h*c}px;border-top-width: ${h*d}px;border-bottom-width: ${h*f}px;`}}var we=es(Pi());function uu(e){Tt(e,"svelte-19oq2ua",'.wrapper.svelte-19oq2ua.svelte-19oq2ua{background-color:var(--background-color, rgba(36, 36, 36, 1));color:var(--color, rgba(212, 208, 199, 1));display:flex;flex-direction:column;position:relative;box-shadow:0px 5px 5px rgba(0, 0, 0, 0.4);border-radius:4px;transform-origin:top center;transform:scale(var(--scale, 1));width:400px}.command-section.svelte-19oq2ua.svelte-19oq2ua{margin:0}.result.svelte-19oq2ua.svelte-19oq2ua{cursor:pointer;padding:0.6rem;background-color:var(--background-color, rgba(36, 36, 36, 1));font-size:0.9rem}.result.active.svelte-19oq2ua.svelte-19oq2ua{background-color:var(--active-result-background-color, rgba(64, 64, 64, 1));color:var(--active-result-title-color, rgba(255, 255, 255, 1))}.result-description.svelte-19oq2ua.svelte-19oq2ua{display:block;font-size:0.7rem;font-style:italic;color:var(--result-description-color, rgba(212, 208, 199, 1))}.result.active.svelte-19oq2ua .result-description.svelte-19oq2ua{color:var(--active-result-description-color, rgba(255, 255, 255, 1))}.results.svelte-19oq2ua.svelte-19oq2ua{width:400px;margin:0;max-height:350px;overflow-y:auto;border-bottom-left-radius:4px;border-bottom-right-radius:4px;padding-top:0.1rem;background-color:var(--background-color, rgba(36, 36, 36, 1));scrollbar-width:thin;scrollbar-color:var(--color, rgba(212, 208, 199, 1)) var(--background-color, rgba(36, 36, 36, 1))}.results.svelte-19oq2ua.svelte-19oq2ua::-webkit-scrollbar{width:6px}.results.svelte-19oq2ua.svelte-19oq2ua::-webkit-scrollbar-thumb{background-color:var(--color, rgba(212, 208, 199, 1));border-radius:6px}.results.svelte-19oq2ua.svelte-19oq2ua::-webkit-scrollbar-track{background:var(--background-color, rgba(36, 36, 36, 1))}[type="text"].svelte-19oq2ua.svelte-19oq2ua{font-size:1rem;padding:0.5rem;border:0;width:calc(400px - 1rem);margin:4px 0;color:var(--color, rgba(212, 208, 199, 1));background-color:var(--background-color, rgba(36, 36, 36, 1))}[type="text"].svelte-19oq2ua.svelte-19oq2ua:focus{outline:none}')}function ji(e,t,n){let r=e.slice();return r[30]=t[n],r[32]=n,r}function qi(e){let t,n,r,i,s,o,l,a,u,c,d,f=e[2].length&&Li(e);return{c(){t=oe("div"),n=oe("div"),r=oe("input"),o=It(),f&&f.c(),r.value=i=e[4].context.input,Y(r,"type","text"),Y(r,"placeholder",e[1]),Y(r,"class","svelte-19oq2ua"),Y(n,"class","command-section svelte-19oq2ua"),Y(t,"class","wrapper svelte-19oq2ua"),Y(t,"style",l=Object.entries(e[0]).map(Ui).join(";"))},m(h,p){Ce(h,t,p),le(t,n),le(n,r),le(t,o),f&&f.m(t,null),e[16](t),u=!0,c||(d=[ir(s=lu.call(null,r)),ye(r,"input",At(e[6]))],c=!0)},p(h,p){(!u||p[0]&16&&i!==(i=h[4].context.input)&&r.value!==i)&&(r.value=i),(!u||p[0]&2)&&Y(r,"placeholder",h[1]),h[2].length?f?(f.p(h,p),p[0]&4&&fe(f,1)):(f=Li(h),f.c(),fe(f,1),f.m(t,null)):f&&(dn(),Fe(f,1,1,()=>{f=null}),hn()),(!u||p[0]&1&&l!==(l=Object.entries(h[0]).map(Ui).join(";")))&&Y(t,"style",l)},i(h){u||(fe(f),Ae(()=>{a||(a=nt(t,vn,{duration:150},!0)),a.run(1)}),u=!0)},o(h){Fe(f),a||(a=nt(t,vn,{duration:150},!1)),a.run(0),u=!1},d(h){h&&xe(t),f&&f.d(),e[16](null),h&&a&&a.end(),c=!1,te(d)}}}function Li(e){let t,n,r,i=e[2],s=[];for(let o=0;o<i.length;o+=1)s[o]=Di(ji(e,i,o));return{c(){t=oe("div");for(let o=0;o<s.length;o+=1)s[o].c();Y(t,"class","results svelte-19oq2ua")},m(o,l){Ce(o,t,l);for(let a=0;a<s.length;a+=1)s[a].m(t,null);r=!0},p(o,l){if(l[0]&436){i=o[2];let a;for(a=0;a<i.length;a+=1){let u=ji(o,i,a);s[a]?s[a].p(u,l):(s[a]=Di(u),s[a].c(),s[a].m(t,null))}for(;a<s.length;a+=1)s[a].d(1);s.length=i.length}},i(o){r||(Ae(()=>{n||(n=nt(t,yn,{duration:150},!0)),n.run(1)}),r=!0)},o(o){n||(n=nt(t,yn,{duration:150},!1)),n.run(0),r=!1},d(o){o&&xe(t),cr(s,o),o&&n&&n.end()}}}function Di(e){let t,n=e[8](e[30].title)+"",r,i,s,o=e[7](e[30].description)+"",l,a,u,c,d;function f(){return e[13](e[30])}function h(){return e[14](e[30])}function p(){return e[15](e[30])}return{c(){t=oe("div"),r=tt(n),i=It(),s=oe("span"),l=tt(o),a=It(),Y(s,"class","result-description svelte-19oq2ua"),Y(t,"data-testid",u=`test-id-${e[32]}`),Y(t,"class","result svelte-19oq2ua"),cn(t,"active",e[4].context.selectedId===e[30].id)},m(v,m){Ce(v,t,m),le(t,r),le(t,i),le(t,s),le(s,l),le(t,a),c||(d=[ye(t,"mousedown",f),ye(t,"mouseover",h),ye(t,"focus",p)],c=!0)},p(v,m){e=v,m[0]&4&&n!==(n=e[8](e[30].title)+"")&&un(r,n),m[0]&4&&o!==(o=e[7](e[30].description)+"")&&un(l,o),m[0]&20&&cn(t,"active",e[4].context.selectedId===e[30].id)},d(v){v&&xe(t),c=!1,te(d)}}}function cu(e){let t=e[4].matches("open"),n,r,i=t&&qi(e);return{c(){i&&i.c(),n=lr()},m(s,o){i&&i.m(s,o),Ce(s,n,o),r=!0},p(s,o){o[0]&16&&(t=s[4].matches("open")),t?i?(i.p(s,o),o[0]&16&&fe(i,1)):(i=qi(s),i.c(),fe(i,1),i.m(n.parentNode,n)):i&&(dn(),Fe(i,1,1,()=>{i=null}),hn())},i(s){r||(fe(i),r=!0)},o(s){Fe(i),r=!1},d(s){i&&i.d(s),s&&xe(n)}}}function lu(e){e.focus()}function Zt(e,t){return e.filter(r=>r.id===t)[0]}function Ri(e){return{type:"SELECT",id:e}}function fu(e){return{type:"EXEC",id:e}}var Ui=e=>e.join(":");function du(e,t,n){let r;var i=this&&this.__awaiter||function(w,L,R,se){function zi(Je){return Je instanceof R?Je:new R(function(mt){mt(Je)})}return new(R||(R=Promise))(function(Je,mt){function Ki(Ie){try{Qt(se.next(Ie))}catch(en){mt(en)}}function Yi(Ie){try{Qt(se.throw(Ie))}catch(en){mt(en)}}function Qt(Ie){Ie.done?Je(Ie.value):zi(Ie.value).then(Ki,Yi)}Qt((se=se.apply(w,L||[])).next())})};let s=[],o,l=()=>{},a=()=>{},u=fn(),{theme:c={"--active-result-background-color":"","--background-color":"","--result-description-color":"","--active-result-description-color":"","--active-result-title-color":"","--color":"","--scale":""}}=t,{commands:d=[]}=t,{toggleKey:f="p"}=t,{ctrlKey:h=!1}=t,{placeholder:p="Type something"}=t,v=(0,we.interpret)(we.selectionMachine.withContext(Object.assign(Object.assign({},we.selectionMachine.context),{commands:d,toggleKey:f,ctrlKey:h}))).start();rr(e,v,w=>n(4,r=w));let m=()=>{if(r.matches("open")){v.send({type:"CLOSE"});return}v.send("OPEN")};function b(w,L){Object.keys(g).forEach(R=>{w.matches(R)&&g[R](w,L)}),S[L.type]&&S[L.type](w,L)}let g={closed:w=>{C(),l(),u("close"),j(),n(2,s=w.context.resultIds.map(L=>Zt(w.context.commands,L)))}},S={INPUT:w=>{n(2,s=w.context.resultIds.map(L=>Zt(w.context.commands,L)))},NEW_COMMANDS:w=>{n(2,s=w.context.resultIds.map(L=>Zt(w.context.commands,L)))},OPEN:w=>{k(),O(),a(),u("open"),n(2,s=d.slice(0,3).map(({id:L})=>Zt(w.context.commands,L)))},EXEC_DONE:(w,L)=>A(L.id,L.input),STEP:()=>i(void 0,void 0,void 0,function*(){yield kt();let w=document.getElementsByClassName("active");if(!w||!w.length)return;let L=w[0];L&&L.scrollIntoViewIfNeeded&&L.scrollIntoViewIfNeeded()})};ln(()=>{v.onTransition(b)});function T(w){v.send({type:"INPUT",input:w.currentTarget.value})}function A(w,L){u("execute",{id:w,input:L})}function j(){return i(this,void 0,void 0,function*(){if(v===null){setTimeout(j,50);return}a=(0,we.setupOpenListener)(v)})}function k(){return i(this,void 0,void 0,function*(){if(yield kt(),!o||v===null){setTimeout(k,50);return}l&&l(),l=(0,we.setupInteractionListener)(o,v)})}function I(w){let{target:L}=w;o&&L!==o&&!o.contains(L)&&v.send({type:"CLOSE"})}function O(){document.body.addEventListener("click",I)}function C(){document.body.removeEventListener("click",I)}function Q(w){return typeof w=="string"?w:w(r.context.parsedInput)}function K(w){return typeof w=="string"?w:w(r.context.parsedInput)}let ee=w=>v.send(fu(w.id)),H=w=>v.send(Ri(w.id)),yt=w=>v.send(Ri(w.id));function W(w){xt[w?"unshift":"push"](()=>{o=w,n(3,o)})}return e.$$set=w=>{"theme"in w&&n(0,c=w.theme),"commands"in w&&n(9,d=w.commands),"toggleKey"in w&&n(10,f=w.toggleKey),"ctrlKey"in w&&n(11,h=w.ctrlKey),"placeholder"in w&&n(1,p=w.placeholder)},e.$$.update=()=>{if(e.$$.dirty[0]&512){e:d.length&&v.send({type:"NEW_COMMANDS",commands:d})}},[c,p,s,o,r,v,T,Q,K,d,f,h,m,ee,H,yt,W]}var Hn=class extends Le{constructor(t){super(),Ft(this,t,du,cu,Ot,{theme:0,commands:9,toggleKey:10,ctrlKey:11,placeholder:1,toggle:12},uu,[-1,-1])}get toggle(){return this.$$.ctx[12]}},Bi=Hn;var Vi=Bi;function hu(e){Tt(e,"svelte-1bc5c17","nav.svelte-1bc5c17{position:fixed;top:30%;left:50%;transform:translateX(-50%);z-index:9999}nav.svelte-1bc5c17 .command-section input:focus{box-shadow:unset}")}function pu(e){let t,n,r,i,s;return n=new Vi({props:{commands:e[1],placeholder:e[0],theme:e[6],toggleKey:e[2]}}),{c(){t=oe("nav"),mr(n.$$.fragment),Y(t,"class","draggable svelte-1bc5c17")},m(o,l){Ce(o,t,l),pn(n,t,null),r=!0,i||(s=[ye(window,"mousemove",e[8]),ye(window,"mouseup",e[9]),ye(t,"mousedown",fr(At(e[10])))],i=!0)},p(o,[l]){let a={};l&2&&(a.commands=o[1]),l&1&&(a.placeholder=o[0]),l&64&&(a.theme=o[6]),l&4&&(a.toggleKey=o[2]),n.$set(a)},i(o){r||(fe(n.$$.fragment,o),r=!0)},o(o){Fe(n.$$.fragment,o),r=!1},d(o){o&&xe(t),Ct(n),i=!1,te(s)}}}function vu(e,t,n){let r,{placeholder:i}=t,{currentTheme:s}=t,{commands:o}=t,{toggleKey:l="p"}=t,a=!1,u=0,c=0,d=p=>{a&&(n(4,u+=p.movementX),n(5,c+=p.movementY))},f=()=>{n(3,a=!1)},h=()=>{n(3,a=!0)};return e.$$set=p=>{"placeholder"in p&&n(0,i=p.placeholder),"currentTheme"in p&&n(7,s=p.currentTheme),"commands"in p&&n(1,o=p.commands),"toggleKey"in p&&n(2,l=p.toggleKey)},e.$$.update=()=>{if(e.$$.dirty&128){e:n(6,r={"--color":s.color,"--result-description-color":s.descriptionColor,"--background-color":s.backgroundColor,"--active-result-background-color":s.activeResultBackgroundColor,"--active-result-description-color":s.activeResultDescriptionColor,"--active-result-title-color":s.activeResultTitleColor,"--scale":s.scale})}if(e.$$.dirty&1){e:console.log(i)}},[i,o,l,a,u,c,r,s,d,f,h]}var Wn=class extends Le{constructor(t){super(),Ft(this,t,vu,pu,Ot,{placeholder:0,currentTheme:7,commands:1,toggleKey:2},hu)}},Xi=Wn;var vt=e=>game.i18n.localize(e);Hooks.once("init",()=>{CONFIG.fcp={commands:[{id:"open-settings",title:"Open Settings",description:"Opens the settings menu",exec:()=>game.settings.sheet.render(!0)},{id:"open-macros",title:"Open Macros",description:"Opens the macros menu",exec:()=>ui.macros.renderPopout(!0)}],themes:{default:{name:"Default",color:"rgba(212, 208, 199, 1.00)",descriptionColor:"rgba(212, 208, 199, 1.00)",backgroundColor:"rgba(36, 36, 36, 1.00)",activeResultBackgroundColor:"rgba(64, 64, 64, 1.00)",activeResultDescriptionColor:"rgba(255, 255, 255, 1.00)",activeResultTitleColor:"rgba(255, 255, 255, 1.00)",scale:"1.3"}},instance:null}});Hooks.once("setup",()=>{let e=Object.entries(CONFIG.fcp.themes).reduce((t,[n,r])=>(t[n]=r.name,t),{});game.settings.register("fcp","theme",{name:vt("FCP.Settings.Theme.Name"),hint:vt("FCP.Settings.Theme.Description"),scope:"client",config:!0,type:String,choices:e,default:"Default"}),game.settings.register("fcp","toggleKey",{name:vt("FCP.Settings.ToggleKey.Name"),hint:vt("FCP.Settings.ToggleKey.Description"),scope:"client",config:!0,type:String,default:"p"})});Hooks.once("ready",()=>{let e=CONFIG?.fcp.commands,t=game.settings.get("fcp","toggleKey"),n=vt("FCP.CommandPalette.Placeholder"),r=game.settings.get("fcp","theme"),i=CONFIG.fcp.themes[r];CONFIG.fcp.instance=new Xi({target:document.body,props:{commands:e,currentTheme:i,toggleKey:t,placeholder:n}})});})();
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3hzdGF0ZUA0LjMzLjEvbm9kZV9tb2R1bGVzL3hzdGF0ZS9saWIvX3ZpcnR1YWwvX3RzbGliLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL3R5cGVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL2FjdGlvblR5cGVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL2NvbnN0YW50cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi9lbnZpcm9ubWVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi91dGlscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi9hY3Rpb25zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL3NlcnZpY2VTY29wZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi9BY3Rvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi9zdGF0ZVV0aWxzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL1N0YXRlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL3NjaGVkdWxlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi9yZWdpc3RyeS5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi9kZXZUb29scy5qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0veHN0YXRlQDQuMzMuMS9ub2RlX21vZHVsZXMveHN0YXRlL2xpYi9iZWhhdmlvcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3hzdGF0ZUA0LjMzLjEvbm9kZV9tb2R1bGVzL3hzdGF0ZS9saWIvaW50ZXJwcmV0ZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3hzdGF0ZUA0LjMzLjEvbm9kZV9tb2R1bGVzL3hzdGF0ZS9saWIvaW52b2tlVXRpbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3hzdGF0ZUA0LjMzLjEvbm9kZV9tb2R1bGVzL3hzdGF0ZS9saWIvU3RhdGVOb2RlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL01hY2hpbmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3hzdGF0ZUA0LjMzLjEvbm9kZV9tb2R1bGVzL3hzdGF0ZS9saWIvbWFwU3RhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3hzdGF0ZUA0LjMzLjEvbm9kZV9tb2R1bGVzL3hzdGF0ZS9saWIvbWF0Y2guanMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3hzdGF0ZUA0LjMzLjEvbm9kZV9tb2R1bGVzL3hzdGF0ZS9saWIvc2NoZW1hLmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS94c3RhdGVANC4zMy4xL25vZGVfbW9kdWxlcy94c3RhdGUvbGliL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWN0dXMrY29yZUAyLjMuMi9ub2RlX21vZHVsZXMvQGFjdHVzL2NvcmUvc3JjL2V4ZWMtZ3JhcGgudHMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25lYXJsZXlAMi4yMC4xL25vZGVfbW9kdWxlcy9uZWFybGV5L2xpYi9uZWFybGV5LmpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWN0dXMrY29yZUAyLjMuMi9ub2RlX21vZHVsZXMvQGFjdHVzL2NvcmUvc3JjL2dyYW1tYXIvaW5wdXQtcGFyc2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWN0dXMrY29yZUAyLjMuMi9ub2RlX21vZHVsZXMvQGFjdHVzL2NvcmUvc3JjL3R5cGVzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWN0dXMrY29yZUAyLjMuMi9ub2RlX21vZHVsZXMvQGFjdHVzL2NvcmUvc3JjL3JhbmsudHMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhY3R1cytjb3JlQDIuMy4yL25vZGVfbW9kdWxlcy9AYWN0dXMvY29yZS9zcmMvc2VsZWN0aW9uLW1hY2hpbmUudHMiLCAiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhY3R1cytjb3JlQDIuMy4yL25vZGVfbW9kdWxlcy9AYWN0dXMvY29yZS9zcmMvaW50ZXJhY3Rpb24tbGlzdGVuZXJzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWN0dXMrY29yZUAyLjMuMi9ub2RlX21vZHVsZXMvQGFjdHVzL2NvcmUvc3JjL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVAMy40OS4wL25vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXgubWpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVAMy40OS4wL25vZGVfbW9kdWxlcy9zdmVsdGUvZWFzaW5nL2luZGV4Lm1qcyIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDMuNDkuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3RyYW5zaXRpb24vaW5kZXgubWpzIiwgIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWN0dXMrc3ZlbHRlQDIuMy4yX3J2aWRtNmxoMmkyanRmcWRobXJodXE3bGptL25vZGVfbW9kdWxlcy9AYWN0dXMvc3ZlbHRlL2Rpc3QvQ29tcG9uZW50LnN2ZWx0ZSIsICIuLi9ub2RlX21vZHVsZXMvLnBucG0vQGFjdHVzK3N2ZWx0ZUAyLjMuMl9ydmlkbTZsaDJpMmp0ZnFkaG1yaHVxN2xqbS9ub2RlX21vZHVsZXMvQGFjdHVzL3N2ZWx0ZS9zcmMvaW5kZXgudHMiLCAiLi4vc3JjL1BhbGV0dGUuc3ZlbHRlIiwgIi4uL3NyYy9pbmRleC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZXhwb3J0cy5fX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZXhwb3J0cy5fX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZXhwb3J0cy5fX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxuXG5leHBvcnRzLl9fcmVhZCA9IF9fcmVhZDtcbmV4cG9ydHMuX19yZXN0ID0gX19yZXN0O1xuZXhwb3J0cy5fX3NwcmVhZEFycmF5ID0gX19zcHJlYWRBcnJheTtcbmV4cG9ydHMuX192YWx1ZXMgPSBfX3ZhbHVlcztcbiIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmV4cG9ydHMuQWN0aW9uVHlwZXMgPSB2b2lkIDA7XG5cbihmdW5jdGlvbiAoQWN0aW9uVHlwZXMpIHtcbiAgQWN0aW9uVHlwZXNbXCJTdGFydFwiXSA9IFwieHN0YXRlLnN0YXJ0XCI7XG4gIEFjdGlvblR5cGVzW1wiU3RvcFwiXSA9IFwieHN0YXRlLnN0b3BcIjtcbiAgQWN0aW9uVHlwZXNbXCJSYWlzZVwiXSA9IFwieHN0YXRlLnJhaXNlXCI7XG4gIEFjdGlvblR5cGVzW1wiU2VuZFwiXSA9IFwieHN0YXRlLnNlbmRcIjtcbiAgQWN0aW9uVHlwZXNbXCJDYW5jZWxcIl0gPSBcInhzdGF0ZS5jYW5jZWxcIjtcbiAgQWN0aW9uVHlwZXNbXCJOdWxsRXZlbnRcIl0gPSBcIlwiO1xuICBBY3Rpb25UeXBlc1tcIkFzc2lnblwiXSA9IFwieHN0YXRlLmFzc2lnblwiO1xuICBBY3Rpb25UeXBlc1tcIkFmdGVyXCJdID0gXCJ4c3RhdGUuYWZ0ZXJcIjtcbiAgQWN0aW9uVHlwZXNbXCJEb25lU3RhdGVcIl0gPSBcImRvbmUuc3RhdGVcIjtcbiAgQWN0aW9uVHlwZXNbXCJEb25lSW52b2tlXCJdID0gXCJkb25lLmludm9rZVwiO1xuICBBY3Rpb25UeXBlc1tcIkxvZ1wiXSA9IFwieHN0YXRlLmxvZ1wiO1xuICBBY3Rpb25UeXBlc1tcIkluaXRcIl0gPSBcInhzdGF0ZS5pbml0XCI7XG4gIEFjdGlvblR5cGVzW1wiSW52b2tlXCJdID0gXCJ4c3RhdGUuaW52b2tlXCI7XG4gIEFjdGlvblR5cGVzW1wiRXJyb3JFeGVjdXRpb25cIl0gPSBcImVycm9yLmV4ZWN1dGlvblwiO1xuICBBY3Rpb25UeXBlc1tcIkVycm9yQ29tbXVuaWNhdGlvblwiXSA9IFwiZXJyb3IuY29tbXVuaWNhdGlvblwiO1xuICBBY3Rpb25UeXBlc1tcIkVycm9yUGxhdGZvcm1cIl0gPSBcImVycm9yLnBsYXRmb3JtXCI7XG4gIEFjdGlvblR5cGVzW1wiRXJyb3JDdXN0b21cIl0gPSBcInhzdGF0ZS5lcnJvclwiO1xuICBBY3Rpb25UeXBlc1tcIlVwZGF0ZVwiXSA9IFwieHN0YXRlLnVwZGF0ZVwiO1xuICBBY3Rpb25UeXBlc1tcIlB1cmVcIl0gPSBcInhzdGF0ZS5wdXJlXCI7XG4gIEFjdGlvblR5cGVzW1wiQ2hvb3NlXCJdID0gXCJ4c3RhdGUuY2hvb3NlXCI7XG59KShleHBvcnRzLkFjdGlvblR5cGVzIHx8IChleHBvcnRzLkFjdGlvblR5cGVzID0ge30pKTtcblxuZXhwb3J0cy5TcGVjaWFsVGFyZ2V0cyA9IHZvaWQgMDtcblxuKGZ1bmN0aW9uIChTcGVjaWFsVGFyZ2V0cykge1xuICBTcGVjaWFsVGFyZ2V0c1tcIlBhcmVudFwiXSA9IFwiI19wYXJlbnRcIjtcbiAgU3BlY2lhbFRhcmdldHNbXCJJbnRlcm5hbFwiXSA9IFwiI19pbnRlcm5hbFwiO1xufSkoZXhwb3J0cy5TcGVjaWFsVGFyZ2V0cyB8fCAoZXhwb3J0cy5TcGVjaWFsVGFyZ2V0cyA9IHt9KSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzLmpzJyk7XG5cbnZhciBzdGFydCA9IHR5cGVzLkFjdGlvblR5cGVzLlN0YXJ0O1xudmFyIHN0b3AgPSB0eXBlcy5BY3Rpb25UeXBlcy5TdG9wO1xudmFyIHJhaXNlID0gdHlwZXMuQWN0aW9uVHlwZXMuUmFpc2U7XG52YXIgc2VuZCA9IHR5cGVzLkFjdGlvblR5cGVzLlNlbmQ7XG52YXIgY2FuY2VsID0gdHlwZXMuQWN0aW9uVHlwZXMuQ2FuY2VsO1xudmFyIG51bGxFdmVudCA9IHR5cGVzLkFjdGlvblR5cGVzLk51bGxFdmVudDtcbnZhciBhc3NpZ24gPSB0eXBlcy5BY3Rpb25UeXBlcy5Bc3NpZ247XG52YXIgYWZ0ZXIgPSB0eXBlcy5BY3Rpb25UeXBlcy5BZnRlcjtcbnZhciBkb25lU3RhdGUgPSB0eXBlcy5BY3Rpb25UeXBlcy5Eb25lU3RhdGU7XG52YXIgbG9nID0gdHlwZXMuQWN0aW9uVHlwZXMuTG9nO1xudmFyIGluaXQgPSB0eXBlcy5BY3Rpb25UeXBlcy5Jbml0O1xudmFyIGludm9rZSA9IHR5cGVzLkFjdGlvblR5cGVzLkludm9rZTtcbnZhciBlcnJvckV4ZWN1dGlvbiA9IHR5cGVzLkFjdGlvblR5cGVzLkVycm9yRXhlY3V0aW9uO1xudmFyIGVycm9yUGxhdGZvcm0gPSB0eXBlcy5BY3Rpb25UeXBlcy5FcnJvclBsYXRmb3JtO1xudmFyIGVycm9yID0gdHlwZXMuQWN0aW9uVHlwZXMuRXJyb3JDdXN0b207XG52YXIgdXBkYXRlID0gdHlwZXMuQWN0aW9uVHlwZXMuVXBkYXRlO1xudmFyIGNob29zZSA9IHR5cGVzLkFjdGlvblR5cGVzLkNob29zZTtcbnZhciBwdXJlID0gdHlwZXMuQWN0aW9uVHlwZXMuUHVyZTtcblxuZXhwb3J0cy5hZnRlciA9IGFmdGVyO1xuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5leHBvcnRzLmNhbmNlbCA9IGNhbmNlbDtcbmV4cG9ydHMuY2hvb3NlID0gY2hvb3NlO1xuZXhwb3J0cy5kb25lU3RhdGUgPSBkb25lU3RhdGU7XG5leHBvcnRzLmVycm9yID0gZXJyb3I7XG5leHBvcnRzLmVycm9yRXhlY3V0aW9uID0gZXJyb3JFeGVjdXRpb247XG5leHBvcnRzLmVycm9yUGxhdGZvcm0gPSBlcnJvclBsYXRmb3JtO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuaW52b2tlID0gaW52b2tlO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLm51bGxFdmVudCA9IG51bGxFdmVudDtcbmV4cG9ydHMucHVyZSA9IHB1cmU7XG5leHBvcnRzLnJhaXNlID0gcmFpc2U7XG5leHBvcnRzLnNlbmQgPSBzZW5kO1xuZXhwb3J0cy5zdGFydCA9IHN0YXJ0O1xuZXhwb3J0cy5zdG9wID0gc3RvcDtcbmV4cG9ydHMudXBkYXRlID0gdXBkYXRlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIFNUQVRFX0RFTElNSVRFUiA9ICcuJztcbnZhciBFTVBUWV9BQ1RJVklUWV9NQVAgPSB7fTtcbnZhciBERUZBVUxUX0dVQVJEX1RZUEUgPSAneHN0YXRlLmd1YXJkJztcbnZhciBUQVJHRVRMRVNTX0tFWSA9ICcnO1xuXG5leHBvcnRzLkRFRkFVTFRfR1VBUkRfVFlQRSA9IERFRkFVTFRfR1VBUkRfVFlQRTtcbmV4cG9ydHMuRU1QVFlfQUNUSVZJVFlfTUFQID0gRU1QVFlfQUNUSVZJVFlfTUFQO1xuZXhwb3J0cy5TVEFURV9ERUxJTUlURVIgPSBTVEFURV9ERUxJTUlURVI7XG5leHBvcnRzLlRBUkdFVExFU1NfS0VZID0gVEFSR0VUTEVTU19LRVk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5cbmV4cG9ydHMuSVNfUFJPRFVDVElPTiA9IElTX1BST0RVQ1RJT047XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgX3RzbGliID0gcmVxdWlyZSgnLi9fdmlydHVhbC9fdHNsaWIuanMnKTtcbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xudmFyIGVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9lbnZpcm9ubWVudC5qcycpO1xuXG52YXIgX2E7XG5mdW5jdGlvbiBrZXlzKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSk7XG59XG5mdW5jdGlvbiBtYXRjaGVzU3RhdGUocGFyZW50U3RhdGVJZCwgY2hpbGRTdGF0ZUlkLCBkZWxpbWl0ZXIpIHtcbiAgaWYgKGRlbGltaXRlciA9PT0gdm9pZCAwKSB7XG4gICAgZGVsaW1pdGVyID0gY29uc3RhbnRzLlNUQVRFX0RFTElNSVRFUjtcbiAgfVxuXG4gIHZhciBwYXJlbnRTdGF0ZVZhbHVlID0gdG9TdGF0ZVZhbHVlKHBhcmVudFN0YXRlSWQsIGRlbGltaXRlcik7XG4gIHZhciBjaGlsZFN0YXRlVmFsdWUgPSB0b1N0YXRlVmFsdWUoY2hpbGRTdGF0ZUlkLCBkZWxpbWl0ZXIpO1xuXG4gIGlmIChpc1N0cmluZyhjaGlsZFN0YXRlVmFsdWUpKSB7XG4gICAgaWYgKGlzU3RyaW5nKHBhcmVudFN0YXRlVmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2hpbGRTdGF0ZVZhbHVlID09PSBwYXJlbnRTdGF0ZVZhbHVlO1xuICAgIH0gLy8gUGFyZW50IG1vcmUgc3BlY2lmaWMgdGhhbiBjaGlsZFxuXG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNTdHJpbmcocGFyZW50U3RhdGVWYWx1ZSkpIHtcbiAgICByZXR1cm4gcGFyZW50U3RhdGVWYWx1ZSBpbiBjaGlsZFN0YXRlVmFsdWU7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmtleXMocGFyZW50U3RhdGVWYWx1ZSkuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghKGtleSBpbiBjaGlsZFN0YXRlVmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoZXNTdGF0ZShwYXJlbnRTdGF0ZVZhbHVlW2tleV0sIGNoaWxkU3RhdGVWYWx1ZVtrZXldKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRFdmVudFR5cGUoZXZlbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXNTdHJpbmcoZXZlbnQpIHx8IHR5cGVvZiBldmVudCA9PT0gJ251bWJlcicgPyBcIlwiLmNvbmNhdChldmVudCkgOiBldmVudC50eXBlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudHMgbXVzdCBiZSBzdHJpbmdzIG9yIG9iamVjdHMgd2l0aCBhIHN0cmluZyBldmVudC50eXBlIHByb3BlcnR5LicpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRBY3Rpb25UeXBlKGFjdGlvbikge1xuICB0cnkge1xuICAgIHJldHVybiBpc1N0cmluZyhhY3Rpb24pIHx8IHR5cGVvZiBhY3Rpb24gPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQoYWN0aW9uKSA6IGlzRnVuY3Rpb24oYWN0aW9uKSA/IGFjdGlvbi5uYW1lIDogYWN0aW9uLnR5cGU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBzdHJpbmdzIG9yIG9iamVjdHMgd2l0aCBhIHN0cmluZyBhY3Rpb24udHlwZSBwcm9wZXJ0eS4nKTtcbiAgfVxufVxuZnVuY3Rpb24gdG9TdGF0ZVBhdGgoc3RhdGVJZCwgZGVsaW1pdGVyKSB7XG4gIHRyeSB7XG4gICAgaWYgKGlzQXJyYXkoc3RhdGVJZCkpIHtcbiAgICAgIHJldHVybiBzdGF0ZUlkO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZUlkLnRvU3RyaW5nKCkuc3BsaXQoZGVsaW1pdGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIidcIi5jb25jYXQoc3RhdGVJZCwgXCInIGlzIG5vdCBhIHZhbGlkIHN0YXRlIHBhdGguXCIpKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTdGF0ZUxpa2Uoc3RhdGUpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gJ29iamVjdCcgJiYgJ3ZhbHVlJyBpbiBzdGF0ZSAmJiAnY29udGV4dCcgaW4gc3RhdGUgJiYgJ2V2ZW50JyBpbiBzdGF0ZSAmJiAnX2V2ZW50JyBpbiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIHRvU3RhdGVWYWx1ZShzdGF0ZVZhbHVlLCBkZWxpbWl0ZXIpIHtcbiAgaWYgKGlzU3RhdGVMaWtlKHN0YXRlVmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0YXRlVmFsdWUudmFsdWU7XG4gIH1cblxuICBpZiAoaXNBcnJheShzdGF0ZVZhbHVlKSkge1xuICAgIHJldHVybiBwYXRoVG9TdGF0ZVZhbHVlKHN0YXRlVmFsdWUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdGF0ZVZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdGF0ZVZhbHVlO1xuICB9XG5cbiAgdmFyIHN0YXRlUGF0aCA9IHRvU3RhdGVQYXRoKHN0YXRlVmFsdWUsIGRlbGltaXRlcik7XG4gIHJldHVybiBwYXRoVG9TdGF0ZVZhbHVlKHN0YXRlUGF0aCk7XG59XG5mdW5jdGlvbiBwYXRoVG9TdGF0ZVZhbHVlKHN0YXRlUGF0aCkge1xuICBpZiAoc3RhdGVQYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBzdGF0ZVBhdGhbMF07XG4gIH1cblxuICB2YXIgdmFsdWUgPSB7fTtcbiAgdmFyIG1hcmtlciA9IHZhbHVlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVQYXRoLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGlmIChpID09PSBzdGF0ZVBhdGgubGVuZ3RoIC0gMikge1xuICAgICAgbWFya2VyW3N0YXRlUGF0aFtpXV0gPSBzdGF0ZVBhdGhbaSArIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrZXJbc3RhdGVQYXRoW2ldXSA9IHt9O1xuICAgICAgbWFya2VyID0gbWFya2VyW3N0YXRlUGF0aFtpXV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gbWFwVmFsdWVzKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgdmFyIGNvbGxlY3Rpb25LZXlzID0gT2JqZWN0LmtleXMoY29sbGVjdGlvbik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBjb2xsZWN0aW9uS2V5c1tpXTtcbiAgICByZXN1bHRba2V5XSA9IGl0ZXJhdGVlKGNvbGxlY3Rpb25ba2V5XSwga2V5LCBjb2xsZWN0aW9uLCBpKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtYXBGaWx0ZXJWYWx1ZXMoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIHByZWRpY2F0ZSkge1xuICB2YXIgZV8xLCBfYTtcblxuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfYiA9IF90c2xpYi5fX3ZhbHVlcyhPYmplY3Qua2V5cyhjb2xsZWN0aW9uKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgIHZhciBrZXkgPSBfYy52YWx1ZTtcbiAgICAgIHZhciBpdGVtID0gY29sbGVjdGlvbltrZXldO1xuXG4gICAgICBpZiAoIXByZWRpY2F0ZShpdGVtKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W2tleV0gPSBpdGVyYXRlZShpdGVtLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgIH1cbiAgfSBjYXRjaCAoZV8xXzEpIHtcbiAgICBlXzEgPSB7XG4gICAgICBlcnJvcjogZV8xXzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIHZhbHVlIGF0IHRoZSBnaXZlbiBwYXRoLlxyXG4gKiBAcGFyYW0gcHJvcHMgVGhlIGRlZXAgcGF0aCB0byB0aGUgcHJvcCBvZiB0aGUgZGVzaXJlZCB2YWx1ZVxyXG4gKi9cblxudmFyIHBhdGggPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIgZV8yLCBfYTtcblxuICAgIHZhciByZXN1bHQgPSBvYmplY3Q7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgcHJvcHNfMSA9IF90c2xpYi5fX3ZhbHVlcyhwcm9wcyksIHByb3BzXzFfMSA9IHByb3BzXzEubmV4dCgpOyAhcHJvcHNfMV8xLmRvbmU7IHByb3BzXzFfMSA9IHByb3BzXzEubmV4dCgpKSB7XG4gICAgICAgIHZhciBwcm9wID0gcHJvcHNfMV8xLnZhbHVlO1xuICAgICAgICByZXN1bHQgPSByZXN1bHRbcHJvcF07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV8yXzEpIHtcbiAgICAgIGVfMiA9IHtcbiAgICAgICAgZXJyb3I6IGVfMl8xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAocHJvcHNfMV8xICYmICFwcm9wc18xXzEuZG9uZSAmJiAoX2EgPSBwcm9wc18xLnJldHVybikpIF9hLmNhbGwocHJvcHNfMSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4vKipcclxuICogUmV0cmlldmVzIGEgdmFsdWUgYXQgdGhlIGdpdmVuIHBhdGggdmlhIHRoZSBuZXN0ZWQgYWNjZXNzb3IgcHJvcC5cclxuICogQHBhcmFtIHByb3BzIFRoZSBkZWVwIHBhdGggdG8gdGhlIHByb3Agb2YgdGhlIGRlc2lyZWQgdmFsdWVcclxuICovXG5cbmZ1bmN0aW9uIG5lc3RlZFBhdGgocHJvcHMsIGFjY2Vzc29yUHJvcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBlXzMsIF9hO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9iamVjdDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBwcm9wc18yID0gX3RzbGliLl9fdmFsdWVzKHByb3BzKSwgcHJvcHNfMl8xID0gcHJvcHNfMi5uZXh0KCk7ICFwcm9wc18yXzEuZG9uZTsgcHJvcHNfMl8xID0gcHJvcHNfMi5uZXh0KCkpIHtcbiAgICAgICAgdmFyIHByb3AgPSBwcm9wc18yXzEudmFsdWU7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdFthY2Nlc3NvclByb3BdW3Byb3BdO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfM18xKSB7XG4gICAgICBlXzMgPSB7XG4gICAgICAgIGVycm9yOiBlXzNfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHByb3BzXzJfMSAmJiAhcHJvcHNfMl8xLmRvbmUgJiYgKF9hID0gcHJvcHNfMi5yZXR1cm4pKSBfYS5jYWxsKHByb3BzXzIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5mdW5jdGlvbiB0b1N0YXRlUGF0aHMoc3RhdGVWYWx1ZSkge1xuICBpZiAoIXN0YXRlVmFsdWUpIHtcbiAgICByZXR1cm4gW1tdXTtcbiAgfVxuXG4gIGlmIChpc1N0cmluZyhzdGF0ZVZhbHVlKSkge1xuICAgIHJldHVybiBbW3N0YXRlVmFsdWVdXTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBmbGF0dGVuKE9iamVjdC5rZXlzKHN0YXRlVmFsdWUpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN1YlN0YXRlVmFsdWUgPSBzdGF0ZVZhbHVlW2tleV07XG5cbiAgICBpZiAodHlwZW9mIHN1YlN0YXRlVmFsdWUgIT09ICdzdHJpbmcnICYmICghc3ViU3RhdGVWYWx1ZSB8fCAhT2JqZWN0LmtleXMoc3ViU3RhdGVWYWx1ZSkubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIFtba2V5XV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvU3RhdGVQYXRocyhzdGF0ZVZhbHVlW2tleV0pLm1hcChmdW5jdGlvbiAoc3ViUGF0aCkge1xuICAgICAgcmV0dXJuIFtrZXldLmNvbmNhdChzdWJQYXRoKTtcbiAgICB9KTtcbiAgfSkpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGF0aHNUb1N0YXRlVmFsdWUocGF0aHMpIHtcbiAgdmFyIGVfNCwgX2E7XG5cbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGlmIChwYXRocyAmJiBwYXRocy5sZW5ndGggPT09IDEgJiYgcGF0aHNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHBhdGhzWzBdWzBdO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBwYXRoc18xID0gX3RzbGliLl9fdmFsdWVzKHBhdGhzKSwgcGF0aHNfMV8xID0gcGF0aHNfMS5uZXh0KCk7ICFwYXRoc18xXzEuZG9uZTsgcGF0aHNfMV8xID0gcGF0aHNfMS5uZXh0KCkpIHtcbiAgICAgIHZhciBjdXJyZW50UGF0aCA9IHBhdGhzXzFfMS52YWx1ZTtcbiAgICAgIHZhciBtYXJrZXIgPSByZXN1bHQ7IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItZm9yLW9mXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN1YlBhdGggPSBjdXJyZW50UGF0aFtpXTtcblxuICAgICAgICBpZiAoaSA9PT0gY3VycmVudFBhdGgubGVuZ3RoIC0gMikge1xuICAgICAgICAgIG1hcmtlcltzdWJQYXRoXSA9IGN1cnJlbnRQYXRoW2kgKyAxXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlcltzdWJQYXRoXSA9IG1hcmtlcltzdWJQYXRoXSB8fCB7fTtcbiAgICAgICAgbWFya2VyID0gbWFya2VyW3N1YlBhdGhdO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZV80XzEpIHtcbiAgICBlXzQgPSB7XG4gICAgICBlcnJvcjogZV80XzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAocGF0aHNfMV8xICYmICFwYXRoc18xXzEuZG9uZSAmJiAoX2EgPSBwYXRoc18xLnJldHVybikpIF9hLmNhbGwocGF0aHNfMSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICB2YXIgX2E7XG5cbiAgcmV0dXJuIChfYSA9IFtdKS5jb25jYXQuYXBwbHkoX2EsIF90c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBfdHNsaWIuX19yZWFkKGFycmF5KSwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHRvQXJyYXlTdHJpY3QodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIFt2YWx1ZV07XG59XG5mdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIHRvQXJyYXlTdHJpY3QodmFsdWUpO1xufVxuZnVuY3Rpb24gbWFwQ29udGV4dChtYXBwZXIsIGNvbnRleHQsIF9ldmVudCkge1xuICB2YXIgZV81LCBfYTtcblxuICBpZiAoaXNGdW5jdGlvbihtYXBwZXIpKSB7XG4gICAgcmV0dXJuIG1hcHBlcihjb250ZXh0LCBfZXZlbnQuZGF0YSk7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfYiA9IF90c2xpYi5fX3ZhbHVlcyhPYmplY3Qua2V5cyhtYXBwZXIpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgdmFyIGtleSA9IF9jLnZhbHVlO1xuICAgICAgdmFyIHN1Yk1hcHBlciA9IG1hcHBlcltrZXldO1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihzdWJNYXBwZXIpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gc3ViTWFwcGVyKGNvbnRleHQsIF9ldmVudC5kYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gc3ViTWFwcGVyO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZV81XzEpIHtcbiAgICBlXzUgPSB7XG4gICAgICBlcnJvcjogZV81XzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzUpIHRocm93IGVfNS5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gaXNCdWlsdEluRXZlbnQoZXZlbnRUeXBlKSB7XG4gIHJldHVybiAvXihkb25lfGVycm9yKVxcLi8udGVzdChldmVudFR5cGUpO1xufVxuZnVuY3Rpb24gaXNQcm9taXNlTGlrZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gQ2hlY2sgaWYgc2hhcGUgbWF0Y2hlcyB0aGUgUHJvbWlzZS9BKyBzcGVjaWZpY2F0aW9uIGZvciBhIFwidGhlbmFibGVcIi5cblxuXG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykgJiYgaXNGdW5jdGlvbih2YWx1ZS50aGVuKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNCZWhhdmlvcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAndHJhbnNpdGlvbicgaW4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRyYW5zaXRpb24gPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBwYXJ0aXRpb24oaXRlbXMsIHByZWRpY2F0ZSkge1xuICB2YXIgZV82LCBfYTtcblxuICB2YXIgX2IgPSBfdHNsaWIuX19yZWFkKFtbXSwgW11dLCAyKSxcbiAgICAgIHRydXRoeSA9IF9iWzBdLFxuICAgICAgZmFsc3kgPSBfYlsxXTtcblxuICB0cnkge1xuICAgIGZvciAodmFyIGl0ZW1zXzEgPSBfdHNsaWIuX192YWx1ZXMoaXRlbXMpLCBpdGVtc18xXzEgPSBpdGVtc18xLm5leHQoKTsgIWl0ZW1zXzFfMS5kb25lOyBpdGVtc18xXzEgPSBpdGVtc18xLm5leHQoKSkge1xuICAgICAgdmFyIGl0ZW0gPSBpdGVtc18xXzEudmFsdWU7XG5cbiAgICAgIGlmIChwcmVkaWNhdGUoaXRlbSkpIHtcbiAgICAgICAgdHJ1dGh5LnB1c2goaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYWxzeS5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZV82XzEpIHtcbiAgICBlXzYgPSB7XG4gICAgICBlcnJvcjogZV82XzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXRlbXNfMV8xICYmICFpdGVtc18xXzEuZG9uZSAmJiAoX2EgPSBpdGVtc18xLnJldHVybikpIF9hLmNhbGwoaXRlbXNfMSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzYpIHRocm93IGVfNi5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3RydXRoeSwgZmFsc3ldO1xufVxuZnVuY3Rpb24gdXBkYXRlSGlzdG9yeVN0YXRlcyhoaXN0LCBzdGF0ZVZhbHVlKSB7XG4gIHJldHVybiBtYXBWYWx1ZXMoaGlzdC5zdGF0ZXMsIGZ1bmN0aW9uIChzdWJIaXN0LCBrZXkpIHtcbiAgICBpZiAoIXN1Ykhpc3QpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIHN1YlN0YXRlVmFsdWUgPSAoaXNTdHJpbmcoc3RhdGVWYWx1ZSkgPyB1bmRlZmluZWQgOiBzdGF0ZVZhbHVlW2tleV0pIHx8IChzdWJIaXN0ID8gc3ViSGlzdC5jdXJyZW50IDogdW5kZWZpbmVkKTtcblxuICAgIGlmICghc3ViU3RhdGVWYWx1ZSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudDogc3ViU3RhdGVWYWx1ZSxcbiAgICAgIHN0YXRlczogdXBkYXRlSGlzdG9yeVN0YXRlcyhzdWJIaXN0LCBzdWJTdGF0ZVZhbHVlKVxuICAgIH07XG4gIH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlSGlzdG9yeVZhbHVlKGhpc3QsIHN0YXRlVmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50OiBzdGF0ZVZhbHVlLFxuICAgIHN0YXRlczogdXBkYXRlSGlzdG9yeVN0YXRlcyhoaXN0LCBzdGF0ZVZhbHVlKVxuICB9O1xufVxuZnVuY3Rpb24gdXBkYXRlQ29udGV4dChjb250ZXh0LCBfZXZlbnQsIGFzc2lnbkFjdGlvbnMsIHN0YXRlKSB7XG4gIGlmICghZW52aXJvbm1lbnQuSVNfUFJPRFVDVElPTikge1xuICAgIGV4cG9ydHMud2FybighIWNvbnRleHQsICdBdHRlbXB0aW5nIHRvIHVwZGF0ZSB1bmRlZmluZWQgY29udGV4dCcpO1xuICB9XG5cbiAgdmFyIHVwZGF0ZWRDb250ZXh0ID0gY29udGV4dCA/IGFzc2lnbkFjdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGFzc2lnbkFjdGlvbikge1xuICAgIHZhciBlXzcsIF9hO1xuXG4gICAgdmFyIGFzc2lnbm1lbnQgPSBhc3NpZ25BY3Rpb24uYXNzaWdubWVudDtcbiAgICB2YXIgbWV0YSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGFjdGlvbjogYXNzaWduQWN0aW9uLFxuICAgICAgX2V2ZW50OiBfZXZlbnRcbiAgICB9O1xuICAgIHZhciBwYXJ0aWFsVXBkYXRlID0ge307XG5cbiAgICBpZiAoaXNGdW5jdGlvbihhc3NpZ25tZW50KSkge1xuICAgICAgcGFydGlhbFVwZGF0ZSA9IGFzc2lnbm1lbnQoYWNjLCBfZXZlbnQuZGF0YSwgbWV0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9iID0gX3RzbGliLl9fdmFsdWVzKE9iamVjdC5rZXlzKGFzc2lnbm1lbnQpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgIHZhciBrZXkgPSBfYy52YWx1ZTtcbiAgICAgICAgICB2YXIgcHJvcEFzc2lnbm1lbnQgPSBhc3NpZ25tZW50W2tleV07XG4gICAgICAgICAgcGFydGlhbFVwZGF0ZVtrZXldID0gaXNGdW5jdGlvbihwcm9wQXNzaWdubWVudCkgPyBwcm9wQXNzaWdubWVudChhY2MsIF9ldmVudC5kYXRhLCBtZXRhKSA6IHByb3BBc3NpZ25tZW50O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlXzdfMSkge1xuICAgICAgICBlXzcgPSB7XG4gICAgICAgICAgZXJyb3I6IGVfN18xXG4gICAgICAgIH07XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoZV83KSB0aHJvdyBlXzcuZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCBwYXJ0aWFsVXBkYXRlKTtcbiAgfSwgY29udGV4dCkgOiBjb250ZXh0O1xuICByZXR1cm4gdXBkYXRlZENvbnRleHQ7XG59IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxuXG5leHBvcnRzLndhcm4gPSBmdW5jdGlvbiAoKSB7fTtcblxuaWYgKCFlbnZpcm9ubWVudC5JU19QUk9EVUNUSU9OKSB7XG4gIGV4cG9ydHMud2FybiA9IGZ1bmN0aW9uIChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICB2YXIgZXJyb3IgPSBjb25kaXRpb24gaW5zdGFuY2VvZiBFcnJvciA/IGNvbmRpdGlvbiA6IHVuZGVmaW5lZDtcblxuICAgIGlmICghZXJyb3IgJiYgY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXCJXYXJuaW5nOiBcIi5jb25jYXQobWVzc2FnZSldO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgYXJncy5wdXNoKGVycm9yKTtcbiAgICAgIH0gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcblxuXG4gICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHlwZXNcblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5mdW5jdGlvbiB0b0d1YXJkKGNvbmRpdGlvbiwgZ3VhcmRNYXApIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGNvbmRpdGlvbikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogY29uc3RhbnRzLkRFRkFVTFRfR1VBUkRfVFlQRSxcbiAgICAgIG5hbWU6IGNvbmRpdGlvbixcbiAgICAgIHByZWRpY2F0ZTogZ3VhcmRNYXAgPyBndWFyZE1hcFtjb25kaXRpb25dIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogY29uc3RhbnRzLkRFRkFVTFRfR1VBUkRfVFlQRSxcbiAgICAgIG5hbWU6IGNvbmRpdGlvbi5uYW1lLFxuICAgICAgcHJlZGljYXRlOiBjb25kaXRpb25cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGNvbmRpdGlvbjtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiAnc3Vic2NyaWJlJyBpbiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnN1YnNjcmliZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbnZhciBzeW1ib2xPYnNlcnZhYmxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KCk7IC8vIFRPRE86IHRvIGJlIHJlbW92ZWQgaW4gdjUsIGxlZnQgaXQgb3V0IGp1c3QgdG8gbWluaW1pemUgdGhlIHNjb3BlIG9mIHRoZSBjaGFuZ2UgYW5kIG1haW50YWluIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBpbnRlZ3JhdGlvbiBwYWFja2FnZXNcblxudmFyIGludGVyb3BTeW1ib2xzID0gKF9hID0ge30sIF9hW3N5bWJvbE9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn0sIF9hW1N5bWJvbC5vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59LCBfYSk7XG5mdW5jdGlvbiBpc01hY2hpbmUodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgJ19feHN0YXRlbm9kZScgaW4gdmFsdWU7XG59XG5mdW5jdGlvbiBpc0FjdG9yKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zZW5kID09PSAnZnVuY3Rpb24nO1xufVxudmFyIHVuaXF1ZUlkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgdmFyIGN1cnJlbnRJZCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgY3VycmVudElkKys7XG4gICAgcmV0dXJuIGN1cnJlbnRJZC50b1N0cmluZygxNik7XG4gIH07XG59KCk7XG5mdW5jdGlvbiB0b0V2ZW50T2JqZWN0KGV2ZW50LCBwYXlsb2FkIC8vIGlkPzogVEV2ZW50Wyd0eXBlJ11cbikge1xuICBpZiAoaXNTdHJpbmcoZXZlbnQpIHx8IHR5cGVvZiBldmVudCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gX3RzbGliLl9fYXNzaWduKHtcbiAgICAgIHR5cGU6IGV2ZW50XG4gICAgfSwgcGF5bG9hZCk7XG4gIH1cblxuICByZXR1cm4gZXZlbnQ7XG59XG5mdW5jdGlvbiB0b1NDWE1MRXZlbnQoZXZlbnQsIHNjeG1sRXZlbnQpIHtcbiAgaWYgKCFpc1N0cmluZyhldmVudCkgJiYgJyQkdHlwZScgaW4gZXZlbnQgJiYgZXZlbnQuJCR0eXBlID09PSAnc2N4bWwnKSB7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgdmFyIGV2ZW50T2JqZWN0ID0gdG9FdmVudE9iamVjdChldmVudCk7XG4gIHJldHVybiBfdHNsaWIuX19hc3NpZ24oe1xuICAgIG5hbWU6IGV2ZW50T2JqZWN0LnR5cGUsXG4gICAgZGF0YTogZXZlbnRPYmplY3QsXG4gICAgJCR0eXBlOiAnc2N4bWwnLFxuICAgIHR5cGU6ICdleHRlcm5hbCdcbiAgfSwgc2N4bWxFdmVudCk7XG59XG5mdW5jdGlvbiB0b1RyYW5zaXRpb25Db25maWdBcnJheShldmVudCwgY29uZmlnTGlrZSkge1xuICB2YXIgdHJhbnNpdGlvbnMgPSB0b0FycmF5U3RyaWN0KGNvbmZpZ0xpa2UpLm1hcChmdW5jdGlvbiAodHJhbnNpdGlvbkxpa2UpIHtcbiAgICBpZiAodHlwZW9mIHRyYW5zaXRpb25MaWtlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdHJhbnNpdGlvbkxpa2UgPT09ICdzdHJpbmcnIHx8IGlzTWFjaGluZSh0cmFuc2l0aW9uTGlrZSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldDogdHJhbnNpdGlvbkxpa2UsXG4gICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgdHJhbnNpdGlvbkxpa2UpLCB7XG4gICAgICBldmVudDogZXZlbnRcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB0cmFuc2l0aW9ucztcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gY29uc3RhbnRzLlRBUkdFVExFU1NfS0VZKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB0b0FycmF5KHRhcmdldCk7XG59XG5mdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFeGNlcHRpb25Pbkludm9jYXRpb24ob3JpZ2luYWxFcnJvciwgY3VycmVudEVycm9yLCBpZCkge1xuICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICB2YXIgb3JpZ2luYWxTdGFja1RyYWNlID0gb3JpZ2luYWxFcnJvci5zdGFjayA/IFwiIFN0YWNrdHJhY2Ugd2FzICdcIi5jb25jYXQob3JpZ2luYWxFcnJvci5zdGFjaywgXCInXCIpIDogJyc7XG5cbiAgICBpZiAob3JpZ2luYWxFcnJvciA9PT0gY3VycmVudEVycm9yKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihcIk1pc3Npbmcgb25FcnJvciBoYW5kbGVyIGZvciBpbnZvY2F0aW9uICdcIi5jb25jYXQoaWQsIFwiJywgZXJyb3Igd2FzICdcIikuY29uY2F0KG9yaWdpbmFsRXJyb3IsIFwiJy5cIikuY29uY2F0KG9yaWdpbmFsU3RhY2tUcmFjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2tUcmFjZSA9IGN1cnJlbnRFcnJvci5zdGFjayA/IFwiIFN0YWNrdHJhY2Ugd2FzICdcIi5jb25jYXQoY3VycmVudEVycm9yLnN0YWNrLCBcIidcIikgOiAnJzsgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS5lcnJvcihcIk1pc3Npbmcgb25FcnJvciBoYW5kbGVyIGFuZC9vciB1bmhhbmRsZWQgZXhjZXB0aW9uL3Byb21pc2UgcmVqZWN0aW9uIGZvciBpbnZvY2F0aW9uICdcIi5jb25jYXQoaWQsIFwiJy4gXCIpICsgXCJPcmlnaW5hbCBlcnJvcjogJ1wiLmNvbmNhdChvcmlnaW5hbEVycm9yLCBcIicuIFwiKS5jb25jYXQob3JpZ2luYWxTdGFja1RyYWNlLCBcIiBDdXJyZW50IGVycm9yIGlzICdcIikuY29uY2F0KGN1cnJlbnRFcnJvciwgXCInLlwiKS5jb25jYXQoc3RhY2tUcmFjZSkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZXZhbHVhdGVHdWFyZChtYWNoaW5lLCBndWFyZCwgY29udGV4dCwgX2V2ZW50LCBzdGF0ZSkge1xuICB2YXIgZ3VhcmRzID0gbWFjaGluZS5vcHRpb25zLmd1YXJkcztcbiAgdmFyIGd1YXJkTWV0YSA9IHtcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgY29uZDogZ3VhcmQsXG4gICAgX2V2ZW50OiBfZXZlbnRcbiAgfTsgLy8gVE9ETzogZG8gbm90IGhhcmRjb2RlIVxuXG4gIGlmIChndWFyZC50eXBlID09PSBjb25zdGFudHMuREVGQVVMVF9HVUFSRF9UWVBFKSB7XG4gICAgcmV0dXJuICgoZ3VhcmRzID09PSBudWxsIHx8IGd1YXJkcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ3VhcmRzW2d1YXJkLm5hbWVdKSB8fCBndWFyZC5wcmVkaWNhdGUpKGNvbnRleHQsIF9ldmVudC5kYXRhLCBndWFyZE1ldGEpO1xuICB9XG5cbiAgdmFyIGNvbmRGbiA9IGd1YXJkcyA9PT0gbnVsbCB8fCBndWFyZHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGd1YXJkc1tndWFyZC50eXBlXTtcblxuICBpZiAoIWNvbmRGbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkd1YXJkICdcIi5jb25jYXQoZ3VhcmQudHlwZSwgXCInIGlzIG5vdCBpbXBsZW1lbnRlZCBvbiBtYWNoaW5lICdcIikuY29uY2F0KG1hY2hpbmUuaWQsIFwiJy5cIikpO1xuICB9XG5cbiAgcmV0dXJuIGNvbmRGbihjb250ZXh0LCBfZXZlbnQuZGF0YSwgZ3VhcmRNZXRhKTtcbn1cbmZ1bmN0aW9uIHRvSW52b2tlU291cmNlKHNyYykge1xuICBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogc3JjXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBzcmM7XG59XG5mdW5jdGlvbiB0b09ic2VydmVyKG5leHRIYW5kbGVyLCBlcnJvckhhbmRsZXIsIGNvbXBsZXRpb25IYW5kbGVyKSB7XG4gIHZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbiAgdmFyIGlzT2JzZXJ2ZXIgPSB0eXBlb2YgbmV4dEhhbmRsZXIgPT09ICdvYmplY3QnO1xuICB2YXIgc2VsZiA9IGlzT2JzZXJ2ZXIgPyBuZXh0SGFuZGxlciA6IG51bGw7XG4gIHJldHVybiB7XG4gICAgbmV4dDogKChpc09ic2VydmVyID8gbmV4dEhhbmRsZXIubmV4dCA6IG5leHRIYW5kbGVyKSB8fCBub29wKS5iaW5kKHNlbGYpLFxuICAgIGVycm9yOiAoKGlzT2JzZXJ2ZXIgPyBuZXh0SGFuZGxlci5lcnJvciA6IGVycm9ySGFuZGxlcikgfHwgbm9vcCkuYmluZChzZWxmKSxcbiAgICBjb21wbGV0ZTogKChpc09ic2VydmVyID8gbmV4dEhhbmRsZXIuY29tcGxldGUgOiBjb21wbGV0aW9uSGFuZGxlcikgfHwgbm9vcCkuYmluZChzZWxmKVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW52b2tlSWQoc3RhdGVOb2RlSWQsIGluZGV4KSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChzdGF0ZU5vZGVJZCwgXCI6aW52b2NhdGlvbltcIikuY29uY2F0KGluZGV4LCBcIl1cIik7XG59XG5cbmV4cG9ydHMuY3JlYXRlSW52b2tlSWQgPSBjcmVhdGVJbnZva2VJZDtcbmV4cG9ydHMuZXZhbHVhdGVHdWFyZCA9IGV2YWx1YXRlR3VhcmQ7XG5leHBvcnRzLmZsYXR0ZW4gPSBmbGF0dGVuO1xuZXhwb3J0cy5nZXRBY3Rpb25UeXBlID0gZ2V0QWN0aW9uVHlwZTtcbmV4cG9ydHMuZ2V0RXZlbnRUeXBlID0gZ2V0RXZlbnRUeXBlO1xuZXhwb3J0cy5pbnRlcm9wU3ltYm9scyA9IGludGVyb3BTeW1ib2xzO1xuZXhwb3J0cy5pc0FjdG9yID0gaXNBY3RvcjtcbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5leHBvcnRzLmlzQmVoYXZpb3IgPSBpc0JlaGF2aW9yO1xuZXhwb3J0cy5pc0J1aWx0SW5FdmVudCA9IGlzQnVpbHRJbkV2ZW50O1xuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmV4cG9ydHMuaXNNYWNoaW5lID0gaXNNYWNoaW5lO1xuZXhwb3J0cy5pc09ic2VydmFibGUgPSBpc09ic2VydmFibGU7XG5leHBvcnRzLmlzUHJvbWlzZUxpa2UgPSBpc1Byb21pc2VMaWtlO1xuZXhwb3J0cy5pc1N0YXRlTGlrZSA9IGlzU3RhdGVMaWtlO1xuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuZXhwb3J0cy5rZXlzID0ga2V5cztcbmV4cG9ydHMubWFwQ29udGV4dCA9IG1hcENvbnRleHQ7XG5leHBvcnRzLm1hcEZpbHRlclZhbHVlcyA9IG1hcEZpbHRlclZhbHVlcztcbmV4cG9ydHMubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuZXhwb3J0cy5tYXRjaGVzU3RhdGUgPSBtYXRjaGVzU3RhdGU7XG5leHBvcnRzLm5lc3RlZFBhdGggPSBuZXN0ZWRQYXRoO1xuZXhwb3J0cy5ub3JtYWxpemVUYXJnZXQgPSBub3JtYWxpemVUYXJnZXQ7XG5leHBvcnRzLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbmV4cG9ydHMucGF0aCA9IHBhdGg7XG5leHBvcnRzLnBhdGhUb1N0YXRlVmFsdWUgPSBwYXRoVG9TdGF0ZVZhbHVlO1xuZXhwb3J0cy5wYXRoc1RvU3RhdGVWYWx1ZSA9IHBhdGhzVG9TdGF0ZVZhbHVlO1xuZXhwb3J0cy5yZXBvcnRVbmhhbmRsZWRFeGNlcHRpb25Pbkludm9jYXRpb24gPSByZXBvcnRVbmhhbmRsZWRFeGNlcHRpb25Pbkludm9jYXRpb247XG5leHBvcnRzLnN5bWJvbE9ic2VydmFibGUgPSBzeW1ib2xPYnNlcnZhYmxlO1xuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcbmV4cG9ydHMudG9BcnJheVN0cmljdCA9IHRvQXJyYXlTdHJpY3Q7XG5leHBvcnRzLnRvRXZlbnRPYmplY3QgPSB0b0V2ZW50T2JqZWN0O1xuZXhwb3J0cy50b0d1YXJkID0gdG9HdWFyZDtcbmV4cG9ydHMudG9JbnZva2VTb3VyY2UgPSB0b0ludm9rZVNvdXJjZTtcbmV4cG9ydHMudG9PYnNlcnZlciA9IHRvT2JzZXJ2ZXI7XG5leHBvcnRzLnRvU0NYTUxFdmVudCA9IHRvU0NYTUxFdmVudDtcbmV4cG9ydHMudG9TdGF0ZVBhdGggPSB0b1N0YXRlUGF0aDtcbmV4cG9ydHMudG9TdGF0ZVBhdGhzID0gdG9TdGF0ZVBhdGhzO1xuZXhwb3J0cy50b1N0YXRlVmFsdWUgPSB0b1N0YXRlVmFsdWU7XG5leHBvcnRzLnRvVHJhbnNpdGlvbkNvbmZpZ0FycmF5ID0gdG9UcmFuc2l0aW9uQ29uZmlnQXJyYXk7XG5leHBvcnRzLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG5leHBvcnRzLnVwZGF0ZUNvbnRleHQgPSB1cGRhdGVDb250ZXh0O1xuZXhwb3J0cy51cGRhdGVIaXN0b3J5U3RhdGVzID0gdXBkYXRlSGlzdG9yeVN0YXRlcztcbmV4cG9ydHMudXBkYXRlSGlzdG9yeVZhbHVlID0gdXBkYXRlSGlzdG9yeVZhbHVlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIF90c2xpYiA9IHJlcXVpcmUoJy4vX3ZpcnR1YWwvX3RzbGliLmpzJyk7XG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzLmpzJyk7XG52YXIgYWN0aW9uVHlwZXMgPSByZXF1aXJlKCcuL2FjdGlvblR5cGVzLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG52YXIgZW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL2Vudmlyb25tZW50LmpzJyk7XG5cbnZhciBpbml0RXZlbnQgPSAvKiNfX1BVUkVfXyovdXRpbHMudG9TQ1hNTEV2ZW50KHtcbiAgdHlwZTogYWN0aW9uVHlwZXMuaW5pdFxufSk7XG5mdW5jdGlvbiBnZXRBY3Rpb25GdW5jdGlvbihhY3Rpb25UeXBlLCBhY3Rpb25GdW5jdGlvbk1hcCkge1xuICByZXR1cm4gYWN0aW9uRnVuY3Rpb25NYXAgPyBhY3Rpb25GdW5jdGlvbk1hcFthY3Rpb25UeXBlXSB8fCB1bmRlZmluZWQgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiB0b0FjdGlvbk9iamVjdChhY3Rpb24sIGFjdGlvbkZ1bmN0aW9uTWFwKSB7XG4gIHZhciBhY3Rpb25PYmplY3Q7XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGFjdGlvbikgfHwgdHlwZW9mIGFjdGlvbiA9PT0gJ251bWJlcicpIHtcbiAgICB2YXIgZXhlYyA9IGdldEFjdGlvbkZ1bmN0aW9uKGFjdGlvbiwgYWN0aW9uRnVuY3Rpb25NYXApO1xuXG4gICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZXhlYykpIHtcbiAgICAgIGFjdGlvbk9iamVjdCA9IHtcbiAgICAgICAgdHlwZTogYWN0aW9uLFxuICAgICAgICBleGVjOiBleGVjXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZXhlYykge1xuICAgICAgYWN0aW9uT2JqZWN0ID0gZXhlYztcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uT2JqZWN0ID0ge1xuICAgICAgICB0eXBlOiBhY3Rpb24sXG4gICAgICAgIGV4ZWM6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNGdW5jdGlvbihhY3Rpb24pKSB7XG4gICAgYWN0aW9uT2JqZWN0ID0ge1xuICAgICAgLy8gQ29udmVydCBhY3Rpb24gdG8gc3RyaW5nIGlmIHVubmFtZWRcbiAgICAgIHR5cGU6IGFjdGlvbi5uYW1lIHx8IGFjdGlvbi50b1N0cmluZygpLFxuICAgICAgZXhlYzogYWN0aW9uXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXhlYyA9IGdldEFjdGlvbkZ1bmN0aW9uKGFjdGlvbi50eXBlLCBhY3Rpb25GdW5jdGlvbk1hcCk7XG5cbiAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihleGVjKSkge1xuICAgICAgYWN0aW9uT2JqZWN0ID0gX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgYWN0aW9uKSwge1xuICAgICAgICBleGVjOiBleGVjXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGV4ZWMpIHtcbiAgICAgIHZhciBhY3Rpb25UeXBlID0gZXhlYy50eXBlIHx8IGFjdGlvbi50eXBlO1xuICAgICAgYWN0aW9uT2JqZWN0ID0gX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIGV4ZWMpLCBhY3Rpb24pLCB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb25PYmplY3QgPSBhY3Rpb247XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFjdGlvbk9iamVjdDtcbn1cbnZhciB0b0FjdGlvbk9iamVjdHMgPSBmdW5jdGlvbiAoYWN0aW9uLCBhY3Rpb25GdW5jdGlvbk1hcCkge1xuICBpZiAoIWFjdGlvbikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBhY3Rpb25zID0gdXRpbHMuaXNBcnJheShhY3Rpb24pID8gYWN0aW9uIDogW2FjdGlvbl07XG4gIHJldHVybiBhY3Rpb25zLm1hcChmdW5jdGlvbiAoc3ViQWN0aW9uKSB7XG4gICAgcmV0dXJuIHRvQWN0aW9uT2JqZWN0KHN1YkFjdGlvbiwgYWN0aW9uRnVuY3Rpb25NYXApO1xuICB9KTtcbn07XG5mdW5jdGlvbiB0b0FjdGl2aXR5RGVmaW5pdGlvbihhY3Rpb24pIHtcbiAgdmFyIGFjdGlvbk9iamVjdCA9IHRvQWN0aW9uT2JqZWN0KGFjdGlvbik7XG4gIHJldHVybiBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHtcbiAgICBpZDogdXRpbHMuaXNTdHJpbmcoYWN0aW9uKSA/IGFjdGlvbiA6IGFjdGlvbk9iamVjdC5pZFxuICB9LCBhY3Rpb25PYmplY3QpLCB7XG4gICAgdHlwZTogYWN0aW9uT2JqZWN0LnR5cGVcbiAgfSk7XG59XG4vKipcclxuICogUmFpc2VzIGFuIGV2ZW50LiBUaGlzIHBsYWNlcyB0aGUgZXZlbnQgaW4gdGhlIGludGVybmFsIGV2ZW50IHF1ZXVlLCBzbyB0aGF0XHJcbiAqIHRoZSBldmVudCBpcyBpbW1lZGlhdGVseSBjb25zdW1lZCBieSB0aGUgbWFjaGluZSBpbiB0aGUgY3VycmVudCBzdGVwLlxyXG4gKlxyXG4gKiBAcGFyYW0gZXZlbnRUeXBlIFRoZSBldmVudCB0byByYWlzZS5cclxuICovXG5cbmZ1bmN0aW9uIHJhaXNlKGV2ZW50KSB7XG4gIGlmICghdXRpbHMuaXNTdHJpbmcoZXZlbnQpKSB7XG4gICAgcmV0dXJuIHNlbmQoZXZlbnQsIHtcbiAgICAgIHRvOiB0eXBlcy5TcGVjaWFsVGFyZ2V0cy5JbnRlcm5hbFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5yYWlzZSxcbiAgICBldmVudDogZXZlbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVSYWlzZShhY3Rpb24pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5yYWlzZSxcbiAgICBfZXZlbnQ6IHV0aWxzLnRvU0NYTUxFdmVudChhY3Rpb24uZXZlbnQpXG4gIH07XG59XG4vKipcclxuICogU2VuZHMgYW4gZXZlbnQuIFRoaXMgcmV0dXJucyBhbiBhY3Rpb24gdGhhdCB3aWxsIGJlIHJlYWQgYnkgYW4gaW50ZXJwcmV0ZXIgdG9cclxuICogc2VuZCB0aGUgZXZlbnQgaW4gdGhlIG5leHQgc3RlcCwgYWZ0ZXIgdGhlIGN1cnJlbnQgc3RlcCBpcyBmaW5pc2hlZCBleGVjdXRpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gc2VuZC5cclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIGludG8gdGhlIHNlbmQgZXZlbnQ6XHJcbiAqICAtIGBpZGAgLSBUaGUgdW5pcXVlIHNlbmQgZXZlbnQgaWRlbnRpZmllciAodXNlZCB3aXRoIGBjYW5jZWwoKWApLlxyXG4gKiAgLSBgZGVsYXlgIC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgdGhlIHNlbmRpbmcgb2YgdGhlIGV2ZW50LlxyXG4gKiAgLSBgdG9gIC0gVGhlIHRhcmdldCBvZiB0aGlzIGV2ZW50IChieSBkZWZhdWx0LCB0aGUgbWFjaGluZSB0aGUgZXZlbnQgd2FzIHNlbnQgZnJvbSkuXHJcbiAqL1xuXG5mdW5jdGlvbiBzZW5kKGV2ZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgdG86IG9wdGlvbnMgPyBvcHRpb25zLnRvIDogdW5kZWZpbmVkLFxuICAgIHR5cGU6IGFjdGlvblR5cGVzLnNlbmQsXG4gICAgZXZlbnQ6IHV0aWxzLmlzRnVuY3Rpb24oZXZlbnQpID8gZXZlbnQgOiB1dGlscy50b0V2ZW50T2JqZWN0KGV2ZW50KSxcbiAgICBkZWxheTogb3B0aW9ucyA/IG9wdGlvbnMuZGVsYXkgOiB1bmRlZmluZWQsXG4gICAgaWQ6IG9wdGlvbnMgJiYgb3B0aW9ucy5pZCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pZCA6IHV0aWxzLmlzRnVuY3Rpb24oZXZlbnQpID8gZXZlbnQubmFtZSA6IHV0aWxzLmdldEV2ZW50VHlwZShldmVudClcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVTZW5kKGFjdGlvbiwgY3R4LCBfZXZlbnQsIGRlbGF5c01hcCkge1xuICB2YXIgbWV0YSA9IHtcbiAgICBfZXZlbnQ6IF9ldmVudFxuICB9OyAvLyBUT0RPOiBoZWxwZXIgZnVuY3Rpb24gZm9yIHJlc29sdmluZyBFeHByXG5cbiAgdmFyIHJlc29sdmVkRXZlbnQgPSB1dGlscy50b1NDWE1MRXZlbnQodXRpbHMuaXNGdW5jdGlvbihhY3Rpb24uZXZlbnQpID8gYWN0aW9uLmV2ZW50KGN0eCwgX2V2ZW50LmRhdGEsIG1ldGEpIDogYWN0aW9uLmV2ZW50KTtcbiAgdmFyIHJlc29sdmVkRGVsYXk7XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGFjdGlvbi5kZWxheSkpIHtcbiAgICB2YXIgY29uZmlnRGVsYXkgPSBkZWxheXNNYXAgJiYgZGVsYXlzTWFwW2FjdGlvbi5kZWxheV07XG4gICAgcmVzb2x2ZWREZWxheSA9IHV0aWxzLmlzRnVuY3Rpb24oY29uZmlnRGVsYXkpID8gY29uZmlnRGVsYXkoY3R4LCBfZXZlbnQuZGF0YSwgbWV0YSkgOiBjb25maWdEZWxheTtcbiAgfSBlbHNlIHtcbiAgICByZXNvbHZlZERlbGF5ID0gdXRpbHMuaXNGdW5jdGlvbihhY3Rpb24uZGVsYXkpID8gYWN0aW9uLmRlbGF5KGN0eCwgX2V2ZW50LmRhdGEsIG1ldGEpIDogYWN0aW9uLmRlbGF5O1xuICB9XG5cbiAgdmFyIHJlc29sdmVkVGFyZ2V0ID0gdXRpbHMuaXNGdW5jdGlvbihhY3Rpb24udG8pID8gYWN0aW9uLnRvKGN0eCwgX2V2ZW50LmRhdGEsIG1ldGEpIDogYWN0aW9uLnRvO1xuICByZXR1cm4gX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgYWN0aW9uKSwge1xuICAgIHRvOiByZXNvbHZlZFRhcmdldCxcbiAgICBfZXZlbnQ6IHJlc29sdmVkRXZlbnQsXG4gICAgZXZlbnQ6IHJlc29sdmVkRXZlbnQuZGF0YSxcbiAgICBkZWxheTogcmVzb2x2ZWREZWxheVxuICB9KTtcbn1cbi8qKlxyXG4gKiBTZW5kcyBhbiBldmVudCB0byB0aGlzIG1hY2hpbmUncyBwYXJlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gc2VuZCB0byB0aGUgcGFyZW50IG1hY2hpbmUuXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBzZW5kIGV2ZW50LlxyXG4gKi9cblxuZnVuY3Rpb24gc2VuZFBhcmVudChldmVudCwgb3B0aW9ucykge1xuICByZXR1cm4gc2VuZChldmVudCwgX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyksIHtcbiAgICB0bzogdHlwZXMuU3BlY2lhbFRhcmdldHMuUGFyZW50XG4gIH0pKTtcbn1cbi8qKlxyXG4gKiBTZW5kcyBhbiBldmVudCB0byBhbiBhY3Rvci5cclxuICpcclxuICogQHBhcmFtIGFjdG9yIFRoZSBgQWN0b3JSZWZgIHRvIHNlbmQgdGhlIGV2ZW50IHRvLlxyXG4gKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHNlbmQsIG9yIGFuIGV4cHJlc3Npb24gdGhhdCBldmFsdWF0ZXMgdG8gdGhlIGV2ZW50IHRvIHNlbmRcclxuICogQHBhcmFtIG9wdGlvbnMgU2VuZCBhY3Rpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyBBbiBYU3RhdGUgc2VuZCBhY3Rpb24gb2JqZWN0XHJcbiAqL1xuXG5mdW5jdGlvbiBzZW5kVG8oYWN0b3IsIGV2ZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBzZW5kKGV2ZW50LCBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHt9LCBvcHRpb25zKSwge1xuICAgIHRvOiBhY3RvclxuICB9KSk7XG59XG4vKipcclxuICogU2VuZHMgYW4gdXBkYXRlIGV2ZW50IHRvIHRoaXMgbWFjaGluZSdzIHBhcmVudC5cclxuICovXG5cbmZ1bmN0aW9uIHNlbmRVcGRhdGUoKSB7XG4gIHJldHVybiBzZW5kUGFyZW50KGFjdGlvblR5cGVzLnVwZGF0ZSk7XG59XG4vKipcclxuICogU2VuZHMgYW4gZXZlbnQgYmFjayB0byB0aGUgc2VuZGVyIG9mIHRoZSBvcmlnaW5hbCBldmVudC5cclxuICpcclxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kIGJhY2sgdG8gdGhlIHNlbmRlclxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgaW50byB0aGUgc2VuZCBldmVudFxyXG4gKi9cblxuZnVuY3Rpb24gcmVzcG9uZChldmVudCwgb3B0aW9ucykge1xuICByZXR1cm4gc2VuZChldmVudCwgX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyksIHtcbiAgICB0bzogZnVuY3Rpb24gKF8sIF9fLCBfYSkge1xuICAgICAgdmFyIF9ldmVudCA9IF9hLl9ldmVudDtcbiAgICAgIHJldHVybiBfZXZlbnQub3JpZ2luOyAvLyBUT0RPOiBoYW5kbGUgd2hlbiBfZXZlbnQub3JpZ2luIGlzIHVuZGVmaW5lZFxuICAgIH1cbiAgfSkpO1xufVxuXG52YXIgZGVmYXVsdExvZ0V4cHIgPSBmdW5jdGlvbiAoY29udGV4dCwgZXZlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgIGV2ZW50OiBldmVudFxuICB9O1xufTtcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gZXhwciBUaGUgZXhwcmVzc2lvbiBmdW5jdGlvbiB0byBldmFsdWF0ZSB3aGljaCB3aWxsIGJlIGxvZ2dlZC5cclxuICogIFRha2VzIGluIDIgYXJndW1lbnRzOlxyXG4gKiAgLSBgY3R4YCAtIHRoZSBjdXJyZW50IHN0YXRlIGNvbnRleHRcclxuICogIC0gYGV2ZW50YCAtIHRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGFjdGlvbiB0byBiZSBleGVjdXRlZC5cclxuICogQHBhcmFtIGxhYmVsIFRoZSBsYWJlbCB0byBnaXZlIHRvIHRoZSBsb2dnZWQgZXhwcmVzc2lvbi5cclxuICovXG5cblxuZnVuY3Rpb24gbG9nKGV4cHIsIGxhYmVsKSB7XG4gIGlmIChleHByID09PSB2b2lkIDApIHtcbiAgICBleHByID0gZGVmYXVsdExvZ0V4cHI7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLmxvZyxcbiAgICBsYWJlbDogbGFiZWwsXG4gICAgZXhwcjogZXhwclxuICB9O1xufVxudmFyIHJlc29sdmVMb2cgPSBmdW5jdGlvbiAoYWN0aW9uLCBjdHgsIF9ldmVudCkge1xuICByZXR1cm4gX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgYWN0aW9uKSwge1xuICAgIHZhbHVlOiB1dGlscy5pc1N0cmluZyhhY3Rpb24uZXhwcikgPyBhY3Rpb24uZXhwciA6IGFjdGlvbi5leHByKGN0eCwgX2V2ZW50LmRhdGEsIHtcbiAgICAgIF9ldmVudDogX2V2ZW50XG4gICAgfSlcbiAgfSk7XG59O1xuLyoqXHJcbiAqIENhbmNlbHMgYW4gaW4tZmxpZ2h0IGBzZW5kKC4uLilgIGFjdGlvbi4gQSBjYW5jZWxlZCBzZW50IGFjdGlvbiB3aWxsIG5vdFxyXG4gKiBiZSBleGVjdXRlZCwgbm9yIHdpbGwgaXRzIGV2ZW50IGJlIHNlbnQsIHVubGVzcyBpdCBoYXMgYWxyZWFkeSBiZWVuIHNlbnRcclxuICogKGUuZy4sIGlmIGBjYW5jZWwoLi4uKWAgaXMgY2FsbGVkIGFmdGVyIHRoZSBgc2VuZCguLi4pYCBhY3Rpb24ncyBgZGVsYXlgKS5cclxuICpcclxuICogQHBhcmFtIHNlbmRJZCBUaGUgYGlkYCBvZiB0aGUgYHNlbmQoLi4uKWAgYWN0aW9uIHRvIGNhbmNlbC5cclxuICovXG5cbnZhciBjYW5jZWwgPSBmdW5jdGlvbiAoc2VuZElkKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuY2FuY2VsLFxuICAgIHNlbmRJZDogc2VuZElkXG4gIH07XG59O1xuLyoqXHJcbiAqIFN0YXJ0cyBhbiBhY3Rpdml0eS5cclxuICpcclxuICogQHBhcmFtIGFjdGl2aXR5IFRoZSBhY3Rpdml0eSB0byBzdGFydC5cclxuICovXG5cbmZ1bmN0aW9uIHN0YXJ0KGFjdGl2aXR5KSB7XG4gIHZhciBhY3Rpdml0eURlZiA9IHRvQWN0aXZpdHlEZWZpbml0aW9uKGFjdGl2aXR5KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlcy5BY3Rpb25UeXBlcy5TdGFydCxcbiAgICBhY3Rpdml0eTogYWN0aXZpdHlEZWYsXG4gICAgZXhlYzogdW5kZWZpbmVkXG4gIH07XG59XG4vKipcclxuICogU3RvcHMgYW4gYWN0aXZpdHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBhY3RvclJlZiBUaGUgYWN0aXZpdHkgdG8gc3RvcC5cclxuICovXG5cbmZ1bmN0aW9uIHN0b3AoYWN0b3JSZWYpIHtcbiAgdmFyIGFjdGl2aXR5ID0gdXRpbHMuaXNGdW5jdGlvbihhY3RvclJlZikgPyBhY3RvclJlZiA6IHRvQWN0aXZpdHlEZWZpbml0aW9uKGFjdG9yUmVmKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlcy5BY3Rpb25UeXBlcy5TdG9wLFxuICAgIGFjdGl2aXR5OiBhY3Rpdml0eSxcbiAgICBleGVjOiB1bmRlZmluZWRcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVTdG9wKGFjdGlvbiwgY29udGV4dCwgX2V2ZW50KSB7XG4gIHZhciBhY3RvclJlZk9yU3RyaW5nID0gdXRpbHMuaXNGdW5jdGlvbihhY3Rpb24uYWN0aXZpdHkpID8gYWN0aW9uLmFjdGl2aXR5KGNvbnRleHQsIF9ldmVudC5kYXRhKSA6IGFjdGlvbi5hY3Rpdml0eTtcbiAgdmFyIHJlc29sdmVkQWN0b3JSZWYgPSB0eXBlb2YgYWN0b3JSZWZPclN0cmluZyA9PT0gJ3N0cmluZycgPyB7XG4gICAgaWQ6IGFjdG9yUmVmT3JTdHJpbmdcbiAgfSA6IGFjdG9yUmVmT3JTdHJpbmc7XG4gIHZhciBhY3Rpb25PYmplY3QgPSB7XG4gICAgdHlwZTogdHlwZXMuQWN0aW9uVHlwZXMuU3RvcCxcbiAgICBhY3Rpdml0eTogcmVzb2x2ZWRBY3RvclJlZlxuICB9O1xuICByZXR1cm4gYWN0aW9uT2JqZWN0O1xufVxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgY29udGV4dCBvZiB0aGUgbWFjaGluZS5cclxuICpcclxuICogQHBhcmFtIGFzc2lnbm1lbnQgQW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcGFydGlhbCBjb250ZXh0IHRvIHVwZGF0ZS5cclxuICovXG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiAoYXNzaWdubWVudCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLmFzc2lnbixcbiAgICBhc3NpZ25tZW50OiBhc3NpZ25tZW50XG4gIH07XG59O1xuZnVuY3Rpb24gaXNBY3Rpb25PYmplY3QoYWN0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSAnb2JqZWN0JyAmJiAndHlwZScgaW4gYWN0aW9uO1xufVxuLyoqXHJcbiAqIFJldHVybnMgYW4gZXZlbnQgdHlwZSB0aGF0IHJlcHJlc2VudHMgYW4gaW1wbGljaXQgZXZlbnQgdGhhdFxyXG4gKiBpcyBzZW50IGFmdGVyIHRoZSBzcGVjaWZpZWQgYGRlbGF5YC5cclxuICpcclxuICogQHBhcmFtIGRlbGF5UmVmIFRoZSBkZWxheSBpbiBtaWxsaXNlY29uZHNcclxuICogQHBhcmFtIGlkIFRoZSBzdGF0ZSBub2RlIElEIHdoZXJlIHRoaXMgZXZlbnQgaXMgaGFuZGxlZFxyXG4gKi9cblxuZnVuY3Rpb24gYWZ0ZXIoZGVsYXlSZWYsIGlkKSB7XG4gIHZhciBpZFN1ZmZpeCA9IGlkID8gXCIjXCIuY29uY2F0KGlkKSA6ICcnO1xuICByZXR1cm4gXCJcIi5jb25jYXQodHlwZXMuQWN0aW9uVHlwZXMuQWZ0ZXIsIFwiKFwiKS5jb25jYXQoZGVsYXlSZWYsIFwiKVwiKS5jb25jYXQoaWRTdWZmaXgpO1xufVxuLyoqXHJcbiAqIFJldHVybnMgYW4gZXZlbnQgdGhhdCByZXByZXNlbnRzIHRoYXQgYSBmaW5hbCBzdGF0ZSBub2RlXHJcbiAqIGhhcyBiZWVuIHJlYWNoZWQgaW4gdGhlIHBhcmVudCBzdGF0ZSBub2RlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaWQgVGhlIGZpbmFsIHN0YXRlIG5vZGUncyBwYXJlbnQgc3RhdGUgbm9kZSBgaWRgXHJcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgaW50byB0aGUgZXZlbnRcclxuICovXG5cbmZ1bmN0aW9uIGRvbmUoaWQsIGRhdGEpIHtcbiAgdmFyIHR5cGUgPSBcIlwiLmNvbmNhdCh0eXBlcy5BY3Rpb25UeXBlcy5Eb25lU3RhdGUsIFwiLlwiKS5jb25jYXQoaWQpO1xuICB2YXIgZXZlbnRPYmplY3QgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhXG4gIH07XG5cbiAgZXZlbnRPYmplY3QudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH07XG5cbiAgcmV0dXJuIGV2ZW50T2JqZWN0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYW4gZXZlbnQgdGhhdCByZXByZXNlbnRzIHRoYXQgYW4gaW52b2tlZCBzZXJ2aWNlIGhhcyB0ZXJtaW5hdGVkLlxyXG4gKlxyXG4gKiBBbiBpbnZva2VkIHNlcnZpY2UgaXMgdGVybWluYXRlZCB3aGVuIGl0IGhhcyByZWFjaGVkIGEgdG9wLWxldmVsIGZpbmFsIHN0YXRlIG5vZGUsXHJcbiAqIGJ1dCBub3Qgd2hlbiBpdCBpcyBjYW5jZWxlZC5cclxuICpcclxuICogQHBhcmFtIGlkIFRoZSBmaW5hbCBzdGF0ZSBub2RlIElEXHJcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgaW50byB0aGUgZXZlbnRcclxuICovXG5cbmZ1bmN0aW9uIGRvbmVJbnZva2UoaWQsIGRhdGEpIHtcbiAgdmFyIHR5cGUgPSBcIlwiLmNvbmNhdCh0eXBlcy5BY3Rpb25UeXBlcy5Eb25lSW52b2tlLCBcIi5cIikuY29uY2F0KGlkKTtcbiAgdmFyIGV2ZW50T2JqZWN0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YVxuICB9O1xuXG4gIGV2ZW50T2JqZWN0LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlO1xuICB9O1xuXG4gIHJldHVybiBldmVudE9iamVjdDtcbn1cbmZ1bmN0aW9uIGVycm9yKGlkLCBkYXRhKSB7XG4gIHZhciB0eXBlID0gXCJcIi5jb25jYXQodHlwZXMuQWN0aW9uVHlwZXMuRXJyb3JQbGF0Zm9ybSwgXCIuXCIpLmNvbmNhdChpZCk7XG4gIHZhciBldmVudE9iamVjdCA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIGRhdGE6IGRhdGFcbiAgfTtcblxuICBldmVudE9iamVjdC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfTtcblxuICByZXR1cm4gZXZlbnRPYmplY3Q7XG59XG5mdW5jdGlvbiBwdXJlKGdldEFjdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlcy5BY3Rpb25UeXBlcy5QdXJlLFxuICAgIGdldDogZ2V0QWN0aW9uc1xuICB9O1xufVxuLyoqXHJcbiAqIEZvcndhcmRzIChzZW5kcykgYW4gZXZlbnQgdG8gYSBzcGVjaWZpZWQgc2VydmljZS5cclxuICpcclxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHNlcnZpY2UgdG8gZm9yd2FyZCB0aGUgZXZlbnQgdG8uXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBzZW5kIGFjdGlvbiBjcmVhdG9yLlxyXG4gKi9cblxuZnVuY3Rpb24gZm9yd2FyZFRvKHRhcmdldCwgb3B0aW9ucykge1xuICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04gJiYgKCF0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB2YXIgb3JpZ2luYWxUYXJnZXRfMSA9IHRhcmdldDtcblxuICAgIHRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW107XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc29sdmVkVGFyZ2V0ID0gdHlwZW9mIG9yaWdpbmFsVGFyZ2V0XzEgPT09ICdmdW5jdGlvbicgPyBvcmlnaW5hbFRhcmdldF8xLmFwcGx5KHZvaWQgMCwgX3RzbGliLl9fc3ByZWFkQXJyYXkoW10sIF90c2xpYi5fX3JlYWQoYXJncyksIGZhbHNlKSkgOiBvcmlnaW5hbFRhcmdldF8xO1xuXG4gICAgICBpZiAoIXJlc29sdmVkVGFyZ2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBmb3J3YXJkIGV2ZW50IHRvIHVuZGVmaW5lZCBhY3Rvci4gVGhpcyByaXNrcyBhbiBpbmZpbml0ZSBsb29wIGluIHRoZSBzZW5kZXIuXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzb2x2ZWRUYXJnZXQ7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBzZW5kKGZ1bmN0aW9uIChfLCBldmVudCkge1xuICAgIHJldHVybiBldmVudDtcbiAgfSwgX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyksIHtcbiAgICB0bzogdGFyZ2V0XG4gIH0pKTtcbn1cbi8qKlxyXG4gKiBFc2NhbGF0ZXMgYW4gZXJyb3IgYnkgc2VuZGluZyBpdCBhcyBhbiBldmVudCB0byB0aGlzIG1hY2hpbmUncyBwYXJlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBlcnJvckRhdGEgVGhlIGVycm9yIGRhdGEgdG8gc2VuZCwgb3IgdGhlIGV4cHJlc3Npb24gZnVuY3Rpb24gdGhhdFxyXG4gKiB0YWtlcyBpbiB0aGUgYGNvbnRleHRgLCBgZXZlbnRgLCBhbmQgYG1ldGFgLCBhbmQgcmV0dXJucyB0aGUgZXJyb3IgZGF0YSB0byBzZW5kLlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgaW50byB0aGUgc2VuZCBhY3Rpb24gY3JlYXRvci5cclxuICovXG5cbmZ1bmN0aW9uIGVzY2FsYXRlKGVycm9yRGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gc2VuZFBhcmVudChmdW5jdGlvbiAoY29udGV4dCwgZXZlbnQsIG1ldGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogYWN0aW9uVHlwZXMuZXJyb3IsXG4gICAgICBkYXRhOiB1dGlscy5pc0Z1bmN0aW9uKGVycm9yRGF0YSkgPyBlcnJvckRhdGEoY29udGV4dCwgZXZlbnQsIG1ldGEpIDogZXJyb3JEYXRhXG4gICAgfTtcbiAgfSwgX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyksIHtcbiAgICB0bzogdHlwZXMuU3BlY2lhbFRhcmdldHMuUGFyZW50XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGNob29zZShjb25kcykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGVzLkFjdGlvblR5cGVzLkNob29zZSxcbiAgICBjb25kczogY29uZHNcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVBY3Rpb25zKG1hY2hpbmUsIGN1cnJlbnRTdGF0ZSwgY3VycmVudENvbnRleHQsIF9ldmVudCwgYWN0aW9ucywgcHJlZGljdGFibGVFeGVjLCBwcmVzZXJ2ZUFjdGlvbk9yZGVyKSB7XG4gIGlmIChwcmVzZXJ2ZUFjdGlvbk9yZGVyID09PSB2b2lkIDApIHtcbiAgICBwcmVzZXJ2ZUFjdGlvbk9yZGVyID0gZmFsc2U7XG4gIH1cblxuICB2YXIgX2EgPSBfdHNsaWIuX19yZWFkKHByZXNlcnZlQWN0aW9uT3JkZXIgPyBbW10sIGFjdGlvbnNdIDogdXRpbHMucGFydGl0aW9uKGFjdGlvbnMsIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICByZXR1cm4gYWN0aW9uLnR5cGUgPT09IGFjdGlvblR5cGVzLmFzc2lnbjtcbiAgfSksIDIpLFxuICAgICAgYXNzaWduQWN0aW9ucyA9IF9hWzBdLFxuICAgICAgb3RoZXJBY3Rpb25zID0gX2FbMV07XG5cbiAgdmFyIHVwZGF0ZWRDb250ZXh0ID0gYXNzaWduQWN0aW9ucy5sZW5ndGggPyB1dGlscy51cGRhdGVDb250ZXh0KGN1cnJlbnRDb250ZXh0LCBfZXZlbnQsIGFzc2lnbkFjdGlvbnMsIGN1cnJlbnRTdGF0ZSkgOiBjdXJyZW50Q29udGV4dDtcbiAgdmFyIHByZXNlcnZlZENvbnRleHRzID0gcHJlc2VydmVBY3Rpb25PcmRlciA/IFtjdXJyZW50Q29udGV4dF0gOiB1bmRlZmluZWQ7XG4gIHZhciByZXNvbHZlZEFjdGlvbnMgPSB1dGlscy5mbGF0dGVuKG90aGVyQWN0aW9ucy5tYXAoZnVuY3Rpb24gKGFjdGlvbk9iamVjdCkge1xuICAgIHZhciBfYTtcblxuICAgIHN3aXRjaCAoYWN0aW9uT2JqZWN0LnR5cGUpIHtcbiAgICAgIGNhc2UgYWN0aW9uVHlwZXMucmFpc2U6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZVJhaXNlKGFjdGlvbk9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBhY3Rpb25UeXBlcy5zZW5kOlxuICAgICAgICB2YXIgc2VuZEFjdGlvbiA9IHJlc29sdmVTZW5kKGFjdGlvbk9iamVjdCwgdXBkYXRlZENvbnRleHQsIF9ldmVudCwgbWFjaGluZS5vcHRpb25zLmRlbGF5cyk7IC8vIFRPRE86IGZpeCBBY3Rpb25UeXBlcy5Jbml0XG5cbiAgICAgICAgaWYgKCFlbnZpcm9ubWVudC5JU19QUk9EVUNUSU9OKSB7XG4gICAgICAgICAgLy8gd2FybiBhZnRlciByZXNvbHZpbmcgYXMgd2UgY2FuIGNyZWF0ZSBiZXR0ZXIgY29udGV4dHVhbCBtZXNzYWdlIGhlcmVcbiAgICAgICAgICB1dGlscy53YXJuKCF1dGlscy5pc1N0cmluZyhhY3Rpb25PYmplY3QuZGVsYXkpIHx8IHR5cGVvZiBzZW5kQWN0aW9uLmRlbGF5ID09PSAnbnVtYmVyJywgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgICAgIFwiTm8gZGVsYXkgcmVmZXJlbmNlIGZvciBkZWxheSBleHByZXNzaW9uICdcIi5jb25jYXQoYWN0aW9uT2JqZWN0LmRlbGF5LCBcIicgd2FzIGZvdW5kIG9uIG1hY2hpbmUgJ1wiKS5jb25jYXQobWFjaGluZS5pZCwgXCInXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZW5kQWN0aW9uLnRvICE9PSB0eXBlcy5TcGVjaWFsVGFyZ2V0cy5JbnRlcm5hbCkge1xuICAgICAgICAgIHByZWRpY3RhYmxlRXhlYyA9PT0gbnVsbCB8fCBwcmVkaWN0YWJsZUV4ZWMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZWRpY3RhYmxlRXhlYyhzZW5kQWN0aW9uLCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZW5kQWN0aW9uO1xuXG4gICAgICBjYXNlIGFjdGlvblR5cGVzLmxvZzpcbiAgICAgICAge1xuICAgICAgICAgIHZhciByZXNvbHZlZCA9IHJlc29sdmVMb2coYWN0aW9uT2JqZWN0LCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50KTtcbiAgICAgICAgICBwcmVkaWN0YWJsZUV4ZWMgPT09IG51bGwgfHwgcHJlZGljdGFibGVFeGVjID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmVkaWN0YWJsZUV4ZWMocmVzb2x2ZWQsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIGFjdGlvblR5cGVzLmNob29zZTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBjaG9vc2VBY3Rpb24gPSBhY3Rpb25PYmplY3Q7XG4gICAgICAgICAgdmFyIG1hdGNoZWRBY3Rpb25zID0gKF9hID0gY2hvb3NlQWN0aW9uLmNvbmRzLmZpbmQoZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgICAgICAgICAgdmFyIGd1YXJkID0gdXRpbHMudG9HdWFyZChjb25kaXRpb24uY29uZCwgbWFjaGluZS5vcHRpb25zLmd1YXJkcyk7XG4gICAgICAgICAgICByZXR1cm4gIWd1YXJkIHx8IHV0aWxzLmV2YWx1YXRlR3VhcmQobWFjaGluZSwgZ3VhcmQsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQsICFwcmVkaWN0YWJsZUV4ZWMgPyBjdXJyZW50U3RhdGUgOiB1bmRlZmluZWQpO1xuICAgICAgICAgIH0pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWN0aW9ucztcblxuICAgICAgICAgIGlmICghbWF0Y2hlZEFjdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2IgPSBfdHNsaWIuX19yZWFkKHJlc29sdmVBY3Rpb25zKG1hY2hpbmUsIGN1cnJlbnRTdGF0ZSwgdXBkYXRlZENvbnRleHQsIF9ldmVudCwgdG9BY3Rpb25PYmplY3RzKHV0aWxzLnRvQXJyYXkobWF0Y2hlZEFjdGlvbnMpLCBtYWNoaW5lLm9wdGlvbnMuYWN0aW9ucyksIHByZWRpY3RhYmxlRXhlYywgcHJlc2VydmVBY3Rpb25PcmRlciksIDIpLFxuICAgICAgICAgICAgICByZXNvbHZlZEFjdGlvbnNGcm9tQ2hvb3NlID0gX2JbMF0sXG4gICAgICAgICAgICAgIHJlc29sdmVkQ29udGV4dEZyb21DaG9vc2UgPSBfYlsxXTtcblxuICAgICAgICAgIHVwZGF0ZWRDb250ZXh0ID0gcmVzb2x2ZWRDb250ZXh0RnJvbUNob29zZTtcbiAgICAgICAgICBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gbnVsbCB8fCBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VydmVkQ29udGV4dHMucHVzaCh1cGRhdGVkQ29udGV4dCk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVkQWN0aW9uc0Zyb21DaG9vc2U7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBhY3Rpb25UeXBlcy5wdXJlOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIG1hdGNoZWRBY3Rpb25zID0gYWN0aW9uT2JqZWN0LmdldCh1cGRhdGVkQ29udGV4dCwgX2V2ZW50LmRhdGEpO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVkQWN0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfYyA9IF90c2xpYi5fX3JlYWQocmVzb2x2ZUFjdGlvbnMobWFjaGluZSwgY3VycmVudFN0YXRlLCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50LCB0b0FjdGlvbk9iamVjdHModXRpbHMudG9BcnJheShtYXRjaGVkQWN0aW9ucyksIG1hY2hpbmUub3B0aW9ucy5hY3Rpb25zKSwgcHJlZGljdGFibGVFeGVjLCBwcmVzZXJ2ZUFjdGlvbk9yZGVyKSwgMiksXG4gICAgICAgICAgICAgIHJlc29sdmVkQWN0aW9uc0Zyb21QdXJlID0gX2NbMF0sXG4gICAgICAgICAgICAgIHJlc29sdmVkQ29udGV4dCA9IF9jWzFdO1xuXG4gICAgICAgICAgdXBkYXRlZENvbnRleHQgPSByZXNvbHZlZENvbnRleHQ7XG4gICAgICAgICAgcHJlc2VydmVkQ29udGV4dHMgPT09IG51bGwgfHwgcHJlc2VydmVkQ29udGV4dHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlcnZlZENvbnRleHRzLnB1c2godXBkYXRlZENvbnRleHQpO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlZEFjdGlvbnNGcm9tUHVyZTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIGFjdGlvblR5cGVzLnN0b3A6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlU3RvcChhY3Rpb25PYmplY3QsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgICAgIHByZWRpY3RhYmxlRXhlYyA9PT0gbnVsbCB8fCBwcmVkaWN0YWJsZUV4ZWMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZWRpY3RhYmxlRXhlYyhyZXNvbHZlZCwgdXBkYXRlZENvbnRleHQsIF9ldmVudCk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgYWN0aW9uVHlwZXMuYXNzaWduOlxuICAgICAgICB7XG4gICAgICAgICAgdXBkYXRlZENvbnRleHQgPSB1dGlscy51cGRhdGVDb250ZXh0KHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQsIFthY3Rpb25PYmplY3RdLCAhcHJlZGljdGFibGVFeGVjID8gY3VycmVudFN0YXRlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gbnVsbCB8fCBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VydmVkQ29udGV4dHMucHVzaCh1cGRhdGVkQ29udGV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHJlc29sdmVkQWN0aW9uT2JqZWN0ID0gdG9BY3Rpb25PYmplY3QoYWN0aW9uT2JqZWN0LCBtYWNoaW5lLm9wdGlvbnMuYWN0aW9ucyk7XG4gICAgICAgIHZhciBleGVjXzEgPSByZXNvbHZlZEFjdGlvbk9iamVjdC5leGVjO1xuXG4gICAgICAgIGlmIChwcmVkaWN0YWJsZUV4ZWMpIHtcbiAgICAgICAgICBwcmVkaWN0YWJsZUV4ZWMocmVzb2x2ZWRBY3Rpb25PYmplY3QsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4ZWNfMSAmJiBwcmVzZXJ2ZWRDb250ZXh0cykge1xuICAgICAgICAgIHZhciBjb250ZXh0SW5kZXhfMSA9IHByZXNlcnZlZENvbnRleHRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgcmVzb2x2ZWRBY3Rpb25PYmplY3QgPSBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHt9LCByZXNvbHZlZEFjdGlvbk9iamVjdCksIHtcbiAgICAgICAgICAgIGV4ZWM6IGZ1bmN0aW9uIChfY3R4KSB7XG4gICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZXhlY18xLmFwcGx5KHZvaWQgMCwgX3RzbGliLl9fc3ByZWFkQXJyYXkoW3ByZXNlcnZlZENvbnRleHRzW2NvbnRleHRJbmRleF8xXV0sIF90c2xpYi5fX3JlYWQoYXJncyksIGZhbHNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzb2x2ZWRBY3Rpb25PYmplY3Q7XG4gICAgfVxuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gISFhO1xuICB9KSk7XG4gIHJldHVybiBbcmVzb2x2ZWRBY3Rpb25zLCB1cGRhdGVkQ29udGV4dF07XG59XG5cbmV4cG9ydHMuYWN0aW9uVHlwZXMgPSBhY3Rpb25UeXBlcztcbmV4cG9ydHMuYWZ0ZXIgPSBhZnRlcjtcbmV4cG9ydHMuYXNzaWduID0gYXNzaWduO1xuZXhwb3J0cy5jYW5jZWwgPSBjYW5jZWw7XG5leHBvcnRzLmNob29zZSA9IGNob29zZTtcbmV4cG9ydHMuZG9uZSA9IGRvbmU7XG5leHBvcnRzLmRvbmVJbnZva2UgPSBkb25lSW52b2tlO1xuZXhwb3J0cy5lcnJvciA9IGVycm9yO1xuZXhwb3J0cy5lc2NhbGF0ZSA9IGVzY2FsYXRlO1xuZXhwb3J0cy5mb3J3YXJkVG8gPSBmb3J3YXJkVG87XG5leHBvcnRzLmdldEFjdGlvbkZ1bmN0aW9uID0gZ2V0QWN0aW9uRnVuY3Rpb247XG5leHBvcnRzLmluaXRFdmVudCA9IGluaXRFdmVudDtcbmV4cG9ydHMuaXNBY3Rpb25PYmplY3QgPSBpc0FjdGlvbk9iamVjdDtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5wdXJlID0gcHVyZTtcbmV4cG9ydHMucmFpc2UgPSByYWlzZTtcbmV4cG9ydHMucmVzb2x2ZUFjdGlvbnMgPSByZXNvbHZlQWN0aW9ucztcbmV4cG9ydHMucmVzb2x2ZUxvZyA9IHJlc29sdmVMb2c7XG5leHBvcnRzLnJlc29sdmVSYWlzZSA9IHJlc29sdmVSYWlzZTtcbmV4cG9ydHMucmVzb2x2ZVNlbmQgPSByZXNvbHZlU2VuZDtcbmV4cG9ydHMucmVzb2x2ZVN0b3AgPSByZXNvbHZlU3RvcDtcbmV4cG9ydHMucmVzcG9uZCA9IHJlc3BvbmQ7XG5leHBvcnRzLnNlbmQgPSBzZW5kO1xuZXhwb3J0cy5zZW5kUGFyZW50ID0gc2VuZFBhcmVudDtcbmV4cG9ydHMuc2VuZFRvID0gc2VuZFRvO1xuZXhwb3J0cy5zZW5kVXBkYXRlID0gc2VuZFVwZGF0ZTtcbmV4cG9ydHMuc3RhcnQgPSBzdGFydDtcbmV4cG9ydHMuc3RvcCA9IHN0b3A7XG5leHBvcnRzLnRvQWN0aW9uT2JqZWN0ID0gdG9BY3Rpb25PYmplY3Q7XG5leHBvcnRzLnRvQWN0aW9uT2JqZWN0cyA9IHRvQWN0aW9uT2JqZWN0cztcbmV4cG9ydHMudG9BY3Rpdml0eURlZmluaXRpb24gPSB0b0FjdGl2aXR5RGVmaW5pdGlvbjtcbiIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxyXG4gKiBNYWludGFpbnMgYSBzdGFjayBvZiB0aGUgY3VycmVudCBzZXJ2aWNlIGluIHNjb3BlLlxyXG4gKiBUaGlzIGlzIHVzZWQgdG8gcHJvdmlkZSB0aGUgY29ycmVjdCBzZXJ2aWNlIHRvIHNwYXduKCkuXHJcbiAqL1xudmFyIHNlcnZpY2VTdGFjayA9IFtdO1xudmFyIHByb3ZpZGUgPSBmdW5jdGlvbiAoc2VydmljZSwgZm4pIHtcbiAgc2VydmljZVN0YWNrLnB1c2goc2VydmljZSk7XG4gIHZhciByZXN1bHQgPSBmbihzZXJ2aWNlKTtcbiAgc2VydmljZVN0YWNrLnBvcCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBjb25zdW1lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbihzZXJ2aWNlU3RhY2tbc2VydmljZVN0YWNrLmxlbmd0aCAtIDFdKTtcbn07XG5cbmV4cG9ydHMuY29uc3VtZSA9IGNvbnN1bWU7XG5leHBvcnRzLnByb3ZpZGUgPSBwcm92aWRlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIF90c2xpYiA9IHJlcXVpcmUoJy4vX3ZpcnR1YWwvX3RzbGliLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG52YXIgc2VydmljZVNjb3BlID0gcmVxdWlyZSgnLi9zZXJ2aWNlU2NvcGUuanMnKTtcblxuZnVuY3Rpb24gY3JlYXRlTnVsbEFjdG9yKGlkKSB7XG4gIHZhciBfYTtcblxuICByZXR1cm4gX2EgPSB7XG4gICAgaWQ6IGlkLFxuICAgIHNlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldFNuYXBzaG90OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWRcbiAgICAgIH07XG4gICAgfVxuICB9LCBfYVt1dGlscy5zeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSwgX2E7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIGRlZmVycmVkIGFjdG9yIHRoYXQgaXMgYWJsZSB0byBiZSBpbnZva2VkIGdpdmVuIHRoZSBwcm92aWRlZFxyXG4gKiBpbnZvY2F0aW9uIGluZm9ybWF0aW9uIGluIGl0cyBgLm1ldGFgIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW52b2tlRGVmaW5pdGlvbiBUaGUgbWV0YSBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gaW52b2tlIHRoZSBhY3Rvci5cclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUludm9jYWJsZUFjdG9yKGludm9rZURlZmluaXRpb24sIG1hY2hpbmUsIGNvbnRleHQsIF9ldmVudCkge1xuICB2YXIgX2E7XG5cbiAgdmFyIGludm9rZVNyYyA9IHV0aWxzLnRvSW52b2tlU291cmNlKGludm9rZURlZmluaXRpb24uc3JjKTtcbiAgdmFyIHNlcnZpY2VDcmVhdG9yID0gKF9hID0gbWFjaGluZSA9PT0gbnVsbCB8fCBtYWNoaW5lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYWNoaW5lLm9wdGlvbnMuc2VydmljZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtpbnZva2VTcmMudHlwZV07XG4gIHZhciByZXNvbHZlZERhdGEgPSBpbnZva2VEZWZpbml0aW9uLmRhdGEgPyB1dGlscy5tYXBDb250ZXh0KGludm9rZURlZmluaXRpb24uZGF0YSwgY29udGV4dCwgX2V2ZW50KSA6IHVuZGVmaW5lZDtcbiAgdmFyIHRlbXBBY3RvciA9IHNlcnZpY2VDcmVhdG9yID8gY3JlYXRlRGVmZXJyZWRBY3RvcihzZXJ2aWNlQ3JlYXRvciwgaW52b2tlRGVmaW5pdGlvbi5pZCwgcmVzb2x2ZWREYXRhKSA6IGNyZWF0ZU51bGxBY3RvcihpbnZva2VEZWZpbml0aW9uLmlkKTsgLy8gQHRzLWlnbm9yZVxuXG4gIHRlbXBBY3Rvci5tZXRhID0gaW52b2tlRGVmaW5pdGlvbjtcbiAgcmV0dXJuIHRlbXBBY3Rvcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlZmVycmVkQWN0b3IoZW50aXR5LCBpZCwgZGF0YSkge1xuICB2YXIgdGVtcEFjdG9yID0gY3JlYXRlTnVsbEFjdG9yKGlkKTsgLy8gQHRzLWlnbm9yZVxuXG4gIHRlbXBBY3Rvci5kZWZlcnJlZCA9IHRydWU7XG5cbiAgaWYgKHV0aWxzLmlzTWFjaGluZShlbnRpdHkpKSB7XG4gICAgLy8gXCJtdXRlXCIgdGhlIGV4aXN0aW5nIHNlcnZpY2Ugc2NvcGUgc28gcG90ZW50aWFsIHNwYXduZWQgYWN0b3JzIHdpdGhpbiB0aGUgYC5pbml0aWFsU3RhdGVgIHN0YXkgZGVmZXJyZWQgaGVyZVxuICAgIHZhciBpbml0aWFsU3RhdGVfMSA9IHRlbXBBY3Rvci5zdGF0ZSA9IHNlcnZpY2VTY29wZS5wcm92aWRlKHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChkYXRhID8gZW50aXR5LndpdGhDb250ZXh0KGRhdGEpIDogZW50aXR5KS5pbml0aWFsU3RhdGU7XG4gICAgfSk7XG5cbiAgICB0ZW1wQWN0b3IuZ2V0U25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaW5pdGlhbFN0YXRlXzE7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB0ZW1wQWN0b3I7XG59XG5mdW5jdGlvbiBpc0FjdG9yKGl0ZW0pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ZW0uc2VuZCA9PT0gJ2Z1bmN0aW9uJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTcGF3bmVkQWN0b3IoaXRlbSkge1xuICByZXR1cm4gaXNBY3RvcihpdGVtKSAmJiAnaWQnIGluIGl0ZW07XG59IC8vIFRPRE86IHJlZmFjdG9yIHRoZSByZXR1cm4gdHlwZSwgdGhpcyBjb3VsZCBiZSB3cml0dGVuIGluIGEgYmV0dGVyIHdheSBidXQgaXQncyBiZXN0IHRvIGF2b2lkIHVubmVjY2Vzc2FyeSBicmVha2luZyBjaGFuZ2VzIG5vd1xuXG5mdW5jdGlvbiB0b0FjdG9yUmVmKGFjdG9yUmVmTGlrZSkge1xuICB2YXIgX2E7XG5cbiAgcmV0dXJuIF90c2xpYi5fX2Fzc2lnbigoX2EgPSB7XG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBpZDogJ2Fub255bW91cycsXG4gICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LCBfYVt1dGlscy5zeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSwgX2EpLCBhY3RvclJlZkxpa2UpO1xufVxuXG5leHBvcnRzLmNyZWF0ZURlZmVycmVkQWN0b3IgPSBjcmVhdGVEZWZlcnJlZEFjdG9yO1xuZXhwb3J0cy5jcmVhdGVJbnZvY2FibGVBY3RvciA9IGNyZWF0ZUludm9jYWJsZUFjdG9yO1xuZXhwb3J0cy5jcmVhdGVOdWxsQWN0b3IgPSBjcmVhdGVOdWxsQWN0b3I7XG5leHBvcnRzLmlzQWN0b3IgPSBpc0FjdG9yO1xuZXhwb3J0cy5pc1NwYXduZWRBY3RvciA9IGlzU3Bhd25lZEFjdG9yO1xuZXhwb3J0cy50b0FjdG9yUmVmID0gdG9BY3RvclJlZjtcbiIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBfdHNsaWIgPSByZXF1aXJlKCcuL192aXJ0dWFsL190c2xpYi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5qcycpO1xuXG52YXIgaXNMZWFmTm9kZSA9IGZ1bmN0aW9uIChzdGF0ZU5vZGUpIHtcbiAgcmV0dXJuIHN0YXRlTm9kZS50eXBlID09PSAnYXRvbWljJyB8fCBzdGF0ZU5vZGUudHlwZSA9PT0gJ2ZpbmFsJztcbn07XG5mdW5jdGlvbiBnZXRBbGxDaGlsZHJlbihzdGF0ZU5vZGUpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHN0YXRlTm9kZS5zdGF0ZXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHN0YXRlTm9kZS5zdGF0ZXNba2V5XTtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRDaGlsZHJlbihzdGF0ZU5vZGUpIHtcbiAgcmV0dXJuIGdldEFsbENoaWxkcmVuKHN0YXRlTm9kZSkuZmlsdGVyKGZ1bmN0aW9uIChzbikge1xuICAgIHJldHVybiBzbi50eXBlICE9PSAnaGlzdG9yeSc7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0QWxsU3RhdGVOb2RlcyhzdGF0ZU5vZGUpIHtcbiAgdmFyIHN0YXRlTm9kZXMgPSBbc3RhdGVOb2RlXTtcblxuICBpZiAoaXNMZWFmTm9kZShzdGF0ZU5vZGUpKSB7XG4gICAgcmV0dXJuIHN0YXRlTm9kZXM7XG4gIH1cblxuICByZXR1cm4gc3RhdGVOb2Rlcy5jb25jYXQodXRpbHMuZmxhdHRlbihnZXRDaGlsZHJlbihzdGF0ZU5vZGUpLm1hcChnZXRBbGxTdGF0ZU5vZGVzKSkpO1xufVxuZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvbihwcmV2U3RhdGVOb2Rlcywgc3RhdGVOb2Rlcykge1xuICB2YXIgZV8xLCBfYSwgZV8yLCBfYiwgZV8zLCBfYywgZV80LCBfZDtcblxuICB2YXIgcHJldkNvbmZpZ3VyYXRpb24gPSBuZXcgU2V0KHByZXZTdGF0ZU5vZGVzKTtcbiAgdmFyIHByZXZBZGpMaXN0ID0gZ2V0QWRqTGlzdChwcmV2Q29uZmlndXJhdGlvbik7XG4gIHZhciBjb25maWd1cmF0aW9uID0gbmV3IFNldChzdGF0ZU5vZGVzKTtcblxuICB0cnkge1xuICAgIC8vIGFkZCBhbGwgYW5jZXN0b3JzXG4gICAgZm9yICh2YXIgY29uZmlndXJhdGlvbl8xID0gX3RzbGliLl9fdmFsdWVzKGNvbmZpZ3VyYXRpb24pLCBjb25maWd1cmF0aW9uXzFfMSA9IGNvbmZpZ3VyYXRpb25fMS5uZXh0KCk7ICFjb25maWd1cmF0aW9uXzFfMS5kb25lOyBjb25maWd1cmF0aW9uXzFfMSA9IGNvbmZpZ3VyYXRpb25fMS5uZXh0KCkpIHtcbiAgICAgIHZhciBzID0gY29uZmlndXJhdGlvbl8xXzEudmFsdWU7XG4gICAgICB2YXIgbSA9IHMucGFyZW50O1xuXG4gICAgICB3aGlsZSAobSAmJiAhY29uZmlndXJhdGlvbi5oYXMobSkpIHtcbiAgICAgICAgY29uZmlndXJhdGlvbi5hZGQobSk7XG4gICAgICAgIG0gPSBtLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVfMV8xKSB7XG4gICAgZV8xID0ge1xuICAgICAgZXJyb3I6IGVfMV8xXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGNvbmZpZ3VyYXRpb25fMV8xICYmICFjb25maWd1cmF0aW9uXzFfMS5kb25lICYmIChfYSA9IGNvbmZpZ3VyYXRpb25fMS5yZXR1cm4pKSBfYS5jYWxsKGNvbmZpZ3VyYXRpb25fMSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjtcbiAgICB9XG4gIH1cblxuICB2YXIgYWRqTGlzdCA9IGdldEFkakxpc3QoY29uZmlndXJhdGlvbik7XG5cbiAgdHJ5IHtcbiAgICAvLyBhZGQgZGVzY2VuZGFudHNcbiAgICBmb3IgKHZhciBjb25maWd1cmF0aW9uXzIgPSBfdHNsaWIuX192YWx1ZXMoY29uZmlndXJhdGlvbiksIGNvbmZpZ3VyYXRpb25fMl8xID0gY29uZmlndXJhdGlvbl8yLm5leHQoKTsgIWNvbmZpZ3VyYXRpb25fMl8xLmRvbmU7IGNvbmZpZ3VyYXRpb25fMl8xID0gY29uZmlndXJhdGlvbl8yLm5leHQoKSkge1xuICAgICAgdmFyIHMgPSBjb25maWd1cmF0aW9uXzJfMS52YWx1ZTsgLy8gaWYgcHJldmlvdXNseSBhY3RpdmUsIGFkZCBleGlzdGluZyBjaGlsZCBub2Rlc1xuXG4gICAgICBpZiAocy50eXBlID09PSAnY29tcG91bmQnICYmICghYWRqTGlzdC5nZXQocykgfHwgIWFkakxpc3QuZ2V0KHMpLmxlbmd0aCkpIHtcbiAgICAgICAgaWYgKHByZXZBZGpMaXN0LmdldChzKSkge1xuICAgICAgICAgIHByZXZBZGpMaXN0LmdldChzKS5mb3JFYWNoKGZ1bmN0aW9uIChzbikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb24uYWRkKHNuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzLmluaXRpYWxTdGF0ZU5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHNuKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlndXJhdGlvbi5hZGQoc24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocy50eXBlID09PSAncGFyYWxsZWwnKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9lID0gKGVfMyA9IHZvaWQgMCwgX3RzbGliLl9fdmFsdWVzKGdldENoaWxkcmVuKHMpKSksIF9mID0gX2UubmV4dCgpOyAhX2YuZG9uZTsgX2YgPSBfZS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgdmFyIGNoaWxkID0gX2YudmFsdWU7XG5cbiAgICAgICAgICAgICAgaWYgKCFjb25maWd1cmF0aW9uLmhhcyhjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmFkZChjaGlsZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldkFkakxpc3QuZ2V0KGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgcHJldkFkakxpc3QuZ2V0KGNoaWxkKS5mb3JFYWNoKGZ1bmN0aW9uIChzbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlndXJhdGlvbi5hZGQoc24pO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNoaWxkLmluaXRpYWxTdGF0ZU5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHNuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uLmFkZChzbik7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlXzNfMSkge1xuICAgICAgICAgICAgZV8zID0ge1xuICAgICAgICAgICAgICBlcnJvcjogZV8zXzFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmIChfZiAmJiAhX2YuZG9uZSAmJiAoX2MgPSBfZS5yZXR1cm4pKSBfYy5jYWxsKF9lKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIGlmIChlXzMpIHRocm93IGVfMy5lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVfMl8xKSB7XG4gICAgZV8yID0ge1xuICAgICAgZXJyb3I6IGVfMl8xXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGNvbmZpZ3VyYXRpb25fMl8xICYmICFjb25maWd1cmF0aW9uXzJfMS5kb25lICYmIChfYiA9IGNvbmZpZ3VyYXRpb25fMi5yZXR1cm4pKSBfYi5jYWxsKGNvbmZpZ3VyYXRpb25fMik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIC8vIGFkZCBhbGwgYW5jZXN0b3JzXG4gICAgZm9yICh2YXIgY29uZmlndXJhdGlvbl8zID0gX3RzbGliLl9fdmFsdWVzKGNvbmZpZ3VyYXRpb24pLCBjb25maWd1cmF0aW9uXzNfMSA9IGNvbmZpZ3VyYXRpb25fMy5uZXh0KCk7ICFjb25maWd1cmF0aW9uXzNfMS5kb25lOyBjb25maWd1cmF0aW9uXzNfMSA9IGNvbmZpZ3VyYXRpb25fMy5uZXh0KCkpIHtcbiAgICAgIHZhciBzID0gY29uZmlndXJhdGlvbl8zXzEudmFsdWU7XG4gICAgICB2YXIgbSA9IHMucGFyZW50O1xuXG4gICAgICB3aGlsZSAobSAmJiAhY29uZmlndXJhdGlvbi5oYXMobSkpIHtcbiAgICAgICAgY29uZmlndXJhdGlvbi5hZGQobSk7XG4gICAgICAgIG0gPSBtLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVfNF8xKSB7XG4gICAgZV80ID0ge1xuICAgICAgZXJyb3I6IGVfNF8xXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGNvbmZpZ3VyYXRpb25fM18xICYmICFjb25maWd1cmF0aW9uXzNfMS5kb25lICYmIChfZCA9IGNvbmZpZ3VyYXRpb25fMy5yZXR1cm4pKSBfZC5jYWxsKGNvbmZpZ3VyYXRpb25fMyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlndXJhdGlvbjtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVGcm9tQWRqKGJhc2VOb2RlLCBhZGpMaXN0KSB7XG4gIHZhciBjaGlsZFN0YXRlTm9kZXMgPSBhZGpMaXN0LmdldChiYXNlTm9kZSk7XG5cbiAgaWYgKCFjaGlsZFN0YXRlTm9kZXMpIHtcbiAgICByZXR1cm4ge307IC8vIHRvZG86IGZpeD9cbiAgfVxuXG4gIGlmIChiYXNlTm9kZS50eXBlID09PSAnY29tcG91bmQnKSB7XG4gICAgdmFyIGNoaWxkU3RhdGVOb2RlID0gY2hpbGRTdGF0ZU5vZGVzWzBdO1xuXG4gICAgaWYgKGNoaWxkU3RhdGVOb2RlKSB7XG4gICAgICBpZiAoaXNMZWFmTm9kZShjaGlsZFN0YXRlTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkU3RhdGVOb2RlLmtleTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdGF0ZVZhbHVlID0ge307XG4gIGNoaWxkU3RhdGVOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChjc24pIHtcbiAgICBzdGF0ZVZhbHVlW2Nzbi5rZXldID0gZ2V0VmFsdWVGcm9tQWRqKGNzbiwgYWRqTGlzdCk7XG4gIH0pO1xuICByZXR1cm4gc3RhdGVWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0QWRqTGlzdChjb25maWd1cmF0aW9uKSB7XG4gIHZhciBlXzUsIF9hO1xuXG4gIHZhciBhZGpMaXN0ID0gbmV3IE1hcCgpO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgY29uZmlndXJhdGlvbl80ID0gX3RzbGliLl9fdmFsdWVzKGNvbmZpZ3VyYXRpb24pLCBjb25maWd1cmF0aW9uXzRfMSA9IGNvbmZpZ3VyYXRpb25fNC5uZXh0KCk7ICFjb25maWd1cmF0aW9uXzRfMS5kb25lOyBjb25maWd1cmF0aW9uXzRfMSA9IGNvbmZpZ3VyYXRpb25fNC5uZXh0KCkpIHtcbiAgICAgIHZhciBzID0gY29uZmlndXJhdGlvbl80XzEudmFsdWU7XG5cbiAgICAgIGlmICghYWRqTGlzdC5oYXMocykpIHtcbiAgICAgICAgYWRqTGlzdC5zZXQocywgW10pO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5wYXJlbnQpIHtcbiAgICAgICAgaWYgKCFhZGpMaXN0LmhhcyhzLnBhcmVudCkpIHtcbiAgICAgICAgICBhZGpMaXN0LnNldChzLnBhcmVudCwgW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgYWRqTGlzdC5nZXQocy5wYXJlbnQpLnB1c2gocyk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlXzVfMSkge1xuICAgIGVfNSA9IHtcbiAgICAgIGVycm9yOiBlXzVfMVxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChjb25maWd1cmF0aW9uXzRfMSAmJiAhY29uZmlndXJhdGlvbl80XzEuZG9uZSAmJiAoX2EgPSBjb25maWd1cmF0aW9uXzQucmV0dXJuKSkgX2EuY2FsbChjb25maWd1cmF0aW9uXzQpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoZV81KSB0aHJvdyBlXzUuZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFkakxpc3Q7XG59XG5mdW5jdGlvbiBnZXRWYWx1ZShyb290Tm9kZSwgY29uZmlndXJhdGlvbikge1xuICB2YXIgY29uZmlnID0gZ2V0Q29uZmlndXJhdGlvbihbcm9vdE5vZGVdLCBjb25maWd1cmF0aW9uKTtcbiAgcmV0dXJuIGdldFZhbHVlRnJvbUFkaihyb290Tm9kZSwgZ2V0QWRqTGlzdChjb25maWcpKTtcbn1cbmZ1bmN0aW9uIGhhcyhpdGVyYWJsZSwgaXRlbSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShpdGVyYWJsZSkpIHtcbiAgICByZXR1cm4gaXRlcmFibGUuc29tZShmdW5jdGlvbiAobWVtYmVyKSB7XG4gICAgICByZXR1cm4gbWVtYmVyID09PSBpdGVtO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGl0ZXJhYmxlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgcmV0dXJuIGl0ZXJhYmxlLmhhcyhpdGVtKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTsgLy8gVE9ETzogZml4XG59XG5mdW5jdGlvbiBuZXh0RXZlbnRzKGNvbmZpZ3VyYXRpb24pIHtcbiAgcmV0dXJuIF90c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBfdHNsaWIuX19yZWFkKG5ldyBTZXQodXRpbHMuZmxhdHRlbihfdHNsaWIuX19zcHJlYWRBcnJheShbXSwgX3RzbGliLl9fcmVhZChjb25maWd1cmF0aW9uLm1hcChmdW5jdGlvbiAoc24pIHtcbiAgICByZXR1cm4gc24ub3duRXZlbnRzO1xuICB9KSksIGZhbHNlKSkpKSwgZmFsc2UpO1xufVxuZnVuY3Rpb24gaXNJbkZpbmFsU3RhdGUoY29uZmlndXJhdGlvbiwgc3RhdGVOb2RlKSB7XG4gIGlmIChzdGF0ZU5vZGUudHlwZSA9PT0gJ2NvbXBvdW5kJykge1xuICAgIHJldHVybiBnZXRDaGlsZHJlbihzdGF0ZU5vZGUpLnNvbWUoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLnR5cGUgPT09ICdmaW5hbCcgJiYgaGFzKGNvbmZpZ3VyYXRpb24sIHMpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHN0YXRlTm9kZS50eXBlID09PSAncGFyYWxsZWwnKSB7XG4gICAgcmV0dXJuIGdldENoaWxkcmVuKHN0YXRlTm9kZSkuZXZlcnkoZnVuY3Rpb24gKHNuKSB7XG4gICAgICByZXR1cm4gaXNJbkZpbmFsU3RhdGUoY29uZmlndXJhdGlvbiwgc24pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZ2V0TWV0YShjb25maWd1cmF0aW9uKSB7XG4gIGlmIChjb25maWd1cmF0aW9uID09PSB2b2lkIDApIHtcbiAgICBjb25maWd1cmF0aW9uID0gW107XG4gIH1cblxuICByZXR1cm4gY29uZmlndXJhdGlvbi5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3RhdGVOb2RlKSB7XG4gICAgaWYgKHN0YXRlTm9kZS5tZXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFjY1tzdGF0ZU5vZGUuaWRdID0gc3RhdGVOb2RlLm1ldGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZnVuY3Rpb24gZ2V0VGFnc0Zyb21Db25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgcmV0dXJuIG5ldyBTZXQodXRpbHMuZmxhdHRlbihjb25maWd1cmF0aW9uLm1hcChmdW5jdGlvbiAoc24pIHtcbiAgICByZXR1cm4gc24udGFncztcbiAgfSkpKTtcbn1cblxuZXhwb3J0cy5nZXRBZGpMaXN0ID0gZ2V0QWRqTGlzdDtcbmV4cG9ydHMuZ2V0QWxsQ2hpbGRyZW4gPSBnZXRBbGxDaGlsZHJlbjtcbmV4cG9ydHMuZ2V0QWxsU3RhdGVOb2RlcyA9IGdldEFsbFN0YXRlTm9kZXM7XG5leHBvcnRzLmdldENoaWxkcmVuID0gZ2V0Q2hpbGRyZW47XG5leHBvcnRzLmdldENvbmZpZ3VyYXRpb24gPSBnZXRDb25maWd1cmF0aW9uO1xuZXhwb3J0cy5nZXRNZXRhID0gZ2V0TWV0YTtcbmV4cG9ydHMuZ2V0VGFnc0Zyb21Db25maWd1cmF0aW9uID0gZ2V0VGFnc0Zyb21Db25maWd1cmF0aW9uO1xuZXhwb3J0cy5nZXRWYWx1ZSA9IGdldFZhbHVlO1xuZXhwb3J0cy5oYXMgPSBoYXM7XG5leHBvcnRzLmlzSW5GaW5hbFN0YXRlID0gaXNJbkZpbmFsU3RhdGU7XG5leHBvcnRzLmlzTGVhZk5vZGUgPSBpc0xlYWZOb2RlO1xuZXhwb3J0cy5uZXh0RXZlbnRzID0gbmV4dEV2ZW50cztcbiIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBfdHNsaWIgPSByZXF1aXJlKCcuL192aXJ0dWFsL190c2xpYi5qcycpO1xudmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG52YXIgc3RhdGVVdGlscyA9IHJlcXVpcmUoJy4vc3RhdGVVdGlscy5qcycpO1xudmFyIGFjdGlvbnMgPSByZXF1aXJlKCcuL2FjdGlvbnMuanMnKTtcbnZhciBlbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vZW52aXJvbm1lbnQuanMnKTtcblxuZnVuY3Rpb24gc3RhdGVWYWx1ZXNFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYSA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1N0cmluZyhhKSB8fCB1dGlscy5pc1N0cmluZyhiKSkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG5cbiAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuICByZXR1cm4gYUtleXMubGVuZ3RoID09PSBiS2V5cy5sZW5ndGggJiYgYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzdGF0ZVZhbHVlc0VxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBpc1N0YXRlQ29uZmlnKHN0YXRlKSB7XG4gIGlmICh0eXBlb2Ygc3RhdGUgIT09ICdvYmplY3QnIHx8IHN0YXRlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICd2YWx1ZScgaW4gc3RhdGUgJiYgJ19ldmVudCcgaW4gc3RhdGU7XG59XG4vKipcclxuICogQGRlcHJlY2F0ZWQgVXNlIGBpc1N0YXRlQ29uZmlnKG9iamVjdClgIG9yIGBzdGF0ZSBpbnN0YW5jZW9mIFN0YXRlYCBpbnN0ZWFkLlxyXG4gKi9cblxudmFyIGlzU3RhdGUgPSBpc1N0YXRlQ29uZmlnO1xuZnVuY3Rpb24gYmluZEFjdGlvblRvU3RhdGUoYWN0aW9uLCBzdGF0ZSkge1xuICB2YXIgZXhlYyA9IGFjdGlvbi5leGVjO1xuXG4gIHZhciBib3VuZEFjdGlvbiA9IF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIGFjdGlvbiksIHtcbiAgICBleGVjOiBleGVjICE9PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZXhlYyhzdGF0ZS5jb250ZXh0LCBzdGF0ZS5ldmVudCwge1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICBfZXZlbnQ6IHN0YXRlLl9ldmVudFxuICAgICAgfSk7XG4gICAgfSA6IHVuZGVmaW5lZFxuICB9KTtcblxuICByZXR1cm4gYm91bmRBY3Rpb247XG59XG5cbnZhciBTdGF0ZSA9XG4vKiNfX1BVUkVfXyovXG5cbi8qKiBAY2xhc3MgKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBTdGF0ZSBpbnN0YW5jZS5cclxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHN0YXRlIHZhbHVlXHJcbiAgICogQHBhcmFtIGNvbnRleHQgVGhlIGV4dGVuZGVkIHN0YXRlXHJcbiAgICogQHBhcmFtIGhpc3RvcnlWYWx1ZSBUaGUgdHJlZSByZXByZXNlbnRpbmcgaGlzdG9yaWNhbCB2YWx1ZXMgb2YgdGhlIHN0YXRlIG5vZGVzXHJcbiAgICogQHBhcmFtIGhpc3RvcnkgVGhlIHByZXZpb3VzIHN0YXRlXHJcbiAgICogQHBhcmFtIGFjdGlvbnMgQW4gYXJyYXkgb2YgYWN0aW9uIG9iamVjdHMgdG8gZXhlY3V0ZSBhcyBzaWRlLWVmZmVjdHNcclxuICAgKiBAcGFyYW0gYWN0aXZpdGllcyBBIG1hcHBpbmcgb2YgYWN0aXZpdGllcyBhbmQgd2hldGhlciB0aGV5IGFyZSBzdGFydGVkIChgdHJ1ZWApIG9yIHN0b3BwZWQgKGBmYWxzZWApLlxyXG4gICAqIEBwYXJhbSBtZXRhXHJcbiAgICogQHBhcmFtIGV2ZW50cyBJbnRlcm5hbCBldmVudCBxdWV1ZS4gU2hvdWxkIGJlIGVtcHR5IHdpdGggcnVuLXRvLWNvbXBsZXRpb24gc2VtYW50aWNzLlxyXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uXHJcbiAgICovXG4gIGZ1bmN0aW9uIFN0YXRlKGNvbmZpZykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX2E7XG5cbiAgICB0aGlzLmFjdGlvbnMgPSBbXTtcbiAgICB0aGlzLmFjdGl2aXRpZXMgPSBjb25zdGFudHMuRU1QVFlfQUNUSVZJVFlfTUFQO1xuICAgIHRoaXMubWV0YSA9IHt9O1xuICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgdGhpcy52YWx1ZSA9IGNvbmZpZy52YWx1ZTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb25maWcuY29udGV4dDtcbiAgICB0aGlzLl9ldmVudCA9IGNvbmZpZy5fZXZlbnQ7XG4gICAgdGhpcy5fc2Vzc2lvbmlkID0gY29uZmlnLl9zZXNzaW9uaWQ7XG4gICAgdGhpcy5ldmVudCA9IHRoaXMuX2V2ZW50LmRhdGE7XG4gICAgdGhpcy5oaXN0b3J5VmFsdWUgPSBjb25maWcuaGlzdG9yeVZhbHVlO1xuICAgIHRoaXMuaGlzdG9yeSA9IGNvbmZpZy5oaXN0b3J5O1xuICAgIHRoaXMuYWN0aW9ucyA9IGNvbmZpZy5hY3Rpb25zIHx8IFtdO1xuICAgIHRoaXMuYWN0aXZpdGllcyA9IGNvbmZpZy5hY3Rpdml0aWVzIHx8IGNvbnN0YW50cy5FTVBUWV9BQ1RJVklUWV9NQVA7XG4gICAgdGhpcy5tZXRhID0gc3RhdGVVdGlscy5nZXRNZXRhKGNvbmZpZy5jb25maWd1cmF0aW9uKTtcbiAgICB0aGlzLmV2ZW50cyA9IGNvbmZpZy5ldmVudHMgfHwgW107XG4gICAgdGhpcy5tYXRjaGVzID0gdGhpcy5tYXRjaGVzLmJpbmQodGhpcyk7XG4gICAgdGhpcy50b1N0cmluZ3MgPSB0aGlzLnRvU3RyaW5ncy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZy5jb25maWd1cmF0aW9uO1xuICAgIHRoaXMudHJhbnNpdGlvbnMgPSBjb25maWcudHJhbnNpdGlvbnM7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNvbmZpZy5jaGlsZHJlbjtcbiAgICB0aGlzLmRvbmUgPSAhIWNvbmZpZy5kb25lO1xuICAgIHRoaXMudGFncyA9IChfYSA9IEFycmF5LmlzQXJyYXkoY29uZmlnLnRhZ3MpID8gbmV3IFNldChjb25maWcudGFncykgOiBjb25maWcudGFncykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IFNldCgpO1xuICAgIHRoaXMubWFjaGluZSA9IGNvbmZpZy5tYWNoaW5lO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmV4dEV2ZW50cycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3RhdGVVdGlscy5uZXh0RXZlbnRzKF90aGlzLmNvbmZpZ3VyYXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBuZXcgU3RhdGUgaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBgc3RhdGVWYWx1ZWAgYW5kIGBjb250ZXh0YC5cclxuICAgKiBAcGFyYW0gc3RhdGVWYWx1ZVxyXG4gICAqIEBwYXJhbSBjb250ZXh0XHJcbiAgICovXG5cblxuICBTdGF0ZS5mcm9tID0gZnVuY3Rpb24gKHN0YXRlVmFsdWUsIGNvbnRleHQpIHtcbiAgICBpZiAoc3RhdGVWYWx1ZSBpbnN0YW5jZW9mIFN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGVWYWx1ZS5jb250ZXh0ICE9PSBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RhdGUoe1xuICAgICAgICAgIHZhbHVlOiBzdGF0ZVZhbHVlLnZhbHVlLFxuICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgX2V2ZW50OiBzdGF0ZVZhbHVlLl9ldmVudCxcbiAgICAgICAgICBfc2Vzc2lvbmlkOiBudWxsLFxuICAgICAgICAgIGhpc3RvcnlWYWx1ZTogc3RhdGVWYWx1ZS5oaXN0b3J5VmFsdWUsXG4gICAgICAgICAgaGlzdG9yeTogc3RhdGVWYWx1ZS5oaXN0b3J5LFxuICAgICAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgICAgIGFjdGl2aXRpZXM6IHN0YXRlVmFsdWUuYWN0aXZpdGllcyxcbiAgICAgICAgICBtZXRhOiB7fSxcbiAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb246IFtdLFxuICAgICAgICAgIHRyYW5zaXRpb25zOiBbXSxcbiAgICAgICAgICBjaGlsZHJlbjoge31cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZVZhbHVlO1xuICAgIH1cblxuICAgIHZhciBfZXZlbnQgPSBhY3Rpb25zLmluaXRFdmVudDtcbiAgICByZXR1cm4gbmV3IFN0YXRlKHtcbiAgICAgIHZhbHVlOiBzdGF0ZVZhbHVlLFxuICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgIF9ldmVudDogX2V2ZW50LFxuICAgICAgX3Nlc3Npb25pZDogbnVsbCxcbiAgICAgIGhpc3RvcnlWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgaGlzdG9yeTogdW5kZWZpbmVkLFxuICAgICAgYWN0aW9uczogW10sXG4gICAgICBhY3Rpdml0aWVzOiB1bmRlZmluZWQsXG4gICAgICBtZXRhOiB1bmRlZmluZWQsXG4gICAgICBldmVudHM6IFtdLFxuICAgICAgY29uZmlndXJhdGlvbjogW10sXG4gICAgICB0cmFuc2l0aW9uczogW10sXG4gICAgICBjaGlsZHJlbjoge31cbiAgICB9KTtcbiAgfTtcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBTdGF0ZSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGBjb25maWdgLlxyXG4gICAqIEBwYXJhbSBjb25maWcgVGhlIHN0YXRlIGNvbmZpZ1xyXG4gICAqL1xuXG5cbiAgU3RhdGUuY3JlYXRlID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgU3RhdGUoY29uZmlnKTtcbiAgfTtcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBgU3RhdGVgIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gYHN0YXRlVmFsdWVgIGFuZCBgY29udGV4dGAgd2l0aCBubyBhY3Rpb25zIChzaWRlLWVmZmVjdHMpLlxyXG4gICAqIEBwYXJhbSBzdGF0ZVZhbHVlXHJcbiAgICogQHBhcmFtIGNvbnRleHRcclxuICAgKi9cblxuXG4gIFN0YXRlLmluZXJ0ID0gZnVuY3Rpb24gKHN0YXRlVmFsdWUsIGNvbnRleHQpIHtcbiAgICBpZiAoc3RhdGVWYWx1ZSBpbnN0YW5jZW9mIFN0YXRlKSB7XG4gICAgICBpZiAoIXN0YXRlVmFsdWUuYWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBfZXZlbnQgPSBhY3Rpb25zLmluaXRFdmVudDtcbiAgICAgIHJldHVybiBuZXcgU3RhdGUoe1xuICAgICAgICB2YWx1ZTogc3RhdGVWYWx1ZS52YWx1ZSxcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgX2V2ZW50OiBfZXZlbnQsXG4gICAgICAgIF9zZXNzaW9uaWQ6IG51bGwsXG4gICAgICAgIGhpc3RvcnlWYWx1ZTogc3RhdGVWYWx1ZS5oaXN0b3J5VmFsdWUsXG4gICAgICAgIGhpc3Rvcnk6IHN0YXRlVmFsdWUuaGlzdG9yeSxcbiAgICAgICAgYWN0aXZpdGllczogc3RhdGVWYWx1ZS5hY3Rpdml0aWVzLFxuICAgICAgICBjb25maWd1cmF0aW9uOiBzdGF0ZVZhbHVlLmNvbmZpZ3VyYXRpb24sXG4gICAgICAgIHRyYW5zaXRpb25zOiBbXSxcbiAgICAgICAgY2hpbGRyZW46IHt9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RhdGUuZnJvbShzdGF0ZVZhbHVlLCBjb250ZXh0KTtcbiAgfTtcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIHN0cmluZyBsZWFmIHN0YXRlIG5vZGUgcGF0aHMuXHJcbiAgICogQHBhcmFtIHN0YXRlVmFsdWVcclxuICAgKiBAcGFyYW0gZGVsaW1pdGVyIFRoZSBjaGFyYWN0ZXIocykgdGhhdCBzZXBhcmF0ZSBlYWNoIHN1YnBhdGggaW4gdGhlIHN0cmluZyBzdGF0ZSBub2RlIHBhdGguXHJcbiAgICovXG5cblxuICBTdGF0ZS5wcm90b3R5cGUudG9TdHJpbmdzID0gZnVuY3Rpb24gKHN0YXRlVmFsdWUsIGRlbGltaXRlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoc3RhdGVWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZVZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoZGVsaW1pdGVyID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGltaXRlciA9ICcuJztcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNTdHJpbmcoc3RhdGVWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBbc3RhdGVWYWx1ZV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlS2V5cyA9IE9iamVjdC5rZXlzKHN0YXRlVmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZUtleXMuY29uY2F0LmFwcGx5KHZhbHVlS2V5cywgX3RzbGliLl9fc3ByZWFkQXJyYXkoW10sIF90c2xpYi5fX3JlYWQodmFsdWVLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXMudG9TdHJpbmdzKHN0YXRlVmFsdWVba2V5XSwgZGVsaW1pdGVyKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIGtleSArIGRlbGltaXRlciArIHM7XG4gICAgICB9KTtcbiAgICB9KSksIGZhbHNlKSk7XG4gIH07XG5cbiAgU3RhdGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2EgPSB0aGlzO1xuICAgICAgICBfYS5jb25maWd1cmF0aW9uO1xuICAgICAgICBfYS50cmFuc2l0aW9ucztcbiAgICAgICAgdmFyIHRhZ3MgPSBfYS50YWdzO1xuICAgICAgICBfYS5tYWNoaW5lO1xuICAgICAgICB2YXIganNvblZhbHVlcyA9IF90c2xpYi5fX3Jlc3QoX2EsIFtcImNvbmZpZ3VyYXRpb25cIiwgXCJ0cmFuc2l0aW9uc1wiLCBcInRhZ3NcIiwgXCJtYWNoaW5lXCJdKTtcblxuICAgIHJldHVybiBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHt9LCBqc29uVmFsdWVzKSwge1xuICAgICAgdGFnczogQXJyYXkuZnJvbSh0YWdzKVxuICAgIH0pO1xuICB9O1xuXG4gIFN0YXRlLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKHBhcmVudFN0YXRlVmFsdWUpIHtcbiAgICByZXR1cm4gdXRpbHMubWF0Y2hlc1N0YXRlKHBhcmVudFN0YXRlVmFsdWUsIHRoaXMudmFsdWUpO1xuICB9O1xuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGNvbmZpZ3VyYXRpb24gaGFzIGEgc3RhdGUgbm9kZSB3aXRoIHRoZSBzcGVjaWZpZWQgYHRhZ2AuXHJcbiAgICogQHBhcmFtIHRhZ1xyXG4gICAqL1xuXG5cbiAgU3RhdGUucHJvdG90eXBlLmhhc1RhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICByZXR1cm4gdGhpcy50YWdzLmhhcyh0YWcpO1xuICB9O1xuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgc2VuZGluZyB0aGUgYGV2ZW50YCB3aWxsIGNhdXNlIGEgbm9uLWZvcmJpZGRlbiB0cmFuc2l0aW9uXHJcbiAgICogdG8gYmUgc2VsZWN0ZWQsIGV2ZW4gaWYgdGhlIHRyYW5zaXRpb25zIGhhdmUgbm8gYWN0aW9ucyBub3JcclxuICAgKiBjaGFuZ2UgdGhlIHN0YXRlIHZhbHVlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byB0ZXN0XHJcbiAgICogQHJldHVybnMgV2hldGhlciB0aGUgZXZlbnQgd2lsbCBjYXVzZSBhIHRyYW5zaXRpb25cclxuICAgKi9cblxuXG4gIFN0YXRlLnByb3RvdHlwZS5jYW4gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgX2E7XG5cbiAgICBpZiAoZW52aXJvbm1lbnQuSVNfUFJPRFVDVElPTikge1xuICAgICAgdXRpbHMud2FybighIXRoaXMubWFjaGluZSwgXCJzdGF0ZS5jYW4oLi4uKSB1c2VkIG91dHNpZGUgb2YgYSBtYWNoaW5lLWNyZWF0ZWQgU3RhdGUgb2JqZWN0OyB0aGlzIHdpbGwgYWx3YXlzIHJldHVybiBmYWxzZS5cIik7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gKF9hID0gdGhpcy5tYWNoaW5lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0VHJhbnNpdGlvbkRhdGEodGhpcywgZXZlbnQpO1xuICAgIHJldHVybiAhISh0cmFuc2l0aW9uRGF0YSA9PT0gbnVsbCB8fCB0cmFuc2l0aW9uRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJhbnNpdGlvbkRhdGEudHJhbnNpdGlvbnMubGVuZ3RoKSAmJiAvLyBDaGVjayB0aGF0IGF0IGxlYXN0IG9uZSB0cmFuc2l0aW9uIGlzIG5vdCBmb3JiaWRkZW5cbiAgICB0cmFuc2l0aW9uRGF0YS50cmFuc2l0aW9ucy5zb21lKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC50YXJnZXQgIT09IHVuZGVmaW5lZCB8fCB0LmFjdGlvbnMubGVuZ3RoO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTdGF0ZTtcbn0oKTtcblxuZXhwb3J0cy5TdGF0ZSA9IFN0YXRlO1xuZXhwb3J0cy5iaW5kQWN0aW9uVG9TdGF0ZSA9IGJpbmRBY3Rpb25Ub1N0YXRlO1xuZXhwb3J0cy5pc1N0YXRlID0gaXNTdGF0ZTtcbmV4cG9ydHMuaXNTdGF0ZUNvbmZpZyA9IGlzU3RhdGVDb25maWc7XG5leHBvcnRzLnN0YXRlVmFsdWVzRXF1YWwgPSBzdGF0ZVZhbHVlc0VxdWFsO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIF90c2xpYiA9IHJlcXVpcmUoJy4vX3ZpcnR1YWwvX3RzbGliLmpzJyk7XG5cbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZGVmZXJFdmVudHM6IGZhbHNlXG59O1xuXG52YXIgU2NoZWR1bGVyID1cbi8qI19fUFVSRV9fKi9cblxuLyoqIEBjbGFzcyAqL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY2hlZHVsZXIob3B0aW9ucykge1xuICAgIHRoaXMucHJvY2Vzc2luZ0V2ZW50ID0gZmFsc2U7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucyksIG9wdGlvbnMpO1xuICB9XG5cbiAgU2NoZWR1bGVyLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRlZmVyRXZlbnRzKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoY2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvY2VzcyhjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdGhpcy5mbHVzaEV2ZW50cygpO1xuICB9O1xuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAodGFzaykge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCB8fCB0aGlzLnByb2Nlc3NpbmdFdmVudCkge1xuICAgICAgdGhpcy5xdWV1ZS5wdXNoKHRhc2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBxdWV1ZSBzaG91bGQgYmUgZW1wdHkgd2hlbiBpdCBpcyBub3QgcHJvY2Vzc2luZyBldmVudHMnKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb2Nlc3ModGFzayk7XG4gICAgdGhpcy5mbHVzaEV2ZW50cygpO1xuICB9O1xuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICB9O1xuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHRDYWxsYmFjayA9IHRoaXMucXVldWUuc2hpZnQoKTtcblxuICAgIHdoaWxlIChuZXh0Q2FsbGJhY2spIHtcbiAgICAgIHRoaXMucHJvY2VzcyhuZXh0Q2FsbGJhY2spO1xuICAgICAgbmV4dENhbGxiYWNrID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgIH1cbiAgfTtcblxuICBTY2hlZHVsZXIucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLnByb2Nlc3NpbmdFdmVudCA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyB0aGVyZSBpcyBubyB1c2UgdG8ga2VlcCB0aGUgZnV0dXJlIGV2ZW50c1xuICAgICAgLy8gYXMgdGhlIHNpdHVhdGlvbiBpcyBub3QgYW55bW9yZSB0aGUgc2FtZVxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5wcm9jZXNzaW5nRXZlbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKTtcblxuZXhwb3J0cy5TY2hlZHVsZXIgPSBTY2hlZHVsZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovbmV3IE1hcCgpO1xudmFyIHNlc3Npb25JZEluZGV4ID0gMDtcbnZhciByZWdpc3RyeSA9IHtcbiAgYm9va0lkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwieDpcIi5jb25jYXQoc2Vzc2lvbklkSW5kZXgrKyk7XG4gIH0sXG4gIHJlZ2lzdGVyOiBmdW5jdGlvbiAoaWQsIGFjdG9yKSB7XG4gICAgY2hpbGRyZW4uc2V0KGlkLCBhY3Rvcik7XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBjaGlsZHJlbi5nZXQoaWQpO1xuICB9LFxuICBmcmVlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBjaGlsZHJlbi5kZWxldGUoaWQpO1xuICB9XG59O1xuXG5leHBvcnRzLnJlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgZW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL2Vudmlyb25tZW50LmpzJyk7XG5cbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cblxuICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICBjb25zb2xlLndhcm4oJ1hTdGF0ZSBjb3VsZCBub3QgZmluZCBhIGdsb2JhbCBvYmplY3QgaW4gdGhpcyBlbnZpcm9ubWVudC4gUGxlYXNlIGxldCB0aGUgbWFpbnRhaW5lcnMga25vdyBhbmQgcmFpc2UgYW4gaXNzdWUgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3N0YXRlbHlhaS94c3RhdGUvaXNzdWVzJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGV2VG9vbHMoKSB7XG4gIHZhciBnbG9iYWwgPSBnZXRHbG9iYWwoKTtcblxuICBpZiAoZ2xvYmFsICYmICdfX3hzdGF0ZV9fJyBpbiBnbG9iYWwpIHtcbiAgICByZXR1cm4gZ2xvYmFsLl9feHN0YXRlX187XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlclNlcnZpY2Uoc2VydmljZSkge1xuICBpZiAoIWdldEdsb2JhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRldlRvb2xzID0gZ2V0RGV2VG9vbHMoKTtcblxuICBpZiAoZGV2VG9vbHMpIHtcbiAgICBkZXZUb29scy5yZWdpc3RlcihzZXJ2aWNlKTtcbiAgfVxufVxuXG5leHBvcnRzLmdldEdsb2JhbCA9IGdldEdsb2JhbDtcbmV4cG9ydHMucmVnaXN0ZXJTZXJ2aWNlID0gcmVnaXN0ZXJTZXJ2aWNlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGFjdGlvbnMgPSByZXF1aXJlKCcuL2FjdGlvbnMuanMnKTtcbnZhciBBY3RvciA9IHJlcXVpcmUoJy4vQWN0b3IuanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcblxuLyoqXHJcbiAqIFJldHVybnMgYW4gYWN0b3IgYmVoYXZpb3IgZnJvbSBhIHJlZHVjZXIgYW5kIGl0cyBpbml0aWFsIHN0YXRlLlxyXG4gKlxyXG4gKiBAcGFyYW0gdHJhbnNpdGlvbiBUaGUgcHVyZSByZWR1Y2VyIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSBnaXZlbiB0aGUgY3VycmVudCBzdGF0ZSBhbmQgZXZlbnQuXHJcbiAqIEBwYXJhbSBpbml0aWFsU3RhdGUgVGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIHJlZHVjZXIuXHJcbiAqIEByZXR1cm5zIEFuIGFjdG9yIGJlaGF2aW9yXHJcbiAqL1xuXG5mdW5jdGlvbiBmcm9tUmVkdWNlcih0cmFuc2l0aW9uLCBpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgIGluaXRpYWxTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG59XG5mdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlRm4pIHtcbiAgdmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICBzdGF0dXM6ICdwZW5kaW5nJ1xuICB9O1xuICByZXR1cm4ge1xuICAgIHRyYW5zaXRpb246IGZ1bmN0aW9uIChzdGF0ZSwgZXZlbnQsIF9hKSB7XG4gICAgICB2YXIgcGFyZW50ID0gX2EucGFyZW50LFxuICAgICAgICAgIGlkID0gX2EuaWQsXG4gICAgICAgICAgb2JzZXJ2ZXJzID0gX2Eub2JzZXJ2ZXJzO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZnVsZmlsbCc6XG4gICAgICAgICAgcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LnNlbmQoYWN0aW9ucy5kb25lSW52b2tlKGlkLCBldmVudC5kYXRhKSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkYXRhOiBldmVudC5kYXRhLFxuICAgICAgICAgICAgc3RhdHVzOiAnZnVsZmlsbGVkJ1xuICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSAncmVqZWN0JzpcbiAgICAgICAgICBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuc2VuZChhY3Rpb25zLmVycm9yKGlkLCBldmVudC5lcnJvcikpO1xuICAgICAgICAgIG9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXZlbnQuZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvcjogZXZlbnQuZXJyb3IsXG4gICAgICAgICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdGF0dXM6ICdyZWplY3RlZCdcbiAgICAgICAgICB9O1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIChfYSkge1xuICAgICAgdmFyIHNlbGYgPSBfYS5zZWxmO1xuICAgICAgcHJvbWlzZUZuKCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZWxmLnNlbmQoe1xuICAgICAgICAgIHR5cGU6ICdmdWxmaWxsJyxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBzZWxmLnNlbmQoe1xuICAgICAgICAgIHR5cGU6ICdyZWplY3QnLFxuICAgICAgICAgIGVycm9yOiByZWFzb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gc3Bhd25CZWhhdmlvcihiZWhhdmlvciwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHN0YXRlID0gYmVoYXZpb3IuaW5pdGlhbFN0YXRlO1xuICB2YXIgb2JzZXJ2ZXJzID0gbmV3IFNldCgpO1xuICB2YXIgbWFpbGJveCA9IFtdO1xuICB2YXIgZmx1c2hpbmcgPSBmYWxzZTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZsdXNoaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmx1c2hpbmcgPSB0cnVlO1xuXG4gICAgd2hpbGUgKG1haWxib3gubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGV2ZW50XzEgPSBtYWlsYm94LnNoaWZ0KCk7XG4gICAgICBzdGF0ZSA9IGJlaGF2aW9yLnRyYW5zaXRpb24oc3RhdGUsIGV2ZW50XzEsIGFjdG9yQ3R4KTtcbiAgICAgIG9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIubmV4dChzdGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmbHVzaGluZyA9IGZhbHNlO1xuICB9O1xuXG4gIHZhciBhY3RvciA9IEFjdG9yLnRvQWN0b3JSZWYoe1xuICAgIGlkOiBvcHRpb25zLmlkLFxuICAgIHNlbmQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgbWFpbGJveC5wdXNoKGV2ZW50KTtcbiAgICAgIGZsdXNoKCk7XG4gICAgfSxcbiAgICBnZXRTbmFwc2hvdDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAobmV4dCwgaGFuZGxlRXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSB1dGlscy50b09ic2VydmVyKG5leHQsIGhhbmRsZUVycm9yLCBjb21wbGV0ZSk7XG4gICAgICBvYnNlcnZlcnMuYWRkKG9ic2VydmVyKTtcbiAgICAgIG9ic2VydmVyLm5leHQoc3RhdGUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvYnNlcnZlcnMuZGVsZXRlKG9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICB2YXIgYWN0b3JDdHggPSB7XG4gICAgcGFyZW50OiBvcHRpb25zLnBhcmVudCxcbiAgICBzZWxmOiBhY3RvcixcbiAgICBpZDogb3B0aW9ucy5pZCB8fCAnYW5vbnltb3VzJyxcbiAgICBvYnNlcnZlcnM6IG9ic2VydmVyc1xuICB9O1xuICBzdGF0ZSA9IGJlaGF2aW9yLnN0YXJ0ID8gYmVoYXZpb3Iuc3RhcnQoYWN0b3JDdHgpIDogc3RhdGU7XG4gIHJldHVybiBhY3Rvcjtcbn1cblxuZXhwb3J0cy5mcm9tUHJvbWlzZSA9IGZyb21Qcm9taXNlO1xuZXhwb3J0cy5mcm9tUmVkdWNlciA9IGZyb21SZWR1Y2VyO1xuZXhwb3J0cy5zcGF3bkJlaGF2aW9yID0gc3Bhd25CZWhhdmlvcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBfdHNsaWIgPSByZXF1aXJlKCcuL192aXJ0dWFsL190c2xpYi5qcycpO1xudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcy5qcycpO1xudmFyIFN0YXRlID0gcmVxdWlyZSgnLi9TdGF0ZS5qcycpO1xudmFyIGFjdGlvblR5cGVzID0gcmVxdWlyZSgnLi9hY3Rpb25UeXBlcy5qcycpO1xudmFyIGFjdGlvbnMgPSByZXF1aXJlKCcuL2FjdGlvbnMuanMnKTtcbnZhciBlbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vZW52aXJvbm1lbnQuanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcbnZhciBzY2hlZHVsZXIgPSByZXF1aXJlKCcuL3NjaGVkdWxlci5qcycpO1xudmFyIEFjdG9yID0gcmVxdWlyZSgnLi9BY3Rvci5qcycpO1xudmFyIHJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9yZWdpc3RyeS5qcycpO1xudmFyIGRldlRvb2xzID0gcmVxdWlyZSgnLi9kZXZUb29scy5qcycpO1xudmFyIHNlcnZpY2VTY29wZSA9IHJlcXVpcmUoJy4vc2VydmljZVNjb3BlLmpzJyk7XG52YXIgYmVoYXZpb3JzID0gcmVxdWlyZSgnLi9iZWhhdmlvcnMuanMnKTtcblxudmFyIERFRkFVTFRfU1BBV05fT1BUSU9OUyA9IHtcbiAgc3luYzogZmFsc2UsXG4gIGF1dG9Gb3J3YXJkOiBmYWxzZVxufTtcbmV4cG9ydHMuSW50ZXJwcmV0ZXJTdGF0dXMgPSB2b2lkIDA7XG5cbihmdW5jdGlvbiAoSW50ZXJwcmV0ZXJTdGF0dXMpIHtcbiAgSW50ZXJwcmV0ZXJTdGF0dXNbSW50ZXJwcmV0ZXJTdGF0dXNbXCJOb3RTdGFydGVkXCJdID0gMF0gPSBcIk5vdFN0YXJ0ZWRcIjtcbiAgSW50ZXJwcmV0ZXJTdGF0dXNbSW50ZXJwcmV0ZXJTdGF0dXNbXCJSdW5uaW5nXCJdID0gMV0gPSBcIlJ1bm5pbmdcIjtcbiAgSW50ZXJwcmV0ZXJTdGF0dXNbSW50ZXJwcmV0ZXJTdGF0dXNbXCJTdG9wcGVkXCJdID0gMl0gPSBcIlN0b3BwZWRcIjtcbn0pKGV4cG9ydHMuSW50ZXJwcmV0ZXJTdGF0dXMgfHwgKGV4cG9ydHMuSW50ZXJwcmV0ZXJTdGF0dXMgPSB7fSkpO1xuXG52YXIgSW50ZXJwcmV0ZXIgPVxuLyojX19QVVJFX18qL1xuXG4vKiogQGNsYXNzICovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBuZXcgSW50ZXJwcmV0ZXIgaW5zdGFuY2UgKGkuZS4sIHNlcnZpY2UpIGZvciB0aGUgZ2l2ZW4gbWFjaGluZSB3aXRoIHRoZSBwcm92aWRlZCBvcHRpb25zLCBpZiBhbnkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbWFjaGluZSBUaGUgbWFjaGluZSB0byBiZSBpbnRlcnByZXRlZFxyXG4gICAqIEBwYXJhbSBvcHRpb25zIEludGVycHJldGVyIG9wdGlvbnNcclxuICAgKi9cbiAgZnVuY3Rpb24gSW50ZXJwcmV0ZXIobWFjaGluZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gSW50ZXJwcmV0ZXIuZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdGhpcy5tYWNoaW5lID0gbWFjaGluZTtcbiAgICB0aGlzLmRlbGF5ZWRFdmVudHNNYXAgPSB7fTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmNvbnRleHRMaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdG9wTGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuZG9uZUxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc2VuZExpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhlIHNlcnZpY2UgaXMgc3RhcnRlZC5cclxuICAgICAqL1xuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhdHVzID0gZXhwb3J0cy5JbnRlcnByZXRlclN0YXR1cy5Ob3RTdGFydGVkO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5mb3J3YXJkVG8gPSBuZXcgU2V0KCk7XG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3IgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnN0YXJ0XHJcbiAgICAgKi9cblxuICAgIHRoaXMuaW5pdCA9IHRoaXMuc3RhcnQ7XG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhbiBldmVudCB0byB0aGUgcnVubmluZyBpbnRlcnByZXRlciB0byB0cmlnZ2VyIGEgdHJhbnNpdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBBbiBhcnJheSBvZiBldmVudHMgKGJhdGNoZWQpIGNhbiBiZSBzZW50IGFzIHdlbGwsIHdoaWNoIHdpbGwgc2VuZCBhbGxcclxuICAgICAqIGJhdGNoZWQgZXZlbnRzIHRvIHRoZSBydW5uaW5nIGludGVycHJldGVyLiBUaGUgbGlzdGVuZXJzIHdpbGwgYmVcclxuICAgICAqIG5vdGlmaWVkIG9ubHkgKipvbmNlKiogd2hlbiBhbGwgZXZlbnRzIGFyZSBwcm9jZXNzZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudChzKSB0byBzZW5kXHJcbiAgICAgKi9cblxuICAgIHRoaXMuc2VuZCA9IGZ1bmN0aW9uIChldmVudCwgcGF5bG9hZCkge1xuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIF90aGlzLmJhdGNoKGV2ZW50KTtcblxuICAgICAgICByZXR1cm4gX3RoaXMuc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBfZXZlbnQgPSB1dGlscy50b1NDWE1MRXZlbnQodXRpbHMudG9FdmVudE9iamVjdChldmVudCwgcGF5bG9hZCkpO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhdHVzID09PSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLlN0b3BwZWQpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICB1dGlscy53YXJuKGZhbHNlLCBcIkV2ZW50IFxcXCJcIi5jb25jYXQoX2V2ZW50Lm5hbWUsIFwiXFxcIiB3YXMgc2VudCB0byBzdG9wcGVkIHNlcnZpY2UgXFxcIlwiKS5jb25jYXQoX3RoaXMubWFjaGluZS5pZCwgXCJcXFwiLiBUaGlzIHNlcnZpY2UgaGFzIGFscmVhZHkgcmVhY2hlZCBpdHMgZmluYWwgc3RhdGUsIGFuZCB3aWxsIG5vdCB0cmFuc2l0aW9uLlxcbkV2ZW50OiBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KF9ldmVudC5kYXRhKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzLnN0YXRlO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuc3RhdHVzICE9PSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLlJ1bm5pbmcgJiYgIV90aGlzLm9wdGlvbnMuZGVmZXJFdmVudHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXZlbnQgXFxcIlwiLmNvbmNhdChfZXZlbnQubmFtZSwgXCJcXFwiIHdhcyBzZW50IHRvIHVuaW5pdGlhbGl6ZWQgc2VydmljZSBcXFwiXCIpLmNvbmNhdChfdGhpcy5tYWNoaW5lLmlkIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgICAgLCBcIlxcXCIuIE1ha2Ugc3VyZSAuc3RhcnQoKSBpcyBjYWxsZWQgZm9yIHRoaXMgc2VydmljZSwgb3Igc2V0IHsgZGVmZXJFdmVudHM6IHRydWUgfSBpbiB0aGUgc2VydmljZSBvcHRpb25zLlxcbkV2ZW50OiBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KF9ldmVudC5kYXRhKSkpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBGb3J3YXJkIGNvcHkgb2YgZXZlbnQgdG8gY2hpbGQgYWN0b3JzXG4gICAgICAgIF90aGlzLmZvcndhcmQoX2V2ZW50KTtcblxuICAgICAgICB2YXIgbmV4dFN0YXRlID0gX3RoaXMuX25leHRTdGF0ZShfZXZlbnQpO1xuXG4gICAgICAgIF90aGlzLnVwZGF0ZShuZXh0U3RhdGUsIF9ldmVudCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzLl9zdGF0ZTsgLy8gVE9ETzogZGVwcmVjYXRlIChzaG91bGQgcmV0dXJuIHZvaWQpXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c2VtaWNvbG9uXG4gICAgfTtcblxuICAgIHRoaXMuc2VuZFRvID0gZnVuY3Rpb24gKGV2ZW50LCB0bykge1xuICAgICAgdmFyIGlzUGFyZW50ID0gX3RoaXMucGFyZW50ICYmICh0byA9PT0gdHlwZXMuU3BlY2lhbFRhcmdldHMuUGFyZW50IHx8IF90aGlzLnBhcmVudC5pZCA9PT0gdG8pO1xuICAgICAgdmFyIHRhcmdldCA9IGlzUGFyZW50ID8gX3RoaXMucGFyZW50IDogdXRpbHMuaXNTdHJpbmcodG8pID8gX3RoaXMuY2hpbGRyZW4uZ2V0KHRvKSB8fCByZWdpc3RyeS5yZWdpc3RyeS5nZXQodG8pIDogdXRpbHMuaXNBY3Rvcih0bykgPyB0byA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgaWYgKCFpc1BhcmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBzZW5kIGV2ZW50IHRvIGNoaWxkICdcIi5jb25jYXQodG8sIFwiJyBmcm9tIHNlcnZpY2UgJ1wiKS5jb25jYXQoX3RoaXMuaWQsIFwiJy5cIikpO1xuICAgICAgICB9IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG5cblxuICAgICAgICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICB1dGlscy53YXJuKGZhbHNlLCBcIlNlcnZpY2UgJ1wiLmNvbmNhdChfdGhpcy5pZCwgXCInIGhhcyBubyBwYXJlbnQ6IHVuYWJsZSB0byBzZW5kIGV2ZW50IFwiKS5jb25jYXQoZXZlbnQudHlwZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ21hY2hpbmUnIGluIHRhcmdldCkge1xuICAgICAgICAvLyBwZXJoYXBzIHRob3NlIGV2ZW50cyBzaG91bGQgYmUgcmVqZWN0ZWQgaW4gdGhlIHBhcmVudFxuICAgICAgICAvLyBidXQgYXRtIGl0IGRvZXNuJ3QgaGF2ZSBlYXN5IGFjY2VzcyB0byBhbGwgb2YgdGhlIGluZm9ybWF0aW9uIHRoYXQgaXMgcmVxdWlyZWQgdG8gZG8gaXQgcmVsaWFibHlcbiAgICAgICAgaWYgKF90aGlzLnN0YXR1cyAhPT0gZXhwb3J0cy5JbnRlcnByZXRlclN0YXR1cy5TdG9wcGVkIHx8IF90aGlzLnBhcmVudCAhPT0gdGFyZ2V0IHx8IC8vIHdlIG5lZWQgdG8gc2VuZCBldmVudHMgdG8gdGhlIHBhcmVudCBmcm9tIGV4aXQgaGFuZGxlcnMgb2YgYSBtYWNoaW5lIHRoYXQgcmVhY2hlZCBpdHMgZmluYWwgc3RhdGVcbiAgICAgICAgX3RoaXMuc3RhdGUuZG9uZSkge1xuICAgICAgICAgIC8vIFNlbmQgU0NYTUwgZXZlbnRzIHRvIG1hY2hpbmVzXG4gICAgICAgICAgdGFyZ2V0LnNlbmQoX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgZXZlbnQpLCB7XG4gICAgICAgICAgICBuYW1lOiBldmVudC5uYW1lID09PSBhY3Rpb25UeXBlcy5lcnJvciA/IFwiXCIuY29uY2F0KGFjdGlvbnMuZXJyb3IoX3RoaXMuaWQpKSA6IGV2ZW50Lm5hbWUsXG4gICAgICAgICAgICBvcmlnaW46IF90aGlzLnNlc3Npb25JZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2VuZCBub3JtYWwgZXZlbnRzIHRvIG90aGVyIHRhcmdldHNcbiAgICAgICAgdGFyZ2V0LnNlbmQoZXZlbnQuZGF0YSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuX2V4ZWMgPSBmdW5jdGlvbiAoYWN0aW9uLCBjb250ZXh0LCBfZXZlbnQsIGFjdGlvbkZ1bmN0aW9uTWFwKSB7XG4gICAgICBpZiAoYWN0aW9uRnVuY3Rpb25NYXAgPT09IHZvaWQgMCkge1xuICAgICAgICBhY3Rpb25GdW5jdGlvbk1hcCA9IF90aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpb25zO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aW9uT3JFeGVjID0gYWN0aW9uLmV4ZWMgfHwgYWN0aW9ucy5nZXRBY3Rpb25GdW5jdGlvbihhY3Rpb24udHlwZSwgYWN0aW9uRnVuY3Rpb25NYXApO1xuICAgICAgdmFyIGV4ZWMgPSB1dGlscy5pc0Z1bmN0aW9uKGFjdGlvbk9yRXhlYykgPyBhY3Rpb25PckV4ZWMgOiBhY3Rpb25PckV4ZWMgPyBhY3Rpb25PckV4ZWMuZXhlYyA6IGFjdGlvbi5leGVjO1xuXG4gICAgICBpZiAoZXhlYykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBleGVjKGNvbnRleHQsIF9ldmVudC5kYXRhLCAhX3RoaXMubWFjaGluZS5jb25maWcucHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMgPyB7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIHN0YXRlOiBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIF9ldmVudDogX2V2ZW50XG4gICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgX2V2ZW50OiBfZXZlbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgX3RoaXMucGFyZW50LnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiAneHN0YXRlLmVycm9yJyxcbiAgICAgICAgICAgICAgZGF0YTogZXJyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLnNlbmQ6XG4gICAgICAgICAgdmFyIHNlbmRBY3Rpb24gPSBhY3Rpb247XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHNlbmRBY3Rpb24uZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBfdGhpcy5kZWZlcihzZW5kQWN0aW9uKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VuZEFjdGlvbi50bykge1xuICAgICAgICAgICAgICBfdGhpcy5zZW5kVG8oc2VuZEFjdGlvbi5fZXZlbnQsIHNlbmRBY3Rpb24udG8pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2VuZChzZW5kQWN0aW9uLl9ldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5jYW5jZWw6XG4gICAgICAgICAgX3RoaXMuY2FuY2VsKGFjdGlvbi5zZW5kSWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5zdGFydDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuc3RhdHVzICE9PSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLlJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYWN0aXZpdHkgPSBhY3Rpb24uYWN0aXZpdHk7IC8vIElmIHRoZSBhY3Rpdml0eSB3aWxsIGJlIHN0b3BwZWQgcmlnaHQgYWZ0ZXIgaXQncyBzdGFydGVkXG4gICAgICAgICAgICAvLyAoc3VjaCBhcyBpbiB0cmFuc2llbnQgc3RhdGVzKVxuICAgICAgICAgICAgLy8gZG9uJ3QgYm90aGVyIHN0YXJ0aW5nIHRoZSBhY3Rpdml0eS5cblxuICAgICAgICAgICAgaWYgKCAvLyBpbiB2NCB3aXRoIGBwcmVkaWN0YWJsZUFjdGlvbkFyZ3VtZW50c2AgaW52b2tlcyBhcmUgY2FsbGVkIGVhZ2VybHkgd2hlbiB0aGUgYHRoaXMuc3RhdGVgIHN0aWxsIHBvaW50cyB0byB0aGUgcHJldmlvdXMgc3RhdGVcbiAgICAgICAgICAgICFfdGhpcy5tYWNoaW5lLmNvbmZpZy5wcmVkaWN0YWJsZUFjdGlvbkFyZ3VtZW50cyAmJiAhX3RoaXMuc3RhdGUuYWN0aXZpdGllc1thY3Rpdml0eS5pZCB8fCBhY3Rpdml0eS50eXBlXSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gLy8gSW52b2tlZCBzZXJ2aWNlc1xuXG5cbiAgICAgICAgICAgIGlmIChhY3Rpdml0eS50eXBlID09PSB0eXBlcy5BY3Rpb25UeXBlcy5JbnZva2UpIHtcbiAgICAgICAgICAgICAgdmFyIGludm9rZVNvdXJjZSA9IHV0aWxzLnRvSW52b2tlU291cmNlKGFjdGl2aXR5LnNyYyk7XG4gICAgICAgICAgICAgIHZhciBzZXJ2aWNlQ3JlYXRvciA9IF90aGlzLm1hY2hpbmUub3B0aW9ucy5zZXJ2aWNlcyA/IF90aGlzLm1hY2hpbmUub3B0aW9ucy5zZXJ2aWNlc1tpbnZva2VTb3VyY2UudHlwZV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIHZhciBpZCA9IGFjdGl2aXR5LmlkLFxuICAgICAgICAgICAgICAgICAgZGF0YSA9IGFjdGl2aXR5LmRhdGE7XG5cbiAgICAgICAgICAgICAgaWYgKCFlbnZpcm9ubWVudC5JU19QUk9EVUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMud2FybighKCdmb3J3YXJkJyBpbiBhY3Rpdml0eSksIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgICAgICAgICAgICBcImBmb3J3YXJkYCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkIChmb3VuZCBpbiBpbnZvY2F0aW9uIG9mICdcIi5jb25jYXQoYWN0aXZpdHkuc3JjLCBcIicgaW4gaW4gbWFjaGluZSAnXCIpLmNvbmNhdChfdGhpcy5tYWNoaW5lLmlkLCBcIicpLiBcIikgKyBcIlBsZWFzZSB1c2UgYGF1dG9Gb3J3YXJkYCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBhdXRvRm9yd2FyZCA9ICdhdXRvRm9yd2FyZCcgaW4gYWN0aXZpdHkgPyBhY3Rpdml0eS5hdXRvRm9yd2FyZCA6ICEhYWN0aXZpdHkuZm9yd2FyZDtcblxuICAgICAgICAgICAgICBpZiAoIXNlcnZpY2VDcmVhdG9yKSB7XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLndhcm4oZmFsc2UsIFwiTm8gc2VydmljZSBmb3VuZCBmb3IgaW52b2NhdGlvbiAnXCIuY29uY2F0KGFjdGl2aXR5LnNyYywgXCInIGluIG1hY2hpbmUgJ1wiKS5jb25jYXQoX3RoaXMubWFjaGluZS5pZCwgXCInLlwiKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHJlc29sdmVkRGF0YSA9IGRhdGEgPyB1dGlscy5tYXBDb250ZXh0KGRhdGEsIGNvbnRleHQsIF9ldmVudCkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXJ2aWNlQ3JlYXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiB3YXJuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHV0aWxzLmlzRnVuY3Rpb24oc2VydmljZUNyZWF0b3IpID8gc2VydmljZUNyZWF0b3IoY29udGV4dCwgX2V2ZW50LmRhdGEsIHtcbiAgICAgICAgICAgICAgICBkYXRhOiByZXNvbHZlZERhdGEsXG4gICAgICAgICAgICAgICAgc3JjOiBpbnZva2VTb3VyY2UsXG4gICAgICAgICAgICAgICAgbWV0YTogYWN0aXZpdHkubWV0YVxuICAgICAgICAgICAgICB9KSA6IHNlcnZpY2VDcmVhdG9yO1xuXG4gICAgICAgICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogd2Fybj9cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICBpZiAodXRpbHMuaXNNYWNoaW5lKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSByZXNvbHZlZERhdGEgPyBzb3VyY2Uud2l0aENvbnRleHQocmVzb2x2ZWREYXRhKSA6IHNvdXJjZTtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgYXV0b0ZvcndhcmQ6IGF1dG9Gb3J3YXJkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF90aGlzLnNwYXduKHNvdXJjZSwgaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX3RoaXMuc3Bhd25BY3Rpdml0eShhY3Rpdml0eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLnN0b3A6XG4gICAgICAgICAge1xuICAgICAgICAgICAgX3RoaXMuc3RvcENoaWxkKGFjdGlvbi5hY3Rpdml0eS5pZCk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLmxvZzpcbiAgICAgICAgICB2YXIgbGFiZWwgPSBhY3Rpb24ubGFiZWwsXG4gICAgICAgICAgICAgIHZhbHVlID0gYWN0aW9uLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBfdGhpcy5sb2dnZXIobGFiZWwsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMubG9nZ2VyKHZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghZW52aXJvbm1lbnQuSVNfUFJPRFVDVElPTikge1xuICAgICAgICAgICAgdXRpbHMud2FybihmYWxzZSwgXCJObyBpbXBsZW1lbnRhdGlvbiBmb3VuZCBmb3IgYWN0aW9uIHR5cGUgJ1wiLmNvbmNhdChhY3Rpb24udHlwZSwgXCInXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmVkT3B0aW9ucyA9IF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIEludGVycHJldGVyLmRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgY2xvY2sgPSByZXNvbHZlZE9wdGlvbnMuY2xvY2ssXG4gICAgICAgIGxvZ2dlciA9IHJlc29sdmVkT3B0aW9ucy5sb2dnZXIsXG4gICAgICAgIHBhcmVudCA9IHJlc29sdmVkT3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIGlkID0gcmVzb2x2ZWRPcHRpb25zLmlkO1xuICAgIHZhciByZXNvbHZlZElkID0gaWQgIT09IHVuZGVmaW5lZCA/IGlkIDogbWFjaGluZS5pZDtcbiAgICB0aGlzLmlkID0gcmVzb2x2ZWRJZDtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLmNsb2NrID0gY2xvY2s7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gcmVzb2x2ZWRPcHRpb25zO1xuICAgIHRoaXMuc2NoZWR1bGVyID0gbmV3IHNjaGVkdWxlci5TY2hlZHVsZXIoe1xuICAgICAgZGVmZXJFdmVudHM6IHRoaXMub3B0aW9ucy5kZWZlckV2ZW50c1xuICAgIH0pO1xuICAgIHRoaXMuc2Vzc2lvbklkID0gcmVnaXN0cnkucmVnaXN0cnkuYm9va0lkKCk7XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJwcmV0ZXIucHJvdG90eXBlLCBcImluaXRpYWxTdGF0ZVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbml0aWFsU3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJ2aWNlU2NvcGUucHJvdmlkZSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9pbml0aWFsU3RhdGUgPSBfdGhpcy5tYWNoaW5lLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9pbml0aWFsU3RhdGU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVycHJldGVyLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgdXRpbHMud2Fybih0aGlzLnN0YXR1cyAhPT0gZXhwb3J0cy5JbnRlcnByZXRlclN0YXR1cy5Ob3RTdGFydGVkLCBcIkF0dGVtcHRlZCB0byByZWFkIHN0YXRlIGZyb20gdW5pbml0aWFsaXplZCBzZXJ2aWNlICdcIi5jb25jYXQodGhpcy5pZCwgXCInLiBNYWtlIHN1cmUgdGhlIHNlcnZpY2UgaXMgc3RhcnRlZCBmaXJzdC5cIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIC8qKlxyXG4gICAqIEV4ZWN1dGVzIHRoZSBhY3Rpb25zIG9mIHRoZSBnaXZlbiBzdGF0ZSwgd2l0aCB0aGF0IHN0YXRlJ3MgYGNvbnRleHRgIGFuZCBgZXZlbnRgLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHN0YXRlIFRoZSBzdGF0ZSB3aG9zZSBhY3Rpb25zIHdpbGwgYmUgZXhlY3V0ZWRcclxuICAgKiBAcGFyYW0gYWN0aW9uc0NvbmZpZyBUaGUgYWN0aW9uIGltcGxlbWVudGF0aW9ucyB0byB1c2VcclxuICAgKi9cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uc0NvbmZpZykge1xuICAgIHZhciBlXzEsIF9hO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9iID0gX3RzbGliLl9fdmFsdWVzKHN0YXRlLmFjdGlvbnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBfYy52YWx1ZTtcbiAgICAgICAgdGhpcy5leGVjKGFjdGlvbiwgc3RhdGUsIGFjdGlvbnNDb25maWcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfMV8xKSB7XG4gICAgICBlXzEgPSB7XG4gICAgICAgIGVycm9yOiBlXzFfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHN0YXRlLCBfZXZlbnQpIHtcbiAgICB2YXIgZV8yLCBfYSwgZV8zLCBfYiwgZV80LCBfYywgZV81LCBfZDtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7IC8vIEF0dGFjaCBzZXNzaW9uIElEIHRvIHN0YXRlXG5cblxuICAgIHN0YXRlLl9zZXNzaW9uaWQgPSB0aGlzLnNlc3Npb25JZDsgLy8gVXBkYXRlIHN0YXRlXG5cbiAgICB0aGlzLl9zdGF0ZSA9IHN0YXRlOyAvLyBFeGVjdXRlIGFjdGlvbnNcblxuICAgIGlmICgoIXRoaXMubWFjaGluZS5jb25maWcucHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMgfHwgLy8gdGhpcyBpcyBjdXJyZW50bHkgcmVxdWlyZWQgdG8gZXhlY3V0ZSBpbml0aWFsIGFjdGlvbnMgYXMgdGhlIGBpbml0aWFsU3RhdGVgIGdldHMgY2FjaGVkXG4gICAgLy8gd2UgY2FuJ3QganVzdCByZWNvbXB1dGUgaXQgKGFuZCBleGVjdXRlIGFjdGlvbnMgd2hpbGUgZG9pbmcgc28pIGJlY2F1c2Ugd2UgdHJ5IHRvIHByZXNlcnZlIGlkZW50aXR5IG9mIGFjdG9ycyBjcmVhdGVkIHdpdGhpbiBpbml0aWFsIGFzc2lnbnNcbiAgICBfZXZlbnQgPT09IGFjdGlvbnMuaW5pdEV2ZW50KSAmJiB0aGlzLm9wdGlvbnMuZXhlY3V0ZSkge1xuICAgICAgdGhpcy5leGVjdXRlKHRoaXMuc3RhdGUpO1xuICAgIH0gLy8gVXBkYXRlIGNoaWxkcmVuXG5cblxuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIF90aGlzLnN0YXRlLmNoaWxkcmVuW2NoaWxkLmlkXSA9IGNoaWxkO1xuICAgIH0pOyAvLyBEZXYgdG9vbHNcblxuICAgIGlmICh0aGlzLmRldlRvb2xzKSB7XG4gICAgICB0aGlzLmRldlRvb2xzLnNlbmQoX2V2ZW50LmRhdGEsIHN0YXRlKTtcbiAgICB9IC8vIEV4ZWN1dGUgbGlzdGVuZXJzXG5cblxuICAgIGlmIChzdGF0ZS5ldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2UgPSBfdHNsaWIuX192YWx1ZXModGhpcy5ldmVudExpc3RlbmVycyksIF9mID0gX2UubmV4dCgpOyAhX2YuZG9uZTsgX2YgPSBfZS5uZXh0KCkpIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfZi52YWx1ZTtcbiAgICAgICAgICBsaXN0ZW5lcihzdGF0ZS5ldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVfMl8xKSB7XG4gICAgICAgIGVfMiA9IHtcbiAgICAgICAgICBlcnJvcjogZV8yXzFcbiAgICAgICAgfTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKF9mICYmICFfZi5kb25lICYmIChfYSA9IF9lLnJldHVybikpIF9hLmNhbGwoX2UpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfZyA9IF90c2xpYi5fX3ZhbHVlcyh0aGlzLmxpc3RlbmVycyksIF9oID0gX2cubmV4dCgpOyAhX2guZG9uZTsgX2ggPSBfZy5uZXh0KCkpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gX2gudmFsdWU7XG4gICAgICAgIGxpc3RlbmVyKHN0YXRlLCBzdGF0ZS5ldmVudCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV8zXzEpIHtcbiAgICAgIGVfMyA9IHtcbiAgICAgICAgZXJyb3I6IGVfM18xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX2ggJiYgIV9oLmRvbmUgJiYgKF9iID0gX2cucmV0dXJuKSkgX2IuY2FsbChfZyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9qID0gX3RzbGliLl9fdmFsdWVzKHRoaXMuY29udGV4dExpc3RlbmVycyksIF9rID0gX2oubmV4dCgpOyAhX2suZG9uZTsgX2sgPSBfai5uZXh0KCkpIHtcbiAgICAgICAgdmFyIGNvbnRleHRMaXN0ZW5lciA9IF9rLnZhbHVlO1xuICAgICAgICBjb250ZXh0TGlzdGVuZXIodGhpcy5zdGF0ZS5jb250ZXh0LCB0aGlzLnN0YXRlLmhpc3RvcnkgPyB0aGlzLnN0YXRlLmhpc3RvcnkuY29udGV4dCA6IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV80XzEpIHtcbiAgICAgIGVfNCA9IHtcbiAgICAgICAgZXJyb3I6IGVfNF8xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX2sgJiYgIV9rLmRvbmUgJiYgKF9jID0gX2oucmV0dXJuKSkgX2MuY2FsbChfaik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV80KSB0aHJvdyBlXzQuZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3RhdGUuZG9uZSkge1xuICAgICAgLy8gZ2V0IGZpbmFsIGNoaWxkIHN0YXRlIG5vZGVcbiAgICAgIHZhciBmaW5hbENoaWxkU3RhdGVOb2RlID0gc3RhdGUuY29uZmlndXJhdGlvbi5maW5kKGZ1bmN0aW9uIChzbikge1xuICAgICAgICByZXR1cm4gc24udHlwZSA9PT0gJ2ZpbmFsJyAmJiBzbi5wYXJlbnQgPT09IF90aGlzLm1hY2hpbmU7XG4gICAgICB9KTtcbiAgICAgIHZhciBkb25lRGF0YSA9IGZpbmFsQ2hpbGRTdGF0ZU5vZGUgJiYgZmluYWxDaGlsZFN0YXRlTm9kZS5kb25lRGF0YSA/IHV0aWxzLm1hcENvbnRleHQoZmluYWxDaGlsZFN0YXRlTm9kZS5kb25lRGF0YSwgc3RhdGUuY29udGV4dCwgX2V2ZW50KSA6IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2wgPSBfdHNsaWIuX192YWx1ZXModGhpcy5kb25lTGlzdGVuZXJzKSwgX20gPSBfbC5uZXh0KCk7ICFfbS5kb25lOyBfbSA9IF9sLm5leHQoKSkge1xuICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF9tLnZhbHVlO1xuICAgICAgICAgIGxpc3RlbmVyKGFjdGlvbnMuZG9uZUludm9rZSh0aGlzLmlkLCBkb25lRGF0YSkpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlXzVfMSkge1xuICAgICAgICBlXzUgPSB7XG4gICAgICAgICAgZXJyb3I6IGVfNV8xXG4gICAgICAgIH07XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChfbSAmJiAhX20uZG9uZSAmJiAoX2QgPSBfbC5yZXR1cm4pKSBfZC5jYWxsKF9sKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoZV81KSB0aHJvdyBlXzUuZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RvcCgpO1xuICAgIH1cbiAgfTtcbiAgLypcclxuICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCBpcyBub3RpZmllZCB3aGVuZXZlciBhIHN0YXRlIHRyYW5zaXRpb24gaGFwcGVucy4gVGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aXRoXHJcbiAgICogdGhlIG5leHQgc3RhdGUgYW5kIHRoZSBldmVudCBvYmplY3QgdGhhdCBjYXVzZWQgdGhlIHN0YXRlIHRyYW5zaXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIHN0YXRlIGxpc3RlbmVyXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUub25UcmFuc2l0aW9uID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTsgLy8gU2VuZCBjdXJyZW50IHN0YXRlIHRvIGxpc3RlbmVyXG5cbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IGV4cG9ydHMuSW50ZXJwcmV0ZXJTdGF0dXMuUnVubmluZykge1xuICAgICAgbGlzdGVuZXIodGhpcy5zdGF0ZSwgdGhpcy5zdGF0ZS5ldmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChuZXh0TGlzdGVuZXJPck9ic2VydmVyLCBfLCAvLyBUT0RPOiBlcnJvciBsaXN0ZW5lclxuICBjb21wbGV0ZUxpc3RlbmVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvYnNlcnZlciA9IHV0aWxzLnRvT2JzZXJ2ZXIobmV4dExpc3RlbmVyT3JPYnNlcnZlciwgXywgY29tcGxldGVMaXN0ZW5lcik7XG4gICAgdGhpcy5saXN0ZW5lcnMuYWRkKG9ic2VydmVyLm5leHQpOyAvLyBTZW5kIGN1cnJlbnQgc3RhdGUgdG8gbGlzdGVuZXJcblxuICAgIGlmICh0aGlzLnN0YXR1cyAhPT0gZXhwb3J0cy5JbnRlcnByZXRlclN0YXR1cy5Ob3RTdGFydGVkKSB7XG4gICAgICBvYnNlcnZlci5uZXh0KHRoaXMuc3RhdGUpO1xuICAgIH1cblxuICAgIHZhciBjb21wbGV0ZU9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5kb25lTGlzdGVuZXJzLmRlbGV0ZShjb21wbGV0ZU9uY2UpO1xuXG4gICAgICBfdGhpcy5zdG9wTGlzdGVuZXJzLmRlbGV0ZShjb21wbGV0ZU9uY2UpO1xuXG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IGV4cG9ydHMuSW50ZXJwcmV0ZXJTdGF0dXMuU3RvcHBlZCkge1xuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkRvbmUoY29tcGxldGVPbmNlKTtcbiAgICAgIHRoaXMub25TdG9wKGNvbXBsZXRlT25jZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmxpc3RlbmVycy5kZWxldGUob2JzZXJ2ZXIubmV4dCk7XG5cbiAgICAgICAgX3RoaXMuZG9uZUxpc3RlbmVycy5kZWxldGUoY29tcGxldGVPbmNlKTtcblxuICAgICAgICBfdGhpcy5zdG9wTGlzdGVuZXJzLmRlbGV0ZShjb21wbGV0ZU9uY2UpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIC8qKlxyXG4gICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBpcyBub3RpZmllZCB3aGVuZXZlciBhbiBldmVudCBpcyBzZW50IHRvIHRoZSBydW5uaW5nIGludGVycHJldGVyLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgZXZlbnQgbGlzdGVuZXJcclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5vbkV2ZW50ID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvKipcclxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaXMgbm90aWZpZWQgd2hlbmV2ZXIgYSBgc2VuZGAgZXZlbnQgb2NjdXJzLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgZXZlbnQgbGlzdGVuZXJcclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5vblNlbmQgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICB0aGlzLnNlbmRMaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLyoqXHJcbiAgICogQWRkcyBhIGNvbnRleHQgbGlzdGVuZXIgdGhhdCBpcyBub3RpZmllZCB3aGVuZXZlciB0aGUgc3RhdGUgY29udGV4dCBjaGFuZ2VzLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY29udGV4dCBsaXN0ZW5lclxyXG4gICAqL1xuXG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5jb250ZXh0TGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8qKlxyXG4gICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IGlzIG5vdGlmaWVkIHdoZW4gdGhlIG1hY2hpbmUgaXMgc3RvcHBlZC5cclxuICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUub25TdG9wID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5zdG9wTGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8qKlxyXG4gICAqIEFkZHMgYSBzdGF0ZSBsaXN0ZW5lciB0aGF0IGlzIG5vdGlmaWVkIHdoZW4gdGhlIHN0YXRlY2hhcnQgaGFzIHJlYWNoZWQgaXRzIGZpbmFsIHN0YXRlLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgc3RhdGUgbGlzdGVuZXJcclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5vbkRvbmUgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICB0aGlzLmRvbmVMaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhIGxpc3RlbmVyLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gcmVtb3ZlXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5zZW5kTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5zdG9wTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5kb25lTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5jb250ZXh0TGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgaW50ZXJwcmV0ZXIgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUsIG9yIHRoZSBpbml0aWFsIHN0YXRlLlxyXG4gICAqIEBwYXJhbSBpbml0aWFsU3RhdGUgVGhlIHN0YXRlIHRvIHN0YXJ0IHRoZSBzdGF0ZWNoYXJ0IGZyb21cclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLlJ1bm5pbmcpIHtcbiAgICAgIC8vIERvIG5vdCByZXN0YXJ0IHRoZSBzZXJ2aWNlIGlmIGl0IGlzIGFscmVhZHkgc3RhcnRlZFxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSAvLyB5ZXMsIGl0J3MgYSBoYWNrIGJ1dCB3ZSBuZWVkIHRoZSByZWxhdGVkIGNhY2hlIHRvIGJlIHBvcHVsYXRlZCBmb3Igc29tZSB0aGluZ3MgdG8gd29yayAobGlrZSBkZWxheWVkIHRyYW5zaXRpb25zKVxuICAgIC8vIHRoaXMgaXMgdXN1YWxseSBjYWxsZWQgYnkgYG1hY2hpbmUuZ2V0SW5pdGlhbFN0YXRlYCBidXQgaWYgd2UgcmVoeWRyYXRlIGZyb20gYSBzdGF0ZSB3ZSBtaWdodCBieXBhc3MgdGhpcyBjYWxsXG4gICAgLy8gd2UgYWxzbyBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgaGVyZSBhcyBpdCByZXNvbHZlcyB0aGUgZnVsbCBpbml0aWFsIHN0YXRlIHdoaWNoIG1pZ2h0IGludm9sdmUgY2FsbGluZyBhc3NpZ24gYWN0aW9uc1xuICAgIC8vIGFuZCB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gc29tZSB1bndhbnRlZCBzaWRlLWVmZmVjdHMgKGV2ZW4gc3VjaCBhcyBjcmVhdGluZyBzb21lIHJvZ3VlIGFjdG9ycylcblxuXG4gICAgdGhpcy5tYWNoaW5lLl9pbml0KCk7XG5cbiAgICByZWdpc3RyeS5yZWdpc3RyeS5yZWdpc3Rlcih0aGlzLnNlc3Npb25JZCwgdGhpcyk7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy5zdGF0dXMgPSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLlJ1bm5pbmc7XG4gICAgdmFyIHJlc29sdmVkU3RhdGUgPSBpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5pdGlhbFN0YXRlIDogc2VydmljZVNjb3BlLnByb3ZpZGUodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFN0YXRlLmlzU3RhdGVDb25maWcoaW5pdGlhbFN0YXRlKSA/IF90aGlzLm1hY2hpbmUucmVzb2x2ZVN0YXRlKGluaXRpYWxTdGF0ZSkgOiBfdGhpcy5tYWNoaW5lLnJlc29sdmVTdGF0ZShTdGF0ZS5TdGF0ZS5mcm9tKGluaXRpYWxTdGF0ZSwgX3RoaXMubWFjaGluZS5jb250ZXh0KSk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRldlRvb2xzKSB7XG4gICAgICB0aGlzLmF0dGFjaERldigpO1xuICAgIH1cblxuICAgIHRoaXMuc2NoZWR1bGVyLmluaXRpYWxpemUoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudXBkYXRlKHJlc29sdmVkU3RhdGUsIGFjdGlvbnMuaW5pdEV2ZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVfNiwgX2EsIGVfNywgX2IsIGVfOCwgX2MsIGVfOSwgX2QsIGVfMTAsIF9lO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9mID0gX3RzbGliLl9fdmFsdWVzKHRoaXMubGlzdGVuZXJzKSwgX2cgPSBfZi5uZXh0KCk7ICFfZy5kb25lOyBfZyA9IF9mLm5leHQoKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBfZy52YWx1ZTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlXzZfMSkge1xuICAgICAgZV82ID0ge1xuICAgICAgICBlcnJvcjogZV82XzFcbiAgICAgIH07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfZyAmJiAhX2cuZG9uZSAmJiAoX2EgPSBfZi5yZXR1cm4pKSBfYS5jYWxsKF9mKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlXzYpIHRocm93IGVfNi5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2ggPSBfdHNsaWIuX192YWx1ZXModGhpcy5zdG9wTGlzdGVuZXJzKSwgX2ogPSBfaC5uZXh0KCk7ICFfai5kb25lOyBfaiA9IF9oLm5leHQoKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBfai52YWx1ZTsgLy8gY2FsbCBsaXN0ZW5lciwgdGhlbiByZW1vdmVcblxuICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLnN0b3BMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlXzdfMSkge1xuICAgICAgZV83ID0ge1xuICAgICAgICBlcnJvcjogZV83XzFcbiAgICAgIH07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfaiAmJiAhX2ouZG9uZSAmJiAoX2IgPSBfaC5yZXR1cm4pKSBfYi5jYWxsKF9oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlXzcpIHRocm93IGVfNy5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2sgPSBfdHNsaWIuX192YWx1ZXModGhpcy5jb250ZXh0TGlzdGVuZXJzKSwgX2wgPSBfay5uZXh0KCk7ICFfbC5kb25lOyBfbCA9IF9rLm5leHQoKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBfbC52YWx1ZTtcbiAgICAgICAgdGhpcy5jb250ZXh0TGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV84XzEpIHtcbiAgICAgIGVfOCA9IHtcbiAgICAgICAgZXJyb3I6IGVfOF8xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX2wgJiYgIV9sLmRvbmUgJiYgKF9jID0gX2sucmV0dXJuKSkgX2MuY2FsbChfayk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV84KSB0aHJvdyBlXzguZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9tID0gX3RzbGliLl9fdmFsdWVzKHRoaXMuZG9uZUxpc3RlbmVycyksIF9vID0gX20ubmV4dCgpOyAhX28uZG9uZTsgX28gPSBfbS5uZXh0KCkpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gX28udmFsdWU7XG4gICAgICAgIHRoaXMuZG9uZUxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfOV8xKSB7XG4gICAgICBlXzkgPSB7XG4gICAgICAgIGVycm9yOiBlXzlfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vICYmICFfby5kb25lICYmIChfZCA9IF9tLnJldHVybikpIF9kLmNhbGwoX20pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfOSkgdGhyb3cgZV85LmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgLy8gSW50ZXJwcmV0ZXIgYWxyZWFkeSBzdG9wcGVkOyBkbyBub3RoaW5nXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5zdGF0dXMgPSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLlN0b3BwZWQ7XG4gICAgdGhpcy5faW5pdGlhbFN0YXRlID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIHdlIGFyZSBnb2luZyB0byBzdG9wIHdpdGhpbiB0aGUgY3VycmVudCBzeW5jIGZyYW1lXG4gICAgICAvLyBzbyB3ZSBjYW4gc2FmZWx5IGp1c3QgY2FuY2VsIHRoaXMgaGVyZSBhcyBub3RoaW5nIGFzeW5jIHNob3VsZCBiZSBmaXJlZCBhbnl3YXlcbiAgICAgIGZvciAodmFyIF9wID0gX3RzbGliLl9fdmFsdWVzKE9iamVjdC5rZXlzKHRoaXMuZGVsYXllZEV2ZW50c01hcCkpLCBfcSA9IF9wLm5leHQoKTsgIV9xLmRvbmU7IF9xID0gX3AubmV4dCgpKSB7XG4gICAgICAgIHZhciBrZXkgPSBfcS52YWx1ZTtcbiAgICAgICAgdGhpcy5jbG9jay5jbGVhclRpbWVvdXQodGhpcy5kZWxheWVkRXZlbnRzTWFwW2tleV0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfMTBfMSkge1xuICAgICAgZV8xMCA9IHtcbiAgICAgICAgZXJyb3I6IGVfMTBfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9xICYmICFfcS5kb25lICYmIChfZSA9IF9wLnJldHVybikpIF9lLmNhbGwoX3ApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfMTApIHRocm93IGVfMTAuZXJyb3I7XG4gICAgICB9XG4gICAgfSAvLyBjbGVhciBldmVyeXRoaW5nIHRoYXQgbWlnaHQgYmUgZW5xdWV1ZWRcblxuXG4gICAgdGhpcy5zY2hlZHVsZXIuY2xlYXIoKTtcbiAgICB0aGlzLnNjaGVkdWxlciA9IG5ldyBzY2hlZHVsZXIuU2NoZWR1bGVyKHtcbiAgICAgIGRlZmVyRXZlbnRzOiB0aGlzLm9wdGlvbnMuZGVmZXJFdmVudHNcbiAgICB9KTtcbiAgfTtcbiAgLyoqXHJcbiAgICogU3RvcHMgdGhlIGludGVycHJldGVyIGFuZCB1bnN1YnNjcmliZSBhbGwgbGlzdGVuZXJzLlxyXG4gICAqXHJcbiAgICogVGhpcyB3aWxsIGFsc28gbm90aWZ5IHRoZSBgb25TdG9wYCBsaXN0ZW5lcnMuXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUT0RPOiBhZGQgd2FybmluZyBmb3Igc3RvcHBpbmcgbm9uLXJvb3QgaW50ZXJwcmV0ZXJzXG4gICAgdmFyIF90aGlzID0gdGhpczsgLy8gZ3JhYiB0aGUgY3VycmVudCBzY2hlZHVsZXIgYXMgaXQgd2lsbCBiZSByZXBsYWNlZCBpbiBfc3RvcFxuXG5cbiAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG5cbiAgICB0aGlzLl9zdG9wKCk7IC8vIGxldCB3aGF0IGlzIGN1cnJlbnRseSBwcm9jZXNzZWQgdG8gYmUgZmluaXNoZWRcblxuXG4gICAgc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGl0IGZlZWxzIHdlaXJkIHRvIGhhbmRsZSB0aGlzIGhlcmUgYnV0IHdlIG5lZWQgdG8gaGFuZGxlIHRoaXMgZXZlbiBzbGlnaHRseSBcIm91dCBvZiBiYW5kXCJcbiAgICAgIHZhciBfZXZlbnQgPSB1dGlscy50b1NDWE1MRXZlbnQoe1xuICAgICAgICB0eXBlOiAneHN0YXRlLnN0b3AnXG4gICAgICB9KTtcblxuICAgICAgdmFyIG5leHRTdGF0ZSA9IHNlcnZpY2VTY29wZS5wcm92aWRlKF90aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBleGl0QWN0aW9ucyA9IHV0aWxzLmZsYXR0ZW4oX3RzbGliLl9fc3ByZWFkQXJyYXkoW10sIF90c2xpYi5fX3JlYWQoX3RoaXMuc3RhdGUuY29uZmlndXJhdGlvbiksIGZhbHNlKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGIub3JkZXIgLSBhLm9yZGVyO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHN0YXRlTm9kZSkge1xuICAgICAgICAgIHJldHVybiBhY3Rpb25zLnRvQWN0aW9uT2JqZWN0cyhzdGF0ZU5vZGUub25FeGl0LCBfdGhpcy5tYWNoaW5lLm9wdGlvbnMuYWN0aW9ucyk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICB2YXIgX2EgPSBfdHNsaWIuX19yZWFkKGFjdGlvbnMucmVzb2x2ZUFjdGlvbnMoX3RoaXMubWFjaGluZSwgX3RoaXMuc3RhdGUsIF90aGlzLnN0YXRlLmNvbnRleHQsIF9ldmVudCwgZXhpdEFjdGlvbnMsIF90aGlzLm1hY2hpbmUuY29uZmlnLnByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzID8gX3RoaXMuX2V4ZWMgOiB1bmRlZmluZWQsIF90aGlzLm1hY2hpbmUuY29uZmlnLnByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzIHx8IF90aGlzLm1hY2hpbmUuY29uZmlnLnByZXNlcnZlQWN0aW9uT3JkZXIpLCAyKSxcbiAgICAgICAgICAgIHJlc29sdmVkQWN0aW9ucyA9IF9hWzBdLFxuICAgICAgICAgICAgdXBkYXRlZENvbnRleHQgPSBfYVsxXTtcblxuICAgICAgICB2YXIgbmV3U3RhdGUgPSBuZXcgU3RhdGUuU3RhdGUoe1xuICAgICAgICAgIHZhbHVlOiBfdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICBjb250ZXh0OiB1cGRhdGVkQ29udGV4dCxcbiAgICAgICAgICBfZXZlbnQ6IF9ldmVudCxcbiAgICAgICAgICBfc2Vzc2lvbmlkOiBfdGhpcy5zZXNzaW9uSWQsXG4gICAgICAgICAgaGlzdG9yeVZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgaGlzdG9yeTogX3RoaXMuc3RhdGUsXG4gICAgICAgICAgYWN0aW9uczogcmVzb2x2ZWRBY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLnR5cGUgIT09IGFjdGlvblR5cGVzLnJhaXNlICYmIChhY3Rpb24udHlwZSAhPT0gYWN0aW9uVHlwZXMuc2VuZCB8fCAhIWFjdGlvbi50byAmJiBhY3Rpb24udG8gIT09IHR5cGVzLlNwZWNpYWxUYXJnZXRzLkludGVybmFsKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBhY3Rpdml0aWVzOiB7fSxcbiAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb246IFtdLFxuICAgICAgICAgIHRyYW5zaXRpb25zOiBbXSxcbiAgICAgICAgICBjaGlsZHJlbjoge30sXG4gICAgICAgICAgZG9uZTogX3RoaXMuc3RhdGUuZG9uZSxcbiAgICAgICAgICB0YWdzOiBfdGhpcy5zdGF0ZS50YWdzLFxuICAgICAgICAgIG1hY2hpbmU6IF90aGlzLm1hY2hpbmVcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld1N0YXRlLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMudXBkYXRlKG5leHRTdGF0ZSwgX2V2ZW50KTsgLy8gVE9ETzogdGhpbmsgYWJvdXQgY29udmVydGluZyB0aG9zZSB0byBhY3Rpb25zXG4gICAgICAvLyBTdG9wIGFsbCBjaGlsZHJlblxuXG5cbiAgICAgIF90aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKGNoaWxkLnN0b3ApKSB7XG4gICAgICAgICAgY2hpbGQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuY2hpbGRyZW4uY2xlYXIoKTtcblxuICAgICAgcmVnaXN0cnkucmVnaXN0cnkuZnJlZShfdGhpcy5zZXNzaW9uSWQpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5iYXRjaCA9IGZ1bmN0aW9uIChldmVudHMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLk5vdFN0YXJ0ZWQgJiYgdGhpcy5vcHRpb25zLmRlZmVyRXZlbnRzKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgaWYgKCFlbnZpcm9ubWVudC5JU19QUk9EVUNUSU9OKSB7XG4gICAgICAgIHV0aWxzLndhcm4oZmFsc2UsIFwiXCIuY29uY2F0KGV2ZW50cy5sZW5ndGgsIFwiIGV2ZW50KHMpIHdlcmUgc2VudCB0byB1bmluaXRpYWxpemVkIHNlcnZpY2UgXFxcIlwiKS5jb25jYXQodGhpcy5tYWNoaW5lLmlkLCBcIlxcXCIgYW5kIGFyZSBkZWZlcnJlZC4gTWFrZSBzdXJlIC5zdGFydCgpIGlzIGNhbGxlZCBmb3IgdGhpcyBzZXJ2aWNlLlxcbkV2ZW50OiBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KGV2ZW50KSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0dXMgIT09IGV4cG9ydHMuSW50ZXJwcmV0ZXJTdGF0dXMuUnVubmluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICBcIlwiLmNvbmNhdChldmVudHMubGVuZ3RoLCBcIiBldmVudChzKSB3ZXJlIHNlbnQgdG8gdW5pbml0aWFsaXplZCBzZXJ2aWNlIFxcXCJcIikuY29uY2F0KHRoaXMubWFjaGluZS5pZCwgXCJcXFwiLiBNYWtlIHN1cmUgLnN0YXJ0KCkgaXMgY2FsbGVkIGZvciB0aGlzIHNlcnZpY2UsIG9yIHNldCB7IGRlZmVyRXZlbnRzOiB0cnVlIH0gaW4gdGhlIHNlcnZpY2Ugb3B0aW9ucy5cIikpO1xuICAgIH1cblxuICAgIHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlXzExLCBfYTtcblxuICAgICAgdmFyIG5leHRTdGF0ZSA9IF90aGlzLnN0YXRlO1xuICAgICAgdmFyIGJhdGNoQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdmFyIGJhdGNoZWRBY3Rpb25zID0gW107XG5cbiAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGV2ZW50XzEpIHtcbiAgICAgICAgdmFyIF9ldmVudCA9IHV0aWxzLnRvU0NYTUxFdmVudChldmVudF8xKTtcblxuICAgICAgICBfdGhpcy5mb3J3YXJkKF9ldmVudCk7XG5cbiAgICAgICAgbmV4dFN0YXRlID0gc2VydmljZVNjb3BlLnByb3ZpZGUoX3RoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMubWFjaGluZS50cmFuc2l0aW9uKG5leHRTdGF0ZSwgX2V2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJhdGNoZWRBY3Rpb25zLnB1c2guYXBwbHkoYmF0Y2hlZEFjdGlvbnMsIF90c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBfdHNsaWIuX19yZWFkKG5leHRTdGF0ZS5hY3Rpb25zLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBTdGF0ZS5iaW5kQWN0aW9uVG9TdGF0ZShhLCBuZXh0U3RhdGUpO1xuICAgICAgICB9KSksIGZhbHNlKSk7XG4gICAgICAgIGJhdGNoQ2hhbmdlZCA9IGJhdGNoQ2hhbmdlZCB8fCAhIW5leHRTdGF0ZS5jaGFuZ2VkO1xuICAgICAgfTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgZXZlbnRzXzEgPSBfdHNsaWIuX192YWx1ZXMoZXZlbnRzKSwgZXZlbnRzXzFfMSA9IGV2ZW50c18xLm5leHQoKTsgIWV2ZW50c18xXzEuZG9uZTsgZXZlbnRzXzFfMSA9IGV2ZW50c18xLm5leHQoKSkge1xuICAgICAgICAgIHZhciBldmVudF8xID0gZXZlbnRzXzFfMS52YWx1ZTtcblxuICAgICAgICAgIF9sb29wXzEoZXZlbnRfMSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVfMTFfMSkge1xuICAgICAgICBlXzExID0ge1xuICAgICAgICAgIGVycm9yOiBlXzExXzFcbiAgICAgICAgfTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGV2ZW50c18xXzEgJiYgIWV2ZW50c18xXzEuZG9uZSAmJiAoX2EgPSBldmVudHNfMS5yZXR1cm4pKSBfYS5jYWxsKGV2ZW50c18xKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoZV8xMSkgdGhyb3cgZV8xMS5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGUuY2hhbmdlZCA9IGJhdGNoQ2hhbmdlZDtcbiAgICAgIG5leHRTdGF0ZS5hY3Rpb25zID0gYmF0Y2hlZEFjdGlvbnM7XG5cbiAgICAgIF90aGlzLnVwZGF0ZShuZXh0U3RhdGUsIHV0aWxzLnRvU0NYTUxFdmVudChldmVudHNbZXZlbnRzLmxlbmd0aCAtIDFdKSk7XG4gICAgfSk7XG4gIH07XG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBzZW5kIGZ1bmN0aW9uIGJvdW5kIHRvIHRoaXMgaW50ZXJwcmV0ZXIgaW5zdGFuY2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIGJlIHNlbnQgYnkgdGhlIHNlbmRlci5cclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zZW5kZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kLmJpbmQodGhpcywgZXZlbnQpO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5fbmV4dFN0YXRlID0gZnVuY3Rpb24gKGV2ZW50LCBleGVjKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChleGVjID09PSB2b2lkIDApIHtcbiAgICAgIGV4ZWMgPSAhIXRoaXMubWFjaGluZS5jb25maWcucHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMgJiYgdGhpcy5fZXhlYztcbiAgICB9XG5cbiAgICB2YXIgX2V2ZW50ID0gdXRpbHMudG9TQ1hNTEV2ZW50KGV2ZW50KTtcblxuICAgIGlmIChfZXZlbnQubmFtZS5pbmRleE9mKGFjdGlvblR5cGVzLmVycm9yUGxhdGZvcm0pID09PSAwICYmICF0aGlzLnN0YXRlLm5leHRFdmVudHMuc29tZShmdW5jdGlvbiAobmV4dEV2ZW50KSB7XG4gICAgICByZXR1cm4gbmV4dEV2ZW50LmluZGV4T2YoYWN0aW9uVHlwZXMuZXJyb3JQbGF0Zm9ybSkgPT09IDA7XG4gICAgfSkpIHtcbiAgICAgIHRocm93IF9ldmVudC5kYXRhLmRhdGE7XG4gICAgfVxuXG4gICAgdmFyIG5leHRTdGF0ZSA9IHNlcnZpY2VTY29wZS5wcm92aWRlKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5tYWNoaW5lLnRyYW5zaXRpb24oX3RoaXMuc3RhdGUsIF9ldmVudCwgdW5kZWZpbmVkLCBleGVjIHx8IHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfTtcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgbmV4dCBzdGF0ZSBnaXZlbiB0aGUgaW50ZXJwcmV0ZXIncyBjdXJyZW50IHN0YXRlIGFuZCB0aGUgZXZlbnQuXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIGEgcHVyZSBtZXRob2QgdGhhdCBkb2VzIF9ub3RfIHVwZGF0ZSB0aGUgaW50ZXJwcmV0ZXIncyBzdGF0ZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gZGV0ZXJtaW5lIHRoZSBuZXh0IHN0YXRlXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUubmV4dFN0YXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX25leHRTdGF0ZShldmVudCwgZmFsc2UpO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGVfMTIsIF9hO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9iID0gX3RzbGliLl9fdmFsdWVzKHRoaXMuZm9yd2FyZFRvKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICB2YXIgaWQgPSBfYy52YWx1ZTtcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoaWQpO1xuXG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZm9yd2FyZCBldmVudCAnXCIuY29uY2F0KGV2ZW50LCBcIicgZnJvbSBpbnRlcnByZXRlciAnXCIpLmNvbmNhdCh0aGlzLmlkLCBcIicgdG8gbm9uZXhpc3RhbnQgY2hpbGQgJ1wiKS5jb25jYXQoaWQsIFwiJy5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuc2VuZChldmVudCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV8xMl8xKSB7XG4gICAgICBlXzEyID0ge1xuICAgICAgICBlcnJvcjogZV8xMl8xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV8xMikgdGhyb3cgZV8xMi5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLmRlZmVyID0gZnVuY3Rpb24gKHNlbmRBY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5kZWxheWVkRXZlbnRzTWFwW3NlbmRBY3Rpb24uaWRdID0gdGhpcy5jbG9jay5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZW5kQWN0aW9uLnRvKSB7XG4gICAgICAgIF90aGlzLnNlbmRUbyhzZW5kQWN0aW9uLl9ldmVudCwgc2VuZEFjdGlvbi50byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZW5kKHNlbmRBY3Rpb24uX2V2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBzZW5kQWN0aW9uLmRlbGF5KTtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKHNlbmRJZCkge1xuICAgIHRoaXMuY2xvY2suY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXllZEV2ZW50c01hcFtzZW5kSWRdKTtcbiAgICBkZWxldGUgdGhpcy5kZWxheWVkRXZlbnRzTWFwW3NlbmRJZF07XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSwgYWN0aW9uRnVuY3Rpb25NYXApIHtcbiAgICBpZiAoYWN0aW9uRnVuY3Rpb25NYXAgPT09IHZvaWQgMCkge1xuICAgICAgYWN0aW9uRnVuY3Rpb25NYXAgPSB0aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpb25zO1xuICAgIH1cblxuICAgIHRoaXMuX2V4ZWMoYWN0aW9uLCBzdGF0ZS5jb250ZXh0LCBzdGF0ZS5fZXZlbnQsIGFjdGlvbkZ1bmN0aW9uTWFwKTtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgIHZhciBfYTtcblxuICAgIHRoaXMuY2hpbGRyZW4uZGVsZXRlKGNoaWxkSWQpO1xuICAgIHRoaXMuZm9yd2FyZFRvLmRlbGV0ZShjaGlsZElkKTsgLy8gdGhpcy5zdGF0ZSBtaWdodCBub3QgZXhpc3QgYXQgdGhlIHRpbWUgdGhpcyBpcyBjYWxsZWQsXG4gICAgLy8gc3VjaCBhcyB3aGVuIGEgY2hpbGQgaXMgYWRkZWQgdGhlbiByZW1vdmVkIHdoaWxlIGluaXRpYWxpemluZyB0aGUgc3RhdGVcblxuICAgIChfYSA9IHRoaXMuc3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB0cnVlIDogZGVsZXRlIF9hLmNoaWxkcmVuW2NoaWxkSWRdO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zdG9wQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGNoaWxkSWQpO1xuXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGRJZCk7XG5cbiAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihjaGlsZC5zdG9wKSkge1xuICAgICAgY2hpbGQuc3RvcCgpO1xuICAgIH1cbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3Bhd24gPSBmdW5jdGlvbiAoZW50aXR5LCBuYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMuc3RhdHVzICE9PSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLlJ1bm5pbmcpIHtcbiAgICAgIHJldHVybiBBY3Rvci5jcmVhdGVEZWZlcnJlZEFjdG9yKGVudGl0eSwgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzUHJvbWlzZUxpa2UoZW50aXR5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Bhd25Qcm9taXNlKFByb21pc2UucmVzb2x2ZShlbnRpdHkpLCBuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZW50aXR5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Bhd25DYWxsYmFjayhlbnRpdHksIG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoQWN0b3IuaXNTcGF3bmVkQWN0b3IoZW50aXR5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Bhd25BY3RvcihlbnRpdHksIG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYnNlcnZhYmxlKGVudGl0eSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYXduT2JzZXJ2YWJsZShlbnRpdHksIG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNNYWNoaW5lKGVudGl0eSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYXduTWFjaGluZShlbnRpdHksIF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7XG4gICAgICAgIGlkOiBuYW1lXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0JlaGF2aW9yKGVudGl0eSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYXduQmVoYXZpb3IoZW50aXR5LCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHNwYXduIGVudGl0eSBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiBvZiB0eXBlIFxcXCJcIikuY29uY2F0KHR5cGVvZiBlbnRpdHksIFwiXFxcIi5cIikpO1xuICAgIH1cbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3Bhd25NYWNoaW5lID0gZnVuY3Rpb24gKG1hY2hpbmUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBjaGlsZFNlcnZpY2UgPSBuZXcgSW50ZXJwcmV0ZXIobWFjaGluZSwgX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgdGhpcy5vcHRpb25zKSwge1xuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgaWQ6IG9wdGlvbnMuaWQgfHwgbWFjaGluZS5pZFxuICAgIH0pKTtcblxuICAgIHZhciByZXNvbHZlZE9wdGlvbnMgPSBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHt9LCBERUZBVUxUX1NQQVdOX09QVElPTlMpLCBvcHRpb25zKTtcblxuICAgIGlmIChyZXNvbHZlZE9wdGlvbnMuc3luYykge1xuICAgICAgY2hpbGRTZXJ2aWNlLm9uVHJhbnNpdGlvbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgX3RoaXMuc2VuZChhY3Rpb25UeXBlcy51cGRhdGUsIHtcbiAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgaWQ6IGNoaWxkU2VydmljZS5pZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBhY3RvciA9IGNoaWxkU2VydmljZTtcbiAgICB0aGlzLmNoaWxkcmVuLnNldChjaGlsZFNlcnZpY2UuaWQsIGFjdG9yKTtcblxuICAgIGlmIChyZXNvbHZlZE9wdGlvbnMuYXV0b0ZvcndhcmQpIHtcbiAgICAgIHRoaXMuZm9yd2FyZFRvLmFkZChjaGlsZFNlcnZpY2UuaWQpO1xuICAgIH1cblxuICAgIGNoaWxkU2VydmljZS5vbkRvbmUoZnVuY3Rpb24gKGRvbmVFdmVudCkge1xuICAgICAgX3RoaXMucmVtb3ZlQ2hpbGQoY2hpbGRTZXJ2aWNlLmlkKTtcblxuICAgICAgX3RoaXMuc2VuZCh1dGlscy50b1NDWE1MRXZlbnQoZG9uZUV2ZW50LCB7XG4gICAgICAgIG9yaWdpbjogY2hpbGRTZXJ2aWNlLmlkXG4gICAgICB9KSk7XG4gICAgfSkuc3RhcnQoKTtcbiAgICByZXR1cm4gYWN0b3I7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnNwYXduQmVoYXZpb3IgPSBmdW5jdGlvbiAoYmVoYXZpb3IsIGlkKSB7XG4gICAgdmFyIGFjdG9yUmVmID0gYmVoYXZpb3JzLnNwYXduQmVoYXZpb3IoYmVoYXZpb3IsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pO1xuICAgIHRoaXMuY2hpbGRyZW4uc2V0KGlkLCBhY3RvclJlZik7XG4gICAgcmV0dXJuIGFjdG9yUmVmO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zcGF3blByb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZSwgaWQpIHtcbiAgICB2YXIgX2E7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbmNlbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlc29sdmVkRGF0YTtcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAoIWNhbmNlbGVkKSB7XG4gICAgICAgIHJlc29sdmVkRGF0YSA9IHJlc3BvbnNlO1xuXG4gICAgICAgIF90aGlzLnJlbW92ZUNoaWxkKGlkKTtcblxuICAgICAgICBfdGhpcy5zZW5kKHV0aWxzLnRvU0NYTUxFdmVudChhY3Rpb25zLmRvbmVJbnZva2UoaWQsIHJlc3BvbnNlKSwge1xuICAgICAgICAgIG9yaWdpbjogaWRcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlcnJvckRhdGEpIHtcbiAgICAgIGlmICghY2FuY2VsZWQpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlQ2hpbGQoaWQpO1xuXG4gICAgICAgIHZhciBlcnJvckV2ZW50ID0gYWN0aW9ucy5lcnJvcihpZCwgZXJyb3JEYXRhKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFNlbmQgXCJlcnJvci5wbGF0Zm9ybS5pZFwiIHRvIHRoaXMgKHBhcmVudCkuXG4gICAgICAgICAgX3RoaXMuc2VuZCh1dGlscy50b1NDWE1MRXZlbnQoZXJyb3JFdmVudCwge1xuICAgICAgICAgICAgb3JpZ2luOiBpZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB1dGlscy5yZXBvcnRVbmhhbmRsZWRFeGNlcHRpb25Pbkludm9jYXRpb24oZXJyb3JEYXRhLCBlcnJvciwgaWQpO1xuXG4gICAgICAgICAgaWYgKF90aGlzLmRldlRvb2xzKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXZUb29scy5zZW5kKGVycm9yRXZlbnQsIF90aGlzLnN0YXRlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3RoaXMubWFjaGluZS5zdHJpY3QpIHtcbiAgICAgICAgICAgIC8vIGl0IHdvdWxkIGJlIGJldHRlciB0byBhbHdheXMgc3RvcCB0aGUgc3RhdGUgbWFjaGluZSBpZiB1bmhhbmRsZWRcbiAgICAgICAgICAgIC8vIGV4Y2VwdGlvbi9wcm9taXNlIHJlamVjdGlvbiBoYXBwZW5zIGJ1dCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgIC8vIGJyZWFrIGV4aXN0aW5nIGNvZGUgc28gZW5mb3JjZSBpdCBvbiBzdHJpY3QgbW9kZSBvbmx5IGVzcGVjaWFsbHkgc29cbiAgICAgICAgICAgIC8vIGJlY2F1c2UgZG9jdW1lbnRhdGlvbiBzYXlzIHRoYXQgb25FcnJvciBpcyBvcHRpb25hbFxuICAgICAgICAgICAgX3RoaXMuc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBhY3RvciA9IChfYSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHNlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH0sXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChuZXh0LCBoYW5kbGVFcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gdXRpbHMudG9PYnNlcnZlcihuZXh0LCBoYW5kbGVFcnJvciwgY29tcGxldGUpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAodW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dChyZXNwb25zZSk7XG5cbiAgICAgICAgICBpZiAodW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmICh1bnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBpZFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGdldFNuYXBzaG90OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlZERhdGE7XG4gICAgICB9XG4gICAgfSwgX2FbdXRpbHMuc3ltYm9sT2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfYSk7XG4gICAgdGhpcy5jaGlsZHJlbi5zZXQoaWQsIGFjdG9yKTtcbiAgICByZXR1cm4gYWN0b3I7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnNwYXduQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGlkKSB7XG4gICAgdmFyIF9hO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjYW5jZWxlZCA9IGZhbHNlO1xuICAgIHZhciByZWNlaXZlcnMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIGxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgZW1pdHRlZDtcblxuICAgIHZhciByZWNlaXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGVtaXR0ZWQgPSBlO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcihlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY2FuY2VsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZW5kKHV0aWxzLnRvU0NYTUxFdmVudChlLCB7XG4gICAgICAgIG9yaWdpbjogaWRcbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgdmFyIGNhbGxiYWNrU3RvcDtcblxuICAgIHRyeSB7XG4gICAgICBjYWxsYmFja1N0b3AgPSBjYWxsYmFjayhyZWNlaXZlLCBmdW5jdGlvbiAobmV3TGlzdGVuZXIpIHtcbiAgICAgICAgcmVjZWl2ZXJzLmFkZChuZXdMaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuc2VuZChhY3Rpb25zLmVycm9yKGlkLCBlcnIpKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNQcm9taXNlTGlrZShjYWxsYmFja1N0b3ApKSB7XG4gICAgICAvLyBpdCB0dXJuZWQgb3V0IHRvIGJlIGFuIGFzeW5jIGZ1bmN0aW9uLCBjYW4ndCByZWxpYWJseSBjaGVjayB0aGlzIGJlZm9yZSBjYWxsaW5nIGBjYWxsYmFja2BcbiAgICAgIC8vIGJlY2F1c2UgdHJhbnNwaWxlZCBhc3luYyBmdW5jdGlvbnMgYXJlIG5vdCByZWNvZ25pemFibGVcbiAgICAgIHJldHVybiB0aGlzLnNwYXduUHJvbWlzZShjYWxsYmFja1N0b3AsIGlkKTtcbiAgICB9XG5cbiAgICB2YXIgYWN0b3IgPSAoX2EgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBzZW5kOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNlaXZlcikge1xuICAgICAgICAgIHJldHVybiByZWNlaXZlcihldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gdXRpbHMudG9PYnNlcnZlcihuZXh0KTtcbiAgICAgICAgbGlzdGVuZXJzLmFkZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYW5jZWxlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oY2FsbGJhY2tTdG9wKSkge1xuICAgICAgICAgIGNhbGxiYWNrU3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IGlkXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGVtaXR0ZWQ7XG4gICAgICB9XG4gICAgfSwgX2FbdXRpbHMuc3ltYm9sT2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfYSk7XG4gICAgdGhpcy5jaGlsZHJlbi5zZXQoaWQsIGFjdG9yKTtcbiAgICByZXR1cm4gYWN0b3I7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnNwYXduT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGlkKSB7XG4gICAgdmFyIF9hO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBlbWl0dGVkO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgZW1pdHRlZCA9IHZhbHVlO1xuXG4gICAgICBfdGhpcy5zZW5kKHV0aWxzLnRvU0NYTUxFdmVudCh2YWx1ZSwge1xuICAgICAgICBvcmlnaW46IGlkXG4gICAgICB9KSk7XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgX3RoaXMucmVtb3ZlQ2hpbGQoaWQpO1xuXG4gICAgICBfdGhpcy5zZW5kKHV0aWxzLnRvU0NYTUxFdmVudChhY3Rpb25zLmVycm9yKGlkLCBlcnIpLCB7XG4gICAgICAgIG9yaWdpbjogaWRcbiAgICAgIH0pKTtcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZW1vdmVDaGlsZChpZCk7XG5cbiAgICAgIF90aGlzLnNlbmQodXRpbHMudG9TQ1hNTEV2ZW50KGFjdGlvbnMuZG9uZUludm9rZShpZCksIHtcbiAgICAgICAgb3JpZ2luOiBpZFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHZhciBhY3RvciA9IChfYSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHNlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH0sXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChuZXh0LCBoYW5kbGVFcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV4dCwgaGFuZGxlRXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgIH0sXG4gICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH0sXG4gICAgICBnZXRTbmFwc2hvdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZW1pdHRlZDtcbiAgICAgIH0sXG4gICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogaWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfYVt1dGlscy5zeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9hKTtcbiAgICB0aGlzLmNoaWxkcmVuLnNldChpZCwgYWN0b3IpO1xuICAgIHJldHVybiBhY3RvcjtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3Bhd25BY3RvciA9IGZ1bmN0aW9uIChhY3RvciwgbmFtZSkge1xuICAgIHRoaXMuY2hpbGRyZW4uc2V0KG5hbWUsIGFjdG9yKTtcbiAgICByZXR1cm4gYWN0b3I7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnNwYXduQWN0aXZpdHkgPSBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcbiAgICB2YXIgaW1wbGVtZW50YXRpb24gPSB0aGlzLm1hY2hpbmUub3B0aW9ucyAmJiB0aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpdml0aWVzID8gdGhpcy5tYWNoaW5lLm9wdGlvbnMuYWN0aXZpdGllc1thY3Rpdml0eS50eXBlXSA6IHVuZGVmaW5lZDtcblxuICAgIGlmICghaW1wbGVtZW50YXRpb24pIHtcbiAgICAgIGlmICghZW52aXJvbm1lbnQuSVNfUFJPRFVDVElPTikge1xuICAgICAgICB1dGlscy53YXJuKGZhbHNlLCBcIk5vIGltcGxlbWVudGF0aW9uIGZvdW5kIGZvciBhY3Rpdml0eSAnXCIuY29uY2F0KGFjdGl2aXR5LnR5cGUsIFwiJ1wiKSk7XG4gICAgICB9IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG5cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3RhcnQgaW1wbGVtZW50YXRpb25cblxuXG4gICAgdmFyIGRpc3Bvc2UgPSBpbXBsZW1lbnRhdGlvbih0aGlzLnN0YXRlLmNvbnRleHQsIGFjdGl2aXR5KTtcbiAgICB0aGlzLnNwYXduRWZmZWN0KGFjdGl2aXR5LmlkLCBkaXNwb3NlKTtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3Bhd25FZmZlY3QgPSBmdW5jdGlvbiAoaWQsIGRpc3Bvc2UpIHtcbiAgICB2YXIgX2E7XG5cbiAgICB0aGlzLmNoaWxkcmVuLnNldChpZCwgKF9hID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgc2VuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBzdG9wOiBkaXNwb3NlIHx8IHVuZGVmaW5lZCxcbiAgICAgIGdldFNuYXBzaG90OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9LFxuICAgICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IGlkXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX2FbdXRpbHMuc3ltYm9sT2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfYSkpO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5hdHRhY2hEZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdsb2JhbCA9IGRldlRvb2xzLmdldEdsb2JhbCgpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZXZUb29scyAmJiBnbG9iYWwpIHtcbiAgICAgIGlmIChnbG9iYWwuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXykge1xuICAgICAgICB2YXIgZGV2VG9vbHNPcHRpb25zID0gdHlwZW9mIHRoaXMub3B0aW9ucy5kZXZUb29scyA9PT0gJ29iamVjdCcgPyB0aGlzLm9wdGlvbnMuZGV2VG9vbHMgOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZGV2VG9vbHMgPSBnbG9iYWwuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXy5jb25uZWN0KF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe1xuICAgICAgICAgIG5hbWU6IHRoaXMuaWQsXG4gICAgICAgICAgYXV0b1BhdXNlOiB0cnVlLFxuICAgICAgICAgIHN0YXRlU2FuaXRpemVyOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlOiBzdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgY29udGV4dDogc3RhdGUuY29udGV4dCxcbiAgICAgICAgICAgICAgYWN0aW9uczogc3RhdGUuYWN0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGRldlRvb2xzT3B0aW9ucyksIHtcbiAgICAgICAgICBmZWF0dXJlczogX3RzbGliLl9fYXNzaWduKHtcbiAgICAgICAgICAgIGp1bXA6IGZhbHNlLFxuICAgICAgICAgICAgc2tpcDogZmFsc2VcbiAgICAgICAgICB9LCBkZXZUb29sc09wdGlvbnMgPyBkZXZUb29sc09wdGlvbnMuZmVhdHVyZXMgOiB1bmRlZmluZWQpXG4gICAgICAgIH0pLCB0aGlzLm1hY2hpbmUpO1xuICAgICAgICB0aGlzLmRldlRvb2xzLmluaXQodGhpcy5zdGF0ZSk7XG4gICAgICB9IC8vIGFkZCBYU3RhdGUtc3BlY2lmaWMgZGV2IHRvb2xpbmcgaG9va1xuXG5cbiAgICAgIGRldlRvb2xzLnJlZ2lzdGVyU2VydmljZSh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHRoaXMuaWRcbiAgICB9O1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZVt1dGlscy5zeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuZ2V0U25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBleHBvcnRzLkludGVycHJldGVyU3RhdHVzLk5vdFN0YXJ0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gIH07XG4gIC8qKlxyXG4gICAqIFRoZSBkZWZhdWx0IGludGVycHJldGVyIG9wdGlvbnM6XHJcbiAgICpcclxuICAgKiAtIGBjbG9ja2AgdXNlcyB0aGUgZ2xvYmFsIGBzZXRUaW1lb3V0YCBhbmQgYGNsZWFyVGltZW91dGAgZnVuY3Rpb25zXHJcbiAgICogLSBgbG9nZ2VyYCB1c2VzIHRoZSBnbG9iYWwgYGNvbnNvbGUubG9nKClgIG1ldGhvZFxyXG4gICAqL1xuXG5cbiAgSW50ZXJwcmV0ZXIuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgZXhlY3V0ZTogdHJ1ZSxcbiAgICBkZWZlckV2ZW50czogdHJ1ZSxcbiAgICBjbG9jazoge1xuICAgICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGZuLCBtcykge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmbiwgbXMpO1xuICAgICAgfSxcbiAgICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbG9nZ2VyOiAvKiNfX1BVUkVfXyovY29uc29sZS5sb2cuYmluZChjb25zb2xlKSxcbiAgICBkZXZUb29sczogZmFsc2VcbiAgfTtcbiAgSW50ZXJwcmV0ZXIuaW50ZXJwcmV0ID0gaW50ZXJwcmV0O1xuICByZXR1cm4gSW50ZXJwcmV0ZXI7XG59KCk7XG5cbnZhciByZXNvbHZlU3Bhd25PcHRpb25zID0gZnVuY3Rpb24gKG5hbWVPck9wdGlvbnMpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKG5hbWVPck9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIERFRkFVTFRfU1BBV05fT1BUSU9OUyksIHtcbiAgICAgIG5hbWU6IG5hbWVPck9wdGlvbnNcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgREVGQVVMVF9TUEFXTl9PUFRJT05TKSwge1xuICAgIG5hbWU6IHV0aWxzLnVuaXF1ZUlkKClcbiAgfSksIG5hbWVPck9wdGlvbnMpO1xufTtcblxuZnVuY3Rpb24gc3Bhd24oZW50aXR5LCBuYW1lT3JPcHRpb25zKSB7XG4gIHZhciByZXNvbHZlZE9wdGlvbnMgPSByZXNvbHZlU3Bhd25PcHRpb25zKG5hbWVPck9wdGlvbnMpO1xuICByZXR1cm4gc2VydmljZVNjb3BlLmNvbnN1bWUoZnVuY3Rpb24gKHNlcnZpY2UpIHtcbiAgICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICAgIHZhciBpc0xhenlFbnRpdHkgPSB1dGlscy5pc01hY2hpbmUoZW50aXR5KSB8fCB1dGlscy5pc0Z1bmN0aW9uKGVudGl0eSk7XG4gICAgICB1dGlscy53YXJuKCEhc2VydmljZSB8fCBpc0xhenlFbnRpdHksIFwiQXR0ZW1wdGVkIHRvIHNwYXduIGFuIEFjdG9yIChJRDogXFxcIlwiLmNvbmNhdCh1dGlscy5pc01hY2hpbmUoZW50aXR5KSA/IGVudGl0eS5pZCA6ICd1bmRlZmluZWQnLCBcIlxcXCIpIG91dHNpZGUgb2YgYSBzZXJ2aWNlLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VydmljZSkge1xuICAgICAgcmV0dXJuIHNlcnZpY2Uuc3Bhd24oZW50aXR5LCByZXNvbHZlZE9wdGlvbnMubmFtZSwgcmVzb2x2ZWRPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEFjdG9yLmNyZWF0ZURlZmVycmVkQWN0b3IoZW50aXR5LCByZXNvbHZlZE9wdGlvbnMubmFtZSk7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IEludGVycHJldGVyIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gbWFjaGluZSB3aXRoIHRoZSBwcm92aWRlZCBvcHRpb25zLCBpZiBhbnkuXHJcbiAqXHJcbiAqIEBwYXJhbSBtYWNoaW5lIFRoZSBtYWNoaW5lIHRvIGludGVycHJldFxyXG4gKiBAcGFyYW0gb3B0aW9ucyBJbnRlcnByZXRlciBvcHRpb25zXHJcbiAqL1xuXG5mdW5jdGlvbiBpbnRlcnByZXQobWFjaGluZSwgb3B0aW9ucykge1xuICB2YXIgaW50ZXJwcmV0ZXIgPSBuZXcgSW50ZXJwcmV0ZXIobWFjaGluZSwgb3B0aW9ucyk7XG4gIHJldHVybiBpbnRlcnByZXRlcjtcbn1cblxuZXhwb3J0cy5JbnRlcnByZXRlciA9IEludGVycHJldGVyO1xuZXhwb3J0cy5pbnRlcnByZXQgPSBpbnRlcnByZXQ7XG5leHBvcnRzLnNwYXduID0gc3Bhd247XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgX3RzbGliID0gcmVxdWlyZSgnLi9fdmlydHVhbC9fdHNsaWIuanMnKTtcbnJlcXVpcmUoJy4vdHlwZXMuanMnKTtcbnZhciBhY3Rpb25UeXBlcyA9IHJlcXVpcmUoJy4vYWN0aW9uVHlwZXMuanMnKTtcbnJlcXVpcmUoJy4vdXRpbHMuanMnKTtcbnJlcXVpcmUoJy4vZW52aXJvbm1lbnQuanMnKTtcblxuZnVuY3Rpb24gdG9JbnZva2VTb3VyY2Uoc3JjKSB7XG4gIGlmICh0eXBlb2Ygc3JjID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzaW1wbGVTcmMgPSB7XG4gICAgICB0eXBlOiBzcmNcbiAgICB9O1xuXG4gICAgc2ltcGxlU3JjLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNyYztcbiAgICB9OyAvLyB2NCBjb21wYXQgLSBUT0RPOiByZW1vdmUgaW4gdjVcblxuXG4gICAgcmV0dXJuIHNpbXBsZVNyYztcbiAgfVxuXG4gIHJldHVybiBzcmM7XG59XG5mdW5jdGlvbiB0b0ludm9rZURlZmluaXRpb24oaW52b2tlQ29uZmlnKSB7XG4gIHJldHVybiBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5pbnZva2VcbiAgfSwgaW52b2tlQ29uZmlnKSwge1xuICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgaW52b2tlQ29uZmlnLm9uRG9uZTtcbiAgICAgICAgICBpbnZva2VDb25maWcub25FcnJvcjtcbiAgICAgICAgICB2YXIgaW52b2tlRGVmID0gX3RzbGliLl9fcmVzdChpbnZva2VDb25maWcsIFtcIm9uRG9uZVwiLCBcIm9uRXJyb3JcIl0pO1xuXG4gICAgICByZXR1cm4gX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgaW52b2tlRGVmKSwge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlcy5pbnZva2UsXG4gICAgICAgIHNyYzogdG9JbnZva2VTb3VyY2UoaW52b2tlQ29uZmlnLnNyYylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydHMudG9JbnZva2VEZWZpbml0aW9uID0gdG9JbnZva2VEZWZpbml0aW9uO1xuZXhwb3J0cy50b0ludm9rZVNvdXJjZSA9IHRvSW52b2tlU291cmNlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIF90c2xpYiA9IHJlcXVpcmUoJy4vX3ZpcnR1YWwvX3RzbGliLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzLmpzJyk7XG52YXIgU3RhdGUgPSByZXF1aXJlKCcuL1N0YXRlLmpzJyk7XG52YXIgYWN0aW9uVHlwZXMgPSByZXF1aXJlKCcuL2FjdGlvblR5cGVzLmpzJyk7XG52YXIgYWN0aW9ucyA9IHJlcXVpcmUoJy4vYWN0aW9ucy5qcycpO1xudmFyIGVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9lbnZpcm9ubWVudC5qcycpO1xudmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG52YXIgc3RhdGVVdGlscyA9IHJlcXVpcmUoJy4vc3RhdGVVdGlscy5qcycpO1xudmFyIEFjdG9yID0gcmVxdWlyZSgnLi9BY3Rvci5qcycpO1xudmFyIGludm9rZVV0aWxzID0gcmVxdWlyZSgnLi9pbnZva2VVdGlscy5qcycpO1xuXG52YXIgTlVMTF9FVkVOVCA9ICcnO1xudmFyIFNUQVRFX0lERU5USUZJRVIgPSAnIyc7XG52YXIgV0lMRENBUkQgPSAnKic7XG52YXIgRU1QVFlfT0JKRUNUID0ge307XG5cbnZhciBpc1N0YXRlSWQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0gPT09IFNUQVRFX0lERU5USUZJRVI7XG59O1xuXG52YXIgY3JlYXRlRGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aW9uczoge30sXG4gICAgZ3VhcmRzOiB7fSxcbiAgICBzZXJ2aWNlczoge30sXG4gICAgYWN0aXZpdGllczoge30sXG4gICAgZGVsYXlzOiB7fVxuICB9O1xufTtcblxudmFyIHZhbGlkYXRlQXJyYXlpZmllZFRyYW5zaXRpb25zID0gZnVuY3Rpb24gKHN0YXRlTm9kZSwgZXZlbnQsIHRyYW5zaXRpb25zKSB7XG4gIHZhciBoYXNOb25MYXN0VW5ndWFyZGVkVGFyZ2V0ID0gdHJhbnNpdGlvbnMuc2xpY2UoMCwgLTEpLnNvbWUoZnVuY3Rpb24gKHRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gISgnY29uZCcgaW4gdHJhbnNpdGlvbikgJiYgISgnaW4nIGluIHRyYW5zaXRpb24pICYmICh1dGlscy5pc1N0cmluZyh0cmFuc2l0aW9uLnRhcmdldCkgfHwgdXRpbHMuaXNNYWNoaW5lKHRyYW5zaXRpb24udGFyZ2V0KSk7XG4gIH0pO1xuICB2YXIgZXZlbnRUZXh0ID0gZXZlbnQgPT09IE5VTExfRVZFTlQgPyAndGhlIHRyYW5zaWVudCBldmVudCcgOiBcImV2ZW50ICdcIi5jb25jYXQoZXZlbnQsIFwiJ1wiKTtcbiAgdXRpbHMud2FybighaGFzTm9uTGFzdFVuZ3VhcmRlZFRhcmdldCwgXCJPbmUgb3IgbW9yZSB0cmFuc2l0aW9ucyBmb3IgXCIuY29uY2F0KGV2ZW50VGV4dCwgXCIgb24gc3RhdGUgJ1wiKS5jb25jYXQoc3RhdGVOb2RlLmlkLCBcIicgYXJlIHVucmVhY2hhYmxlLiBcIikgKyBcIk1ha2Ugc3VyZSB0aGF0IHRoZSBkZWZhdWx0IHRyYW5zaXRpb24gaXMgdGhlIGxhc3Qgb25lIGRlZmluZWQuXCIpO1xufTtcblxudmFyIFN0YXRlTm9kZSA9XG4vKiNfX1BVUkVfXyovXG5cbi8qKiBAY2xhc3MgKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RhdGVOb2RlKFxuICAvKipcclxuICAgKiBUaGUgcmF3IGNvbmZpZyB1c2VkIHRvIGNyZWF0ZSB0aGUgbWFjaGluZS5cclxuICAgKi9cbiAgY29uZmlnLCBvcHRpb25zLFxuICAvKipcclxuICAgKiBUaGUgaW5pdGlhbCBleHRlbmRlZCBzdGF0ZVxyXG4gICAqL1xuICBfY29udGV4dCwgLy8gVE9ETzogdGhpcyBpcyB1bnNhZmUsIGJ1dCB3ZSdyZSByZW1vdmluZyBpdCBpbiB2NSBhbnl3YXlcbiAgX3N0YXRlSW5mbykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX2NvbnRleHQgPT09IHZvaWQgMCkge1xuICAgICAgX2NvbnRleHQgPSAnY29udGV4dCcgaW4gY29uZmlnID8gY29uZmlnLmNvbnRleHQgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIF9hO1xuXG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5fY29udGV4dCA9IF9jb250ZXh0O1xuICAgIC8qKlxyXG4gICAgICogVGhlIG9yZGVyIHRoaXMgc3RhdGUgbm9kZSBhcHBlYXJzLiBDb3JyZXNwb25kcyB0byB0aGUgaW1wbGljaXQgU0NYTUwgZG9jdW1lbnQgb3JkZXIuXHJcbiAgICAgKi9cblxuICAgIHRoaXMub3JkZXIgPSAtMTtcbiAgICB0aGlzLl9feHN0YXRlbm9kZSA9IHRydWU7XG4gICAgdGhpcy5fX2NhY2hlID0ge1xuICAgICAgZXZlbnRzOiB1bmRlZmluZWQsXG4gICAgICByZWxhdGl2ZVZhbHVlOiBuZXcgTWFwKCksXG4gICAgICBpbml0aWFsU3RhdGVWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgaW5pdGlhbFN0YXRlOiB1bmRlZmluZWQsXG4gICAgICBvbjogdW5kZWZpbmVkLFxuICAgICAgdHJhbnNpdGlvbnM6IHVuZGVmaW5lZCxcbiAgICAgIGNhbmRpZGF0ZXM6IHt9LFxuICAgICAgZGVsYXllZFRyYW5zaXRpb25zOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHRoaXMuaWRNYXAgPSB7fTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKGNyZWF0ZURlZmF1bHRPcHRpb25zKCksIG9wdGlvbnMpO1xuICAgIHRoaXMucGFyZW50ID0gX3N0YXRlSW5mbyA9PT0gbnVsbCB8fCBfc3RhdGVJbmZvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGVJbmZvLnBhcmVudDtcbiAgICB0aGlzLmtleSA9IHRoaXMuY29uZmlnLmtleSB8fCAoX3N0YXRlSW5mbyA9PT0gbnVsbCB8fCBfc3RhdGVJbmZvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGVJbmZvLmtleSkgfHwgdGhpcy5jb25maWcuaWQgfHwgJyhtYWNoaW5lKSc7XG4gICAgdGhpcy5tYWNoaW5lID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5tYWNoaW5lIDogdGhpcztcbiAgICB0aGlzLnBhdGggPSB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LnBhdGguY29uY2F0KHRoaXMua2V5KSA6IFtdO1xuICAgIHRoaXMuZGVsaW1pdGVyID0gdGhpcy5jb25maWcuZGVsaW1pdGVyIHx8ICh0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmRlbGltaXRlciA6IGNvbnN0YW50cy5TVEFURV9ERUxJTUlURVIpO1xuICAgIHRoaXMuaWQgPSB0aGlzLmNvbmZpZy5pZCB8fCBfdHNsaWIuX19zcHJlYWRBcnJheShbdGhpcy5tYWNoaW5lLmtleV0sIF90c2xpYi5fX3JlYWQodGhpcy5wYXRoKSwgZmFsc2UpLmpvaW4odGhpcy5kZWxpbWl0ZXIpO1xuICAgIHRoaXMudmVyc2lvbiA9IHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQudmVyc2lvbiA6IHRoaXMuY29uZmlnLnZlcnNpb247XG4gICAgdGhpcy50eXBlID0gdGhpcy5jb25maWcudHlwZSB8fCAodGhpcy5jb25maWcucGFyYWxsZWwgPyAncGFyYWxsZWwnIDogdGhpcy5jb25maWcuc3RhdGVzICYmIE9iamVjdC5rZXlzKHRoaXMuY29uZmlnLnN0YXRlcykubGVuZ3RoID8gJ2NvbXBvdW5kJyA6IHRoaXMuY29uZmlnLmhpc3RvcnkgPyAnaGlzdG9yeScgOiAnYXRvbWljJyk7XG4gICAgdGhpcy5zY2hlbWEgPSB0aGlzLnBhcmVudCA/IHRoaXMubWFjaGluZS5zY2hlbWEgOiAoX2EgPSB0aGlzLmNvbmZpZy5zY2hlbWEpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLmNvbmZpZy5kZXNjcmlwdGlvbjtcblxuICAgIGlmICghZW52aXJvbm1lbnQuSVNfUFJPRFVDVElPTikge1xuICAgICAgdXRpbHMud2FybighKCdwYXJhbGxlbCcgaW4gdGhpcy5jb25maWcpLCBcIlRoZSBcXFwicGFyYWxsZWxcXFwiIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDQuMS4gXCIuY29uY2F0KHRoaXMuY29uZmlnLnBhcmFsbGVsID8gXCJSZXBsYWNlIHdpdGggYHR5cGU6ICdwYXJhbGxlbCdgXCIgOiBcIlVzZSBgdHlwZTogJ1wiLmNvbmNhdCh0aGlzLnR5cGUsIFwiJ2BcIiksIFwiIGluIHRoZSBjb25maWcgZm9yIHN0YXRlIG5vZGUgJ1wiKS5jb25jYXQodGhpcy5pZCwgXCInIGluc3RlYWQuXCIpKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWwgPSB0aGlzLmNvbmZpZy5pbml0aWFsO1xuICAgIHRoaXMuc3RhdGVzID0gdGhpcy5jb25maWcuc3RhdGVzID8gdXRpbHMubWFwVmFsdWVzKHRoaXMuY29uZmlnLnN0YXRlcywgZnVuY3Rpb24gKHN0YXRlQ29uZmlnLCBrZXkpIHtcbiAgICAgIHZhciBfYTtcblxuICAgICAgdmFyIHN0YXRlTm9kZSA9IG5ldyBTdGF0ZU5vZGUoc3RhdGVDb25maWcsIHt9LCB1bmRlZmluZWQsIHtcbiAgICAgICAgcGFyZW50OiBfdGhpcyxcbiAgICAgICAga2V5OiBrZXlcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmFzc2lnbihfdGhpcy5pZE1hcCwgX3RzbGliLl9fYXNzaWduKChfYSA9IHt9LCBfYVtzdGF0ZU5vZGUuaWRdID0gc3RhdGVOb2RlLCBfYSksIHN0YXRlTm9kZS5pZE1hcCkpO1xuICAgICAgcmV0dXJuIHN0YXRlTm9kZTtcbiAgICB9KSA6IEVNUFRZX09CSkVDVDsgLy8gRG9jdW1lbnQgb3JkZXJcblxuICAgIHZhciBvcmRlciA9IDA7XG5cbiAgICBmdW5jdGlvbiBkZnMoc3RhdGVOb2RlKSB7XG4gICAgICB2YXIgZV8xLCBfYTtcblxuICAgICAgc3RhdGVOb2RlLm9yZGVyID0gb3JkZXIrKztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2IgPSBfdHNsaWIuX192YWx1ZXMoc3RhdGVVdGlscy5nZXRBbGxDaGlsZHJlbihzdGF0ZU5vZGUpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgIHZhciBjaGlsZCA9IF9jLnZhbHVlO1xuICAgICAgICAgIGRmcyhjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVfMV8xKSB7XG4gICAgICAgIGVfMSA9IHtcbiAgICAgICAgICBlcnJvcjogZV8xXzFcbiAgICAgICAgfTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGRmcyh0aGlzKTsgLy8gSGlzdG9yeSBjb25maWdcblxuICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMuY29uZmlnLmhpc3RvcnkgPT09IHRydWUgPyAnc2hhbGxvdycgOiB0aGlzLmNvbmZpZy5oaXN0b3J5IHx8IGZhbHNlO1xuICAgIHRoaXMuX3RyYW5zaWVudCA9ICEhdGhpcy5jb25maWcuYWx3YXlzIHx8ICghdGhpcy5jb25maWcub24gPyBmYWxzZSA6IEFycmF5LmlzQXJyYXkodGhpcy5jb25maWcub24pID8gdGhpcy5jb25maWcub24uc29tZShmdW5jdGlvbiAoX2EpIHtcbiAgICAgIHZhciBldmVudCA9IF9hLmV2ZW50O1xuICAgICAgcmV0dXJuIGV2ZW50ID09PSBOVUxMX0VWRU5UO1xuICAgIH0pIDogTlVMTF9FVkVOVCBpbiB0aGlzLmNvbmZpZy5vbik7XG4gICAgdGhpcy5zdHJpY3QgPSAhIXRoaXMuY29uZmlnLnN0cmljdDsgLy8gVE9ETzogZGVwcmVjYXRlIChlbnRyeSlcblxuICAgIHRoaXMub25FbnRyeSA9IHV0aWxzLnRvQXJyYXkodGhpcy5jb25maWcuZW50cnkgfHwgdGhpcy5jb25maWcub25FbnRyeSkubWFwKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBhY3Rpb25zLnRvQWN0aW9uT2JqZWN0KGFjdGlvbik7XG4gICAgfSk7IC8vIFRPRE86IGRlcHJlY2F0ZSAoZXhpdClcblxuICAgIHRoaXMub25FeGl0ID0gdXRpbHMudG9BcnJheSh0aGlzLmNvbmZpZy5leGl0IHx8IHRoaXMuY29uZmlnLm9uRXhpdCkubWFwKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBhY3Rpb25zLnRvQWN0aW9uT2JqZWN0KGFjdGlvbik7XG4gICAgfSk7XG4gICAgdGhpcy5tZXRhID0gdGhpcy5jb25maWcubWV0YTtcbiAgICB0aGlzLmRvbmVEYXRhID0gdGhpcy50eXBlID09PSAnZmluYWwnID8gdGhpcy5jb25maWcuZGF0YSA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLmludm9rZSA9IHV0aWxzLnRvQXJyYXkodGhpcy5jb25maWcuaW52b2tlKS5tYXAoZnVuY3Rpb24gKGludm9rZUNvbmZpZywgaSkge1xuICAgICAgdmFyIF9hLCBfYjtcblxuICAgICAgaWYgKHV0aWxzLmlzTWFjaGluZShpbnZva2VDb25maWcpKSB7XG4gICAgICAgIHZhciBpbnZva2VJZCA9IHV0aWxzLmNyZWF0ZUludm9rZUlkKF90aGlzLmlkLCBpKTtcbiAgICAgICAgX3RoaXMubWFjaGluZS5vcHRpb25zLnNlcnZpY2VzID0gX3RzbGliLl9fYXNzaWduKChfYSA9IHt9LCBfYVtpbnZva2VJZF0gPSBpbnZva2VDb25maWcsIF9hKSwgX3RoaXMubWFjaGluZS5vcHRpb25zLnNlcnZpY2VzKTtcbiAgICAgICAgcmV0dXJuIGludm9rZVV0aWxzLnRvSW52b2tlRGVmaW5pdGlvbih7XG4gICAgICAgICAgc3JjOiBpbnZva2VJZCxcbiAgICAgICAgICBpZDogaW52b2tlSWRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzU3RyaW5nKGludm9rZUNvbmZpZy5zcmMpKSB7XG4gICAgICAgIHZhciBpbnZva2VJZCA9IGludm9rZUNvbmZpZy5pZCB8fCB1dGlscy5jcmVhdGVJbnZva2VJZChfdGhpcy5pZCwgaSk7XG4gICAgICAgIHJldHVybiBpbnZva2VVdGlscy50b0ludm9rZURlZmluaXRpb24oX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgaW52b2tlQ29uZmlnKSwge1xuICAgICAgICAgIGlkOiBpbnZva2VJZCxcbiAgICAgICAgICBzcmM6IGludm9rZUNvbmZpZy5zcmNcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmICh1dGlscy5pc01hY2hpbmUoaW52b2tlQ29uZmlnLnNyYykgfHwgdXRpbHMuaXNGdW5jdGlvbihpbnZva2VDb25maWcuc3JjKSkge1xuICAgICAgICB2YXIgaW52b2tlSWQgPSBpbnZva2VDb25maWcuaWQgfHwgdXRpbHMuY3JlYXRlSW52b2tlSWQoX3RoaXMuaWQsIGkpO1xuICAgICAgICBfdGhpcy5tYWNoaW5lLm9wdGlvbnMuc2VydmljZXMgPSBfdHNsaWIuX19hc3NpZ24oKF9iID0ge30sIF9iW2ludm9rZUlkXSA9IGludm9rZUNvbmZpZy5zcmMsIF9iKSwgX3RoaXMubWFjaGluZS5vcHRpb25zLnNlcnZpY2VzKTtcbiAgICAgICAgcmV0dXJuIGludm9rZVV0aWxzLnRvSW52b2tlRGVmaW5pdGlvbihfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHtcbiAgICAgICAgICBpZDogaW52b2tlSWRcbiAgICAgICAgfSwgaW52b2tlQ29uZmlnKSwge1xuICAgICAgICAgIHNyYzogaW52b2tlSWRcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGludm9rZVNvdXJjZSA9IGludm9rZUNvbmZpZy5zcmM7XG4gICAgICAgIHJldHVybiBpbnZva2VVdGlscy50b0ludm9rZURlZmluaXRpb24oX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7XG4gICAgICAgICAgaWQ6IHV0aWxzLmNyZWF0ZUludm9rZUlkKF90aGlzLmlkLCBpKVxuICAgICAgICB9LCBpbnZva2VDb25maWcpLCB7XG4gICAgICAgICAgc3JjOiBpbnZva2VTb3VyY2VcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuYWN0aXZpdGllcyA9IHV0aWxzLnRvQXJyYXkodGhpcy5jb25maWcuYWN0aXZpdGllcykuY29uY2F0KHRoaXMuaW52b2tlKS5tYXAoZnVuY3Rpb24gKGFjdGl2aXR5KSB7XG4gICAgICByZXR1cm4gYWN0aW9ucy50b0FjdGl2aXR5RGVmaW5pdGlvbihhY3Rpdml0eSk7XG4gICAgfSk7XG4gICAgdGhpcy50cmFuc2l0aW9uID0gdGhpcy50cmFuc2l0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy50YWdzID0gdXRpbHMudG9BcnJheSh0aGlzLmNvbmZpZy50YWdzKTsgLy8gVE9ETzogdGhpcyBpcyB0aGUgcmVhbCBmaXggZm9yIGluaXRpYWxpemF0aW9uIG9uY2VcbiAgICAvLyBzdGF0ZSBub2RlIGdldHRlcnMgYXJlIGRlcHJlY2F0ZWRcbiAgICAvLyBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgLy8gICB0aGlzLl9pbml0KCk7XG4gICAgLy8gfVxuICB9XG5cbiAgU3RhdGVOb2RlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fX2NhY2hlLnRyYW5zaXRpb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGVVdGlscy5nZXRBbGxTdGF0ZU5vZGVzKHRoaXMpLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlTm9kZSkge1xuICAgICAgcmV0dXJuIHN0YXRlTm9kZS5vbjtcbiAgICB9KTtcbiAgfTtcbiAgLyoqXHJcbiAgICogQ2xvbmVzIHRoaXMgc3RhdGUgbWFjaGluZSB3aXRoIGN1c3RvbSBvcHRpb25zIGFuZCBjb250ZXh0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyAoYWN0aW9ucywgZ3VhcmRzLCBhY3Rpdml0aWVzLCBzZXJ2aWNlcykgdG8gcmVjdXJzaXZlbHkgbWVyZ2Ugd2l0aCB0aGUgZXhpc3Rpbmcgb3B0aW9ucy5cclxuICAgKiBAcGFyYW0gY29udGV4dCBDdXN0b20gY29udGV4dCAod2lsbCBvdmVycmlkZSBwcmVkZWZpbmVkIGNvbnRleHQpXHJcbiAgICovXG5cblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLndpdGhDb25maWcgPSBmdW5jdGlvbiAob3B0aW9ucywgY29udGV4dCkge1xuICAgIHZhciBfYSA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgYWN0aW9ucyA9IF9hLmFjdGlvbnMsXG4gICAgICAgIGFjdGl2aXRpZXMgPSBfYS5hY3Rpdml0aWVzLFxuICAgICAgICBndWFyZHMgPSBfYS5ndWFyZHMsXG4gICAgICAgIHNlcnZpY2VzID0gX2Euc2VydmljZXMsXG4gICAgICAgIGRlbGF5cyA9IF9hLmRlbGF5cztcbiAgICByZXR1cm4gbmV3IFN0YXRlTm9kZSh0aGlzLmNvbmZpZywge1xuICAgICAgYWN0aW9uczogX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgYWN0aW9ucyksIG9wdGlvbnMuYWN0aW9ucyksXG4gICAgICBhY3Rpdml0aWVzOiBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHt9LCBhY3Rpdml0aWVzKSwgb3B0aW9ucy5hY3Rpdml0aWVzKSxcbiAgICAgIGd1YXJkczogX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgZ3VhcmRzKSwgb3B0aW9ucy5ndWFyZHMpLFxuICAgICAgc2VydmljZXM6IF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIHNlcnZpY2VzKSwgb3B0aW9ucy5zZXJ2aWNlcyksXG4gICAgICBkZWxheXM6IF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIGRlbGF5cyksIG9wdGlvbnMuZGVsYXlzKVxuICAgIH0sIGNvbnRleHQgIT09IG51bGwgJiYgY29udGV4dCAhPT0gdm9pZCAwID8gY29udGV4dCA6IHRoaXMuY29udGV4dCk7XG4gIH07XG4gIC8qKlxyXG4gICAqIENsb25lcyB0aGlzIHN0YXRlIG1hY2hpbmUgd2l0aCBjdXN0b20gY29udGV4dC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb250ZXh0IEN1c3RvbSBjb250ZXh0ICh3aWxsIG92ZXJyaWRlIHByZWRlZmluZWQgY29udGV4dCwgbm90IHJlY3Vyc2l2ZSlcclxuICAgKi9cblxuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUud2l0aENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgU3RhdGVOb2RlKHRoaXMuY29uZmlnLCB0aGlzLm9wdGlvbnMsIGNvbnRleHQpO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdGF0ZU5vZGUucHJvdG90eXBlLCBcImNvbnRleHRcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHV0aWxzLmlzRnVuY3Rpb24odGhpcy5fY29udGV4dCkgPyB0aGlzLl9jb250ZXh0KCkgOiB0aGlzLl9jb250ZXh0O1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVOb2RlLnByb3RvdHlwZSwgXCJkZWZpbml0aW9uXCIsIHtcbiAgICAvKipcclxuICAgICAqIFRoZSB3ZWxsLXN0cnVjdHVyZWQgc3RhdGUgbm9kZSBkZWZpbml0aW9uLlxyXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAga2V5OiB0aGlzLmtleSxcbiAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uLFxuICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgaW5pdGlhbDogdGhpcy5pbml0aWFsLFxuICAgICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICAgIHN0YXRlczogdXRpbHMubWFwVmFsdWVzKHRoaXMuc3RhdGVzLCBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUuZGVmaW5pdGlvbjtcbiAgICAgICAgfSksXG4gICAgICAgIG9uOiB0aGlzLm9uLFxuICAgICAgICB0cmFuc2l0aW9uczogdGhpcy50cmFuc2l0aW9ucyxcbiAgICAgICAgZW50cnk6IHRoaXMub25FbnRyeSxcbiAgICAgICAgZXhpdDogdGhpcy5vbkV4aXQsXG4gICAgICAgIGFjdGl2aXRpZXM6IHRoaXMuYWN0aXZpdGllcyB8fCBbXSxcbiAgICAgICAgbWV0YTogdGhpcy5tZXRhLFxuICAgICAgICBvcmRlcjogdGhpcy5vcmRlciB8fCAtMSxcbiAgICAgICAgZGF0YTogdGhpcy5kb25lRGF0YSxcbiAgICAgICAgaW52b2tlOiB0aGlzLmludm9rZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICAgIHRhZ3M6IHRoaXMudGFnc1xuICAgICAgfTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZpbml0aW9uO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdGF0ZU5vZGUucHJvdG90eXBlLCBcIm9uXCIsIHtcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXBwaW5nIG9mIGV2ZW50cyB0byB0cmFuc2l0aW9ucy5cclxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuX19jYWNoZS5vbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2NhY2hlLm9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNpdGlvbnMgPSB0aGlzLnRyYW5zaXRpb25zO1xuICAgICAgcmV0dXJuIHRoaXMuX19jYWNoZS5vbiA9IHRyYW5zaXRpb25zLnJlZHVjZShmdW5jdGlvbiAobWFwLCB0cmFuc2l0aW9uKSB7XG4gICAgICAgIG1hcFt0cmFuc2l0aW9uLmV2ZW50VHlwZV0gPSBtYXBbdHJhbnNpdGlvbi5ldmVudFR5cGVdIHx8IFtdO1xuICAgICAgICBtYXBbdHJhbnNpdGlvbi5ldmVudFR5cGVdLnB1c2godHJhbnNpdGlvbik7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgICB9LCB7fSk7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdGF0ZU5vZGUucHJvdG90eXBlLCBcImFmdGVyXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fY2FjaGUuZGVsYXllZFRyYW5zaXRpb25zIHx8ICh0aGlzLl9fY2FjaGUuZGVsYXllZFRyYW5zaXRpb25zID0gdGhpcy5nZXREZWxheWVkVHJhbnNpdGlvbnMoKSwgdGhpcy5fX2NhY2hlLmRlbGF5ZWRUcmFuc2l0aW9ucyk7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdGF0ZU5vZGUucHJvdG90eXBlLCBcInRyYW5zaXRpb25zXCIsIHtcbiAgICAvKipcclxuICAgICAqIEFsbCB0aGUgdHJhbnNpdGlvbnMgdGhhdCBjYW4gYmUgdGFrZW4gZnJvbSB0aGlzIHN0YXRlIG5vZGUuXHJcbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fY2FjaGUudHJhbnNpdGlvbnMgfHwgKHRoaXMuX19jYWNoZS50cmFuc2l0aW9ucyA9IHRoaXMuZm9ybWF0VHJhbnNpdGlvbnMoKSwgdGhpcy5fX2NhY2hlLnRyYW5zaXRpb25zKTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLmdldENhbmRpZGF0ZXMgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgaWYgKHRoaXMuX19jYWNoZS5jYW5kaWRhdGVzW2V2ZW50TmFtZV0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9fY2FjaGUuY2FuZGlkYXRlc1tldmVudE5hbWVdO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2llbnQgPSBldmVudE5hbWUgPT09IE5VTExfRVZFTlQ7XG4gICAgdmFyIGNhbmRpZGF0ZXMgPSB0aGlzLnRyYW5zaXRpb25zLmZpbHRlcihmdW5jdGlvbiAodHJhbnNpdGlvbikge1xuICAgICAgdmFyIHNhbWVFdmVudFR5cGUgPSB0cmFuc2l0aW9uLmV2ZW50VHlwZSA9PT0gZXZlbnROYW1lOyAvLyBudWxsIGV2ZW50cyBzaG91bGQgb25seSBtYXRjaCBhZ2FpbnN0IGV2ZW50bGVzcyB0cmFuc2l0aW9uc1xuXG4gICAgICByZXR1cm4gdHJhbnNpZW50ID8gc2FtZUV2ZW50VHlwZSA6IHNhbWVFdmVudFR5cGUgfHwgdHJhbnNpdGlvbi5ldmVudFR5cGUgPT09IFdJTERDQVJEO1xuICAgIH0pO1xuICAgIHRoaXMuX19jYWNoZS5jYW5kaWRhdGVzW2V2ZW50TmFtZV0gPSBjYW5kaWRhdGVzO1xuICAgIHJldHVybiBjYW5kaWRhdGVzO1xuICB9O1xuICAvKipcclxuICAgKiBBbGwgZGVsYXllZCB0cmFuc2l0aW9ucyBmcm9tIHRoZSBjb25maWcuXHJcbiAgICovXG5cblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLmdldERlbGF5ZWRUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGFmdGVyQ29uZmlnID0gdGhpcy5jb25maWcuYWZ0ZXI7XG5cbiAgICBpZiAoIWFmdGVyQ29uZmlnKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIG11dGF0ZUVudHJ5RXhpdCA9IGZ1bmN0aW9uIChkZWxheSwgaSkge1xuICAgICAgdmFyIGRlbGF5UmVmID0gdXRpbHMuaXNGdW5jdGlvbihkZWxheSkgPyBcIlwiLmNvbmNhdChfdGhpcy5pZCwgXCI6ZGVsYXlbXCIpLmNvbmNhdChpLCBcIl1cIikgOiBkZWxheTtcbiAgICAgIHZhciBldmVudFR5cGUgPSBhY3Rpb25zLmFmdGVyKGRlbGF5UmVmLCBfdGhpcy5pZCk7XG5cbiAgICAgIF90aGlzLm9uRW50cnkucHVzaChhY3Rpb25zLnNlbmQoZXZlbnRUeXBlLCB7XG4gICAgICAgIGRlbGF5OiBkZWxheVxuICAgICAgfSkpO1xuXG4gICAgICBfdGhpcy5vbkV4aXQucHVzaChhY3Rpb25zLmNhbmNlbChldmVudFR5cGUpKTtcblxuICAgICAgcmV0dXJuIGV2ZW50VHlwZTtcbiAgICB9O1xuXG4gICAgdmFyIGRlbGF5ZWRUcmFuc2l0aW9ucyA9IHV0aWxzLmlzQXJyYXkoYWZ0ZXJDb25maWcpID8gYWZ0ZXJDb25maWcubWFwKGZ1bmN0aW9uICh0cmFuc2l0aW9uLCBpKSB7XG4gICAgICB2YXIgZXZlbnRUeXBlID0gbXV0YXRlRW50cnlFeGl0KHRyYW5zaXRpb24uZGVsYXksIGkpO1xuICAgICAgcmV0dXJuIF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIHRyYW5zaXRpb24pLCB7XG4gICAgICAgIGV2ZW50OiBldmVudFR5cGVcbiAgICAgIH0pO1xuICAgIH0pIDogdXRpbHMuZmxhdHRlbihPYmplY3Qua2V5cyhhZnRlckNvbmZpZykubWFwKGZ1bmN0aW9uIChkZWxheSwgaSkge1xuICAgICAgdmFyIGNvbmZpZ1RyYW5zaXRpb24gPSBhZnRlckNvbmZpZ1tkZWxheV07XG4gICAgICB2YXIgcmVzb2x2ZWRUcmFuc2l0aW9uID0gdXRpbHMuaXNTdHJpbmcoY29uZmlnVHJhbnNpdGlvbikgPyB7XG4gICAgICAgIHRhcmdldDogY29uZmlnVHJhbnNpdGlvblxuICAgICAgfSA6IGNvbmZpZ1RyYW5zaXRpb247XG4gICAgICB2YXIgcmVzb2x2ZWREZWxheSA9ICFpc05hTigrZGVsYXkpID8gK2RlbGF5IDogZGVsYXk7XG4gICAgICB2YXIgZXZlbnRUeXBlID0gbXV0YXRlRW50cnlFeGl0KHJlc29sdmVkRGVsYXksIGkpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRvQXJyYXkocmVzb2x2ZWRUcmFuc2l0aW9uKS5tYXAoZnVuY3Rpb24gKHRyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIHRyYW5zaXRpb24pLCB7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50VHlwZSxcbiAgICAgICAgICBkZWxheTogcmVzb2x2ZWREZWxheVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgICByZXR1cm4gZGVsYXllZFRyYW5zaXRpb25zLm1hcChmdW5jdGlvbiAoZGVsYXllZFRyYW5zaXRpb24pIHtcbiAgICAgIHZhciBkZWxheSA9IGRlbGF5ZWRUcmFuc2l0aW9uLmRlbGF5O1xuICAgICAgcmV0dXJuIF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIF90aGlzLmZvcm1hdFRyYW5zaXRpb24oZGVsYXllZFRyYW5zaXRpb24pKSwge1xuICAgICAgICBkZWxheTogZGVsYXlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBub2RlcyByZXByZXNlbnRlZCBieSB0aGUgY3VycmVudCBzdGF0ZSB2YWx1ZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzdGF0ZSBUaGUgc3RhdGUgdmFsdWUgb3IgU3RhdGUgaW5zdGFuY2VcclxuICAgKi9cblxuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUuZ2V0U3RhdGVOb2RlcyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHZhciBfYTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlVmFsdWUgPSBzdGF0ZSBpbnN0YW5jZW9mIFN0YXRlLlN0YXRlID8gc3RhdGUudmFsdWUgOiB1dGlscy50b1N0YXRlVmFsdWUoc3RhdGUsIHRoaXMuZGVsaW1pdGVyKTtcblxuICAgIGlmICh1dGlscy5pc1N0cmluZyhzdGF0ZVZhbHVlKSkge1xuICAgICAgdmFyIGluaXRpYWxTdGF0ZVZhbHVlID0gdGhpcy5nZXRTdGF0ZU5vZGUoc3RhdGVWYWx1ZSkuaW5pdGlhbDtcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGVWYWx1ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5nZXRTdGF0ZU5vZGVzKChfYSA9IHt9LCBfYVtzdGF0ZVZhbHVlXSA9IGluaXRpYWxTdGF0ZVZhbHVlLCBfYSkpIDogW3RoaXMsIHRoaXMuc3RhdGVzW3N0YXRlVmFsdWVdXTtcbiAgICB9XG5cbiAgICB2YXIgc3ViU3RhdGVLZXlzID0gT2JqZWN0LmtleXMoc3RhdGVWYWx1ZSk7XG4gICAgdmFyIHN1YlN0YXRlTm9kZXMgPSBbdGhpc107XG4gICAgc3ViU3RhdGVOb2Rlcy5wdXNoLmFwcGx5KHN1YlN0YXRlTm9kZXMsIF90c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBfdHNsaWIuX19yZWFkKHV0aWxzLmZsYXR0ZW4oc3ViU3RhdGVLZXlzLm1hcChmdW5jdGlvbiAoc3ViU3RhdGVLZXkpIHtcbiAgICAgIHJldHVybiBfdGhpcy5nZXRTdGF0ZU5vZGUoc3ViU3RhdGVLZXkpLmdldFN0YXRlTm9kZXMoc3RhdGVWYWx1ZVtzdWJTdGF0ZUtleV0pO1xuICAgIH0pKSksIGZhbHNlKSk7XG4gICAgcmV0dXJuIHN1YlN0YXRlTm9kZXM7XG4gIH07XG4gIC8qKlxyXG4gICAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgc3RhdGUgbm9kZSBleHBsaWNpdGx5IGhhbmRsZXMgdGhlIGdpdmVuIGV2ZW50LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBpbiBxdWVzdGlvblxyXG4gICAqL1xuXG5cbiAgU3RhdGVOb2RlLnByb3RvdHlwZS5oYW5kbGVzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGV2ZW50VHlwZSA9IHV0aWxzLmdldEV2ZW50VHlwZShldmVudCk7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLmluY2x1ZGVzKGV2ZW50VHlwZSk7XG4gIH07XG4gIC8qKlxyXG4gICAqIFJlc29sdmVzIHRoZSBnaXZlbiBgc3RhdGVgIHRvIGEgbmV3IGBTdGF0ZWAgaW5zdGFuY2UgcmVsYXRpdmUgdG8gdGhpcyBtYWNoaW5lLlxyXG4gICAqXHJcbiAgICogVGhpcyBlbnN1cmVzIHRoYXQgYC5ldmVudHNgIGFuZCBgLm5leHRFdmVudHNgIHJlcHJlc2VudCB0aGUgY29ycmVjdCB2YWx1ZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc3RhdGUgVGhlIHN0YXRlIHRvIHJlc29sdmVcclxuICAgKi9cblxuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUucmVzb2x2ZVN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIHN0YXRlRnJvbUNvbmZpZyA9IHN0YXRlIGluc3RhbmNlb2YgU3RhdGUuU3RhdGUgPyBzdGF0ZSA6IFN0YXRlLlN0YXRlLmNyZWF0ZShzdGF0ZSk7XG4gICAgdmFyIGNvbmZpZ3VyYXRpb24gPSBBcnJheS5mcm9tKHN0YXRlVXRpbHMuZ2V0Q29uZmlndXJhdGlvbihbXSwgdGhpcy5nZXRTdGF0ZU5vZGVzKHN0YXRlRnJvbUNvbmZpZy52YWx1ZSkpKTtcbiAgICByZXR1cm4gbmV3IFN0YXRlLlN0YXRlKF90c2xpYi5fX2Fzc2lnbihfdHNsaWIuX19hc3NpZ24oe30sIHN0YXRlRnJvbUNvbmZpZyksIHtcbiAgICAgIHZhbHVlOiB0aGlzLnJlc29sdmUoc3RhdGVGcm9tQ29uZmlnLnZhbHVlKSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IGNvbmZpZ3VyYXRpb24sXG4gICAgICBkb25lOiBzdGF0ZVV0aWxzLmlzSW5GaW5hbFN0YXRlKGNvbmZpZ3VyYXRpb24sIHRoaXMpLFxuICAgICAgdGFnczogc3RhdGVVdGlscy5nZXRUYWdzRnJvbUNvbmZpZ3VyYXRpb24oY29uZmlndXJhdGlvbiksXG4gICAgICBtYWNoaW5lOiB0aGlzLm1hY2hpbmVcbiAgICB9KSk7XG4gIH07XG5cbiAgU3RhdGVOb2RlLnByb3RvdHlwZS50cmFuc2l0aW9uTGVhZk5vZGUgPSBmdW5jdGlvbiAoc3RhdGVWYWx1ZSwgc3RhdGUsIF9ldmVudCkge1xuICAgIHZhciBzdGF0ZU5vZGUgPSB0aGlzLmdldFN0YXRlTm9kZShzdGF0ZVZhbHVlKTtcbiAgICB2YXIgbmV4dCA9IHN0YXRlTm9kZS5uZXh0KHN0YXRlLCBfZXZlbnQpO1xuXG4gICAgaWYgKCFuZXh0IHx8ICFuZXh0LnRyYW5zaXRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMubmV4dChzdGF0ZSwgX2V2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dDtcbiAgfTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLnRyYW5zaXRpb25Db21wb3VuZE5vZGUgPSBmdW5jdGlvbiAoc3RhdGVWYWx1ZSwgc3RhdGUsIF9ldmVudCkge1xuICAgIHZhciBzdWJTdGF0ZUtleXMgPSBPYmplY3Qua2V5cyhzdGF0ZVZhbHVlKTtcbiAgICB2YXIgc3RhdGVOb2RlID0gdGhpcy5nZXRTdGF0ZU5vZGUoc3ViU3RhdGVLZXlzWzBdKTtcblxuICAgIHZhciBuZXh0ID0gc3RhdGVOb2RlLl90cmFuc2l0aW9uKHN0YXRlVmFsdWVbc3ViU3RhdGVLZXlzWzBdXSwgc3RhdGUsIF9ldmVudCk7XG5cbiAgICBpZiAoIW5leHQgfHwgIW5leHQudHJhbnNpdGlvbnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5uZXh0KHN0YXRlLCBfZXZlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0O1xuICB9O1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUudHJhbnNpdGlvblBhcmFsbGVsTm9kZSA9IGZ1bmN0aW9uIChzdGF0ZVZhbHVlLCBzdGF0ZSwgX2V2ZW50KSB7XG4gICAgdmFyIGVfMiwgX2E7XG5cbiAgICB2YXIgdHJhbnNpdGlvbk1hcCA9IHt9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9iID0gX3RzbGliLl9fdmFsdWVzKE9iamVjdC5rZXlzKHN0YXRlVmFsdWUpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICB2YXIgc3ViU3RhdGVLZXkgPSBfYy52YWx1ZTtcbiAgICAgICAgdmFyIHN1YlN0YXRlVmFsdWUgPSBzdGF0ZVZhbHVlW3N1YlN0YXRlS2V5XTtcblxuICAgICAgICBpZiAoIXN1YlN0YXRlVmFsdWUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWJTdGF0ZU5vZGUgPSB0aGlzLmdldFN0YXRlTm9kZShzdWJTdGF0ZUtleSk7XG5cbiAgICAgICAgdmFyIG5leHQgPSBzdWJTdGF0ZU5vZGUuX3RyYW5zaXRpb24oc3ViU3RhdGVWYWx1ZSwgc3RhdGUsIF9ldmVudCk7XG5cbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICB0cmFuc2l0aW9uTWFwW3N1YlN0YXRlS2V5XSA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlXzJfMSkge1xuICAgICAgZV8yID0ge1xuICAgICAgICBlcnJvcjogZV8yXzFcbiAgICAgIH07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3RhdGVUcmFuc2l0aW9ucyA9IE9iamVjdC5rZXlzKHRyYW5zaXRpb25NYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbk1hcFtrZXldO1xuICAgIH0pO1xuICAgIHZhciBlbmFibGVkVHJhbnNpdGlvbnMgPSB1dGlscy5mbGF0dGVuKHN0YXRlVHJhbnNpdGlvbnMubWFwKGZ1bmN0aW9uIChzdCkge1xuICAgICAgcmV0dXJuIHN0LnRyYW5zaXRpb25zO1xuICAgIH0pKTtcbiAgICB2YXIgd2lsbFRyYW5zaXRpb24gPSBzdGF0ZVRyYW5zaXRpb25zLnNvbWUoZnVuY3Rpb24gKHN0KSB7XG4gICAgICByZXR1cm4gc3QudHJhbnNpdGlvbnMubGVuZ3RoID4gMDtcbiAgICB9KTtcblxuICAgIGlmICghd2lsbFRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLm5leHQoc3RhdGUsIF9ldmVudCk7XG4gICAgfVxuXG4gICAgdmFyIGVudHJ5Tm9kZXMgPSB1dGlscy5mbGF0dGVuKHN0YXRlVHJhbnNpdGlvbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5lbnRyeVNldDtcbiAgICB9KSk7XG4gICAgdmFyIGNvbmZpZ3VyYXRpb24gPSB1dGlscy5mbGF0dGVuKE9iamVjdC5rZXlzKHRyYW5zaXRpb25NYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbk1hcFtrZXldLmNvbmZpZ3VyYXRpb247XG4gICAgfSkpO1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uczogZW5hYmxlZFRyYW5zaXRpb25zLFxuICAgICAgZW50cnlTZXQ6IGVudHJ5Tm9kZXMsXG4gICAgICBleGl0U2V0OiB1dGlscy5mbGF0dGVuKHN0YXRlVHJhbnNpdGlvbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LmV4aXRTZXQ7XG4gICAgICB9KSksXG4gICAgICBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uLFxuICAgICAgc291cmNlOiBzdGF0ZSxcbiAgICAgIGFjdGlvbnM6IHV0aWxzLmZsYXR0ZW4oT2JqZWN0LmtleXModHJhbnNpdGlvbk1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25NYXBba2V5XS5hY3Rpb25zO1xuICAgICAgfSkpXG4gICAgfTtcbiAgfTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLl90cmFuc2l0aW9uID0gZnVuY3Rpb24gKHN0YXRlVmFsdWUsIHN0YXRlLCBfZXZlbnQpIHtcbiAgICAvLyBsZWFmIG5vZGVcbiAgICBpZiAodXRpbHMuaXNTdHJpbmcoc3RhdGVWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb25MZWFmTm9kZShzdGF0ZVZhbHVlLCBzdGF0ZSwgX2V2ZW50KTtcbiAgICB9IC8vIGhpZXJhcmNoaWNhbCBub2RlXG5cblxuICAgIGlmIChPYmplY3Qua2V5cyhzdGF0ZVZhbHVlKS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb25Db21wb3VuZE5vZGUoc3RhdGVWYWx1ZSwgc3RhdGUsIF9ldmVudCk7XG4gICAgfSAvLyBvcnRob2dvbmFsIG5vZGVcblxuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvblBhcmFsbGVsTm9kZShzdGF0ZVZhbHVlLCBzdGF0ZSwgX2V2ZW50KTtcbiAgfTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLmdldFRyYW5zaXRpb25EYXRhID0gZnVuY3Rpb24gKHN0YXRlLCBldmVudCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2l0aW9uKHN0YXRlLnZhbHVlLCBzdGF0ZSwgdXRpbHMudG9TQ1hNTEV2ZW50KGV2ZW50KSk7XG4gIH07XG5cbiAgU3RhdGVOb2RlLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHN0YXRlLCBfZXZlbnQpIHtcbiAgICB2YXIgZV8zLCBfYTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZXZlbnROYW1lID0gX2V2ZW50Lm5hbWU7XG4gICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICB2YXIgbmV4dFN0YXRlTm9kZXMgPSBbXTtcbiAgICB2YXIgc2VsZWN0ZWRUcmFuc2l0aW9uO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9iID0gX3RzbGliLl9fdmFsdWVzKHRoaXMuZ2V0Q2FuZGlkYXRlcyhldmVudE5hbWUpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gX2MudmFsdWU7XG4gICAgICAgIHZhciBjb25kID0gY2FuZGlkYXRlLmNvbmQsXG4gICAgICAgICAgICBzdGF0ZUluID0gY2FuZGlkYXRlLmluO1xuICAgICAgICB2YXIgcmVzb2x2ZWRDb250ZXh0ID0gc3RhdGUuY29udGV4dDtcbiAgICAgICAgdmFyIGlzSW5TdGF0ZSA9IHN0YXRlSW4gPyB1dGlscy5pc1N0cmluZyhzdGF0ZUluKSAmJiBpc1N0YXRlSWQoc3RhdGVJbikgPyAvLyBDaGVjayBpZiBpbiBzdGF0ZSBieSBJRFxuICAgICAgICBzdGF0ZS5tYXRjaGVzKHV0aWxzLnRvU3RhdGVWYWx1ZSh0aGlzLmdldFN0YXRlTm9kZUJ5SWQoc3RhdGVJbikucGF0aCwgdGhpcy5kZWxpbWl0ZXIpKSA6IC8vIENoZWNrIGlmIGluIHN0YXRlIGJ5IHJlbGF0aXZlIGdyYW5kcGFyZW50XG4gICAgICAgIHV0aWxzLm1hdGNoZXNTdGF0ZSh1dGlscy50b1N0YXRlVmFsdWUoc3RhdGVJbiwgdGhpcy5kZWxpbWl0ZXIpLCB1dGlscy5wYXRoKHRoaXMucGF0aC5zbGljZSgwLCAtMikpKHN0YXRlLnZhbHVlKSkgOiB0cnVlO1xuICAgICAgICB2YXIgZ3VhcmRQYXNzZWQgPSBmYWxzZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGd1YXJkUGFzc2VkID0gIWNvbmQgfHwgdXRpbHMuZXZhbHVhdGVHdWFyZCh0aGlzLm1hY2hpbmUsIGNvbmQsIHJlc29sdmVkQ29udGV4dCwgX2V2ZW50LCBzdGF0ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBldmFsdWF0ZSBndWFyZCAnXCIuY29uY2F0KGNvbmQubmFtZSB8fCBjb25kLnR5cGUsIFwiJyBpbiB0cmFuc2l0aW9uIGZvciBldmVudCAnXCIpLmNvbmNhdChldmVudE5hbWUsIFwiJyBpbiBzdGF0ZSBub2RlICdcIikuY29uY2F0KHRoaXMuaWQsIFwiJzpcXG5cIikuY29uY2F0KGVyci5tZXNzYWdlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3VhcmRQYXNzZWQgJiYgaXNJblN0YXRlKSB7XG4gICAgICAgICAgaWYgKGNhbmRpZGF0ZS50YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV4dFN0YXRlTm9kZXMgPSBjYW5kaWRhdGUudGFyZ2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFjdGlvbnMucHVzaC5hcHBseShhY3Rpb25zLCBfdHNsaWIuX19zcHJlYWRBcnJheShbXSwgX3RzbGliLl9fcmVhZChjYW5kaWRhdGUuYWN0aW9ucyksIGZhbHNlKSk7XG4gICAgICAgICAgc2VsZWN0ZWRUcmFuc2l0aW9uID0gY2FuZGlkYXRlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV8zXzEpIHtcbiAgICAgIGVfMyA9IHtcbiAgICAgICAgZXJyb3I6IGVfM18xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzZWxlY3RlZFRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCFuZXh0U3RhdGVOb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zaXRpb25zOiBbc2VsZWN0ZWRUcmFuc2l0aW9uXSxcbiAgICAgICAgZW50cnlTZXQ6IFtdLFxuICAgICAgICBleGl0U2V0OiBbXSxcbiAgICAgICAgY29uZmlndXJhdGlvbjogc3RhdGUudmFsdWUgPyBbdGhpc10gOiBbXSxcbiAgICAgICAgc291cmNlOiBzdGF0ZSxcbiAgICAgICAgYWN0aW9uczogYWN0aW9uc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYWxsTmV4dFN0YXRlTm9kZXMgPSB1dGlscy5mbGF0dGVuKG5leHRTdGF0ZU5vZGVzLm1hcChmdW5jdGlvbiAoc3RhdGVOb2RlKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZ2V0UmVsYXRpdmVTdGF0ZU5vZGVzKHN0YXRlTm9kZSwgc3RhdGUuaGlzdG9yeVZhbHVlKTtcbiAgICB9KSk7XG4gICAgdmFyIGlzSW50ZXJuYWwgPSAhIXNlbGVjdGVkVHJhbnNpdGlvbi5pbnRlcm5hbDtcbiAgICB2YXIgcmVlbnRyeU5vZGVzID0gW107XG5cbiAgICBpZiAoIWlzSW50ZXJuYWwpIHtcbiAgICAgIG5leHRTdGF0ZU5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldE5vZGUpIHtcbiAgICAgICAgcmVlbnRyeU5vZGVzLnB1c2guYXBwbHkocmVlbnRyeU5vZGVzLCBfdHNsaWIuX19zcHJlYWRBcnJheShbXSwgX3RzbGliLl9fcmVhZChfdGhpcy5nZXRFeHRlcm5hbFJlZW50cnlOb2Rlcyh0YXJnZXROb2RlKSksIGZhbHNlKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbnM6IFtzZWxlY3RlZFRyYW5zaXRpb25dLFxuICAgICAgZW50cnlTZXQ6IHJlZW50cnlOb2RlcyxcbiAgICAgIGV4aXRTZXQ6IGlzSW50ZXJuYWwgPyBbXSA6IFt0aGlzXSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IGFsbE5leHRTdGF0ZU5vZGVzLFxuICAgICAgc291cmNlOiBzdGF0ZSxcbiAgICAgIGFjdGlvbnM6IGFjdGlvbnNcbiAgICB9O1xuICB9O1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUuZ2V0RXh0ZXJuYWxSZWVudHJ5Tm9kZXMgPSBmdW5jdGlvbiAodGFyZ2V0Tm9kZSkge1xuICAgIHZhciBub2RlcyA9IFtdO1xuXG4gICAgdmFyIF9hID0gX3RzbGliLl9fcmVhZCh0YXJnZXROb2RlLm9yZGVyID4gdGhpcy5vcmRlciA/IFt0YXJnZXROb2RlLCB0aGlzXSA6IFt0aGlzLCB0YXJnZXROb2RlXSwgMiksXG4gICAgICAgIG1hcmtlciA9IF9hWzBdLFxuICAgICAgICBwb3NzaWJsZUFuY2VzdG9yID0gX2FbMV07XG5cbiAgICB3aGlsZSAobWFya2VyICYmIG1hcmtlciAhPT0gcG9zc2libGVBbmNlc3Rvcikge1xuICAgICAgbm9kZXMucHVzaChtYXJrZXIpO1xuICAgICAgbWFya2VyID0gbWFya2VyLnBhcmVudDtcbiAgICB9XG5cbiAgICBpZiAobWFya2VyICE9PSBwb3NzaWJsZUFuY2VzdG9yKSB7XG4gICAgICAvLyB3ZSBuZXZlciBnb3QgdG8gYHBvc3NpYmxlQW5jZXN0b3JgLCB0aGVyZWZvcmUgdGhlIGluaXRpYWwgYG1hcmtlcmAgXCJlc2NhcGVzXCIgaXRcbiAgICAgIC8vIGl0J3MgaW4gYSBkaWZmZXJlbnQgcGFydCBvZiB0aGUgdHJlZSBzbyBubyBzdGF0ZXMgd2lsbCBiZSByZWVudGVyZWQgZm9yIHN1Y2ggYW4gZXh0ZXJuYWwgdHJhbnNpdGlvblxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIG5vZGVzLnB1c2gocG9zc2libGVBbmNlc3Rvcik7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9O1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUuZ2V0QWN0aW9ucyA9IGZ1bmN0aW9uIChyZXNvbHZlZENvbmZpZywgaXNEb25lLCB0cmFuc2l0aW9uLCBjdXJyZW50Q29udGV4dCwgX2V2ZW50LCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgZV80LCBfYSwgZV81LCBfYjtcblxuICAgIHZhciBwcmV2Q29uZmlnID0gc3RhdGVVdGlscy5nZXRDb25maWd1cmF0aW9uKFtdLCBwcmV2U3RhdGUgPyB0aGlzLmdldFN0YXRlTm9kZXMocHJldlN0YXRlLnZhbHVlKSA6IFt0aGlzXSk7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgcmVzb2x2ZWRDb25maWdfMSA9IF90c2xpYi5fX3ZhbHVlcyhyZXNvbHZlZENvbmZpZyksIHJlc29sdmVkQ29uZmlnXzFfMSA9IHJlc29sdmVkQ29uZmlnXzEubmV4dCgpOyAhcmVzb2x2ZWRDb25maWdfMV8xLmRvbmU7IHJlc29sdmVkQ29uZmlnXzFfMSA9IHJlc29sdmVkQ29uZmlnXzEubmV4dCgpKSB7XG4gICAgICAgIHZhciBzbiA9IHJlc29sdmVkQ29uZmlnXzFfMS52YWx1ZTtcblxuICAgICAgICBpZiAoIXN0YXRlVXRpbHMuaGFzKHByZXZDb25maWcsIHNuKSB8fCBzdGF0ZVV0aWxzLmhhcyh0cmFuc2l0aW9uLmVudHJ5U2V0LCBzbi5wYXJlbnQpKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbi5lbnRyeVNldC5wdXNoKHNuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfNF8xKSB7XG4gICAgICBlXzQgPSB7XG4gICAgICAgIGVycm9yOiBlXzRfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHJlc29sdmVkQ29uZmlnXzFfMSAmJiAhcmVzb2x2ZWRDb25maWdfMV8xLmRvbmUgJiYgKF9hID0gcmVzb2x2ZWRDb25maWdfMS5yZXR1cm4pKSBfYS5jYWxsKHJlc29sdmVkQ29uZmlnXzEpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfNCkgdGhyb3cgZV80LmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBwcmV2Q29uZmlnXzEgPSBfdHNsaWIuX192YWx1ZXMocHJldkNvbmZpZyksIHByZXZDb25maWdfMV8xID0gcHJldkNvbmZpZ18xLm5leHQoKTsgIXByZXZDb25maWdfMV8xLmRvbmU7IHByZXZDb25maWdfMV8xID0gcHJldkNvbmZpZ18xLm5leHQoKSkge1xuICAgICAgICB2YXIgc24gPSBwcmV2Q29uZmlnXzFfMS52YWx1ZTtcblxuICAgICAgICBpZiAoIXN0YXRlVXRpbHMuaGFzKHJlc29sdmVkQ29uZmlnLCBzbikgfHwgc3RhdGVVdGlscy5oYXModHJhbnNpdGlvbi5leGl0U2V0LCBzbi5wYXJlbnQpKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbi5leGl0U2V0LnB1c2goc24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV81XzEpIHtcbiAgICAgIGVfNSA9IHtcbiAgICAgICAgZXJyb3I6IGVfNV8xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAocHJldkNvbmZpZ18xXzEgJiYgIXByZXZDb25maWdfMV8xLmRvbmUgJiYgKF9iID0gcHJldkNvbmZpZ18xLnJldHVybikpIF9iLmNhbGwocHJldkNvbmZpZ18xKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlXzUpIHRocm93IGVfNS5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZG9uZUV2ZW50cyA9IHV0aWxzLmZsYXR0ZW4odHJhbnNpdGlvbi5lbnRyeVNldC5tYXAoZnVuY3Rpb24gKHNuKSB7XG4gICAgICB2YXIgZXZlbnRzID0gW107XG5cbiAgICAgIGlmIChzbi50eXBlICE9PSAnZmluYWwnKSB7XG4gICAgICAgIHJldHVybiBldmVudHM7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBzbi5wYXJlbnQ7XG5cbiAgICAgIGlmICghcGFyZW50LnBhcmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnRzO1xuICAgICAgfVxuXG4gICAgICBldmVudHMucHVzaChhY3Rpb25zLmRvbmUoc24uaWQsIHNuLmRvbmVEYXRhKSwgLy8gVE9ETzogZGVwcmVjYXRlIC0gZmluYWwgc3RhdGVzIHNob3VsZCBub3QgZW1pdCBkb25lIGV2ZW50cyBmb3IgdGhlaXIgb3duIHN0YXRlLlxuICAgICAgYWN0aW9ucy5kb25lKHBhcmVudC5pZCwgc24uZG9uZURhdGEgPyB1dGlscy5tYXBDb250ZXh0KHNuLmRvbmVEYXRhLCBjdXJyZW50Q29udGV4dCwgX2V2ZW50KSA6IHVuZGVmaW5lZCkpO1xuICAgICAgdmFyIGdyYW5kcGFyZW50ID0gcGFyZW50LnBhcmVudDtcblxuICAgICAgaWYgKGdyYW5kcGFyZW50LnR5cGUgPT09ICdwYXJhbGxlbCcpIHtcbiAgICAgICAgaWYgKHN0YXRlVXRpbHMuZ2V0Q2hpbGRyZW4oZ3JhbmRwYXJlbnQpLmV2ZXJ5KGZ1bmN0aW9uIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlVXRpbHMuaXNJbkZpbmFsU3RhdGUodHJhbnNpdGlvbi5jb25maWd1cmF0aW9uLCBwYXJlbnROb2RlKTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBldmVudHMucHVzaChhY3Rpb25zLmRvbmUoZ3JhbmRwYXJlbnQuaWQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnRzO1xuICAgIH0pKTtcbiAgICB0cmFuc2l0aW9uLmV4aXRTZXQuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGIub3JkZXIgLSBhLm9yZGVyO1xuICAgIH0pO1xuICAgIHRyYW5zaXRpb24uZW50cnlTZXQuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuICAgIHZhciBlbnRyeVN0YXRlcyA9IG5ldyBTZXQodHJhbnNpdGlvbi5lbnRyeVNldCk7XG4gICAgdmFyIGV4aXRTdGF0ZXMgPSBuZXcgU2V0KHRyYW5zaXRpb24uZXhpdFNldCk7XG5cbiAgICB2YXIgX2MgPSBfdHNsaWIuX19yZWFkKFt1dGlscy5mbGF0dGVuKEFycmF5LmZyb20oZW50cnlTdGF0ZXMpLm1hcChmdW5jdGlvbiAoc3RhdGVOb2RlKSB7XG4gICAgICByZXR1cm4gX3RzbGliLl9fc3ByZWFkQXJyYXkoX3RzbGliLl9fc3ByZWFkQXJyYXkoW10sIF90c2xpYi5fX3JlYWQoc3RhdGVOb2RlLmFjdGl2aXRpZXMubWFwKGZ1bmN0aW9uIChhY3Rpdml0eSkge1xuICAgICAgICByZXR1cm4gYWN0aW9ucy5zdGFydChhY3Rpdml0eSk7XG4gICAgICB9KSksIGZhbHNlKSwgX3RzbGliLl9fcmVhZChzdGF0ZU5vZGUub25FbnRyeSksIGZhbHNlKTtcbiAgICB9KSkuY29uY2F0KGRvbmVFdmVudHMubWFwKGFjdGlvbnMucmFpc2UpKSwgdXRpbHMuZmxhdHRlbihBcnJheS5mcm9tKGV4aXRTdGF0ZXMpLm1hcChmdW5jdGlvbiAoc3RhdGVOb2RlKSB7XG4gICAgICByZXR1cm4gX3RzbGliLl9fc3ByZWFkQXJyYXkoX3RzbGliLl9fc3ByZWFkQXJyYXkoW10sIF90c2xpYi5fX3JlYWQoc3RhdGVOb2RlLm9uRXhpdCksIGZhbHNlKSwgX3RzbGliLl9fcmVhZChzdGF0ZU5vZGUuYWN0aXZpdGllcy5tYXAoZnVuY3Rpb24gKGFjdGl2aXR5KSB7XG4gICAgICAgIHJldHVybiBhY3Rpb25zLnN0b3AoYWN0aXZpdHkpO1xuICAgICAgfSkpLCBmYWxzZSk7XG4gICAgfSkpXSwgMiksXG4gICAgICAgIGVudHJ5QWN0aW9ucyA9IF9jWzBdLFxuICAgICAgICBleGl0QWN0aW9ucyA9IF9jWzFdO1xuXG4gICAgdmFyIGFjdGlvbnMkMSA9IGFjdGlvbnMudG9BY3Rpb25PYmplY3RzKGV4aXRBY3Rpb25zLmNvbmNhdCh0cmFuc2l0aW9uLmFjdGlvbnMpLmNvbmNhdChlbnRyeUFjdGlvbnMpLCB0aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpb25zKTtcblxuICAgIGlmIChpc0RvbmUpIHtcbiAgICAgIHZhciBzdG9wQWN0aW9ucyA9IGFjdGlvbnMudG9BY3Rpb25PYmplY3RzKHV0aWxzLmZsYXR0ZW4oX3RzbGliLl9fc3ByZWFkQXJyYXkoW10sIF90c2xpYi5fX3JlYWQocmVzb2x2ZWRDb25maWcpLCBmYWxzZSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5vcmRlciAtIGEub3JkZXI7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKHN0YXRlTm9kZSkge1xuICAgICAgICByZXR1cm4gc3RhdGVOb2RlLm9uRXhpdDtcbiAgICAgIH0pKSwgdGhpcy5tYWNoaW5lLm9wdGlvbnMuYWN0aW9ucykuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi50eXBlICE9PSBhY3Rpb25UeXBlcy5yYWlzZSAmJiAoYWN0aW9uLnR5cGUgIT09IGFjdGlvblR5cGVzLnNlbmQgfHwgISFhY3Rpb24udG8gJiYgYWN0aW9uLnRvICE9PSB0eXBlcy5TcGVjaWFsVGFyZ2V0cy5JbnRlcm5hbCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY3Rpb25zJDEuY29uY2F0KHN0b3BBY3Rpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9ucyQxO1xuICB9O1xuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIHRoZSBuZXh0IHN0YXRlIGdpdmVuIHRoZSBjdXJyZW50IGBzdGF0ZWAgYW5kIHNlbnQgYGV2ZW50YC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzdGF0ZSBUaGUgY3VycmVudCBTdGF0ZSBpbnN0YW5jZSBvciBzdGF0ZSB2YWx1ZVxyXG4gICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdGhhdCB3YXMgc2VudCBhdCB0aGUgY3VycmVudCBzdGF0ZVxyXG4gICAqIEBwYXJhbSBjb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgKGV4dGVuZGVkIHN0YXRlKSBvZiB0aGUgY3VycmVudCBzdGF0ZVxyXG4gICAqL1xuXG5cbiAgU3RhdGVOb2RlLnByb3RvdHlwZS50cmFuc2l0aW9uID0gZnVuY3Rpb24gKHN0YXRlLCBldmVudCwgY29udGV4dCwgZXhlYykge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHRoaXMuaW5pdGlhbFN0YXRlO1xuICAgIH1cblxuICAgIHZhciBfZXZlbnQgPSB1dGlscy50b1NDWE1MRXZlbnQoZXZlbnQpO1xuXG4gICAgdmFyIGN1cnJlbnRTdGF0ZTtcblxuICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIFN0YXRlLlN0YXRlKSB7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjb250ZXh0ID09PSB1bmRlZmluZWQgPyBzdGF0ZSA6IHRoaXMucmVzb2x2ZVN0YXRlKFN0YXRlLlN0YXRlLmZyb20oc3RhdGUsIGNvbnRleHQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlc29sdmVkU3RhdGVWYWx1ZSA9IHV0aWxzLmlzU3RyaW5nKHN0YXRlKSA/IHRoaXMucmVzb2x2ZSh1dGlscy5wYXRoVG9TdGF0ZVZhbHVlKHRoaXMuZ2V0UmVzb2x2ZWRQYXRoKHN0YXRlKSkpIDogdGhpcy5yZXNvbHZlKHN0YXRlKTtcbiAgICAgIHZhciByZXNvbHZlZENvbnRleHQgPSBjb250ZXh0ICE9PSBudWxsICYmIGNvbnRleHQgIT09IHZvaWQgMCA/IGNvbnRleHQgOiB0aGlzLm1hY2hpbmUuY29udGV4dDtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IHRoaXMucmVzb2x2ZVN0YXRlKFN0YXRlLlN0YXRlLmZyb20ocmVzb2x2ZWRTdGF0ZVZhbHVlLCByZXNvbHZlZENvbnRleHQpKTtcbiAgICB9XG5cbiAgICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04gJiYgX2V2ZW50Lm5hbWUgPT09IFdJTERDQVJEKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBldmVudCBjYW5ub3QgaGF2ZSB0aGUgd2lsZGNhcmQgdHlwZSAoJ1wiLmNvbmNhdChXSUxEQ0FSRCwgXCInKVwiKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3RyaWN0KSB7XG4gICAgICBpZiAoIXRoaXMuZXZlbnRzLmluY2x1ZGVzKF9ldmVudC5uYW1lKSAmJiAhdXRpbHMuaXNCdWlsdEluRXZlbnQoX2V2ZW50Lm5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hY2hpbmUgJ1wiLmNvbmNhdCh0aGlzLmlkLCBcIicgZG9lcyBub3QgYWNjZXB0IGV2ZW50ICdcIikuY29uY2F0KF9ldmVudC5uYW1lLCBcIidcIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdGF0ZVRyYW5zaXRpb24gPSB0aGlzLl90cmFuc2l0aW9uKGN1cnJlbnRTdGF0ZS52YWx1ZSwgY3VycmVudFN0YXRlLCBfZXZlbnQpIHx8IHtcbiAgICAgIHRyYW5zaXRpb25zOiBbXSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IFtdLFxuICAgICAgZW50cnlTZXQ6IFtdLFxuICAgICAgZXhpdFNldDogW10sXG4gICAgICBzb3VyY2U6IGN1cnJlbnRTdGF0ZSxcbiAgICAgIGFjdGlvbnM6IFtdXG4gICAgfTtcbiAgICB2YXIgcHJldkNvbmZpZyA9IHN0YXRlVXRpbHMuZ2V0Q29uZmlndXJhdGlvbihbXSwgdGhpcy5nZXRTdGF0ZU5vZGVzKGN1cnJlbnRTdGF0ZS52YWx1ZSkpO1xuICAgIHZhciByZXNvbHZlZENvbmZpZyA9IHN0YXRlVHJhbnNpdGlvbi5jb25maWd1cmF0aW9uLmxlbmd0aCA/IHN0YXRlVXRpbHMuZ2V0Q29uZmlndXJhdGlvbihwcmV2Q29uZmlnLCBzdGF0ZVRyYW5zaXRpb24uY29uZmlndXJhdGlvbikgOiBwcmV2Q29uZmlnO1xuICAgIHN0YXRlVHJhbnNpdGlvbi5jb25maWd1cmF0aW9uID0gX3RzbGliLl9fc3ByZWFkQXJyYXkoW10sIF90c2xpYi5fX3JlYWQocmVzb2x2ZWRDb25maWcpLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZVRyYW5zaXRpb24oc3RhdGVUcmFuc2l0aW9uLCBjdXJyZW50U3RhdGUsIGN1cnJlbnRTdGF0ZS5jb250ZXh0LCBleGVjLCBfZXZlbnQpO1xuICB9O1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUucmVzb2x2ZVJhaXNlZFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoc3RhdGUsIF9ldmVudCwgb3JpZ2luYWxFdmVudCwgcHJlZGljdGFibGVFeGVjKSB7XG4gICAgdmFyIF9hO1xuXG4gICAgdmFyIGN1cnJlbnRBY3Rpb25zID0gc3RhdGUuYWN0aW9ucztcbiAgICBzdGF0ZSA9IHRoaXMudHJhbnNpdGlvbihzdGF0ZSwgX2V2ZW50LCB1bmRlZmluZWQsIHByZWRpY3RhYmxlRXhlYyk7IC8vIFNhdmUgb3JpZ2luYWwgZXZlbnQgdG8gc3RhdGVcbiAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCBiZSB0aGUgcmFpc2VkIGV2ZW50ISBEZWxldGUgaW4gVjUgKGJyZWFraW5nKVxuXG4gICAgc3RhdGUuX2V2ZW50ID0gb3JpZ2luYWxFdmVudDtcbiAgICBzdGF0ZS5ldmVudCA9IG9yaWdpbmFsRXZlbnQuZGF0YTtcblxuICAgIChfYSA9IHN0YXRlLmFjdGlvbnMpLnVuc2hpZnQuYXBwbHkoX2EsIF90c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBfdHNsaWIuX19yZWFkKGN1cnJlbnRBY3Rpb25zKSwgZmFsc2UpKTtcblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLnJlc29sdmVUcmFuc2l0aW9uID0gZnVuY3Rpb24gKHN0YXRlVHJhbnNpdGlvbiwgY3VycmVudFN0YXRlLCBjb250ZXh0LCBwcmVkaWN0YWJsZUV4ZWMsIF9ldmVudCkge1xuICAgIHZhciBlXzYsIF9hO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfZXZlbnQgPT09IHZvaWQgMCkge1xuICAgICAgX2V2ZW50ID0gYWN0aW9ucy5pbml0RXZlbnQ7XG4gICAgfVxuXG4gICAgdmFyIGNvbmZpZ3VyYXRpb24gPSBzdGF0ZVRyYW5zaXRpb24uY29uZmlndXJhdGlvbjsgLy8gVHJhbnNpdGlvbiB3aWxsIFwiYXBwbHlcIiBpZjpcbiAgICAvLyAtIHRoaXMgaXMgdGhlIGluaXRpYWwgc3RhdGUgKHRoZXJlIGlzIG5vIGN1cnJlbnQgc3RhdGUpXG4gICAgLy8gLSBPUiB0aGVyZSBhcmUgdHJhbnNpdGlvbnNcblxuICAgIHZhciB3aWxsVHJhbnNpdGlvbiA9ICFjdXJyZW50U3RhdGUgfHwgc3RhdGVUcmFuc2l0aW9uLnRyYW5zaXRpb25zLmxlbmd0aCA+IDA7XG4gICAgdmFyIHJlc29sdmVkQ29uZmlndXJhdGlvbiA9IHdpbGxUcmFuc2l0aW9uID8gc3RhdGVUcmFuc2l0aW9uLmNvbmZpZ3VyYXRpb24gOiBjdXJyZW50U3RhdGUgPyBjdXJyZW50U3RhdGUuY29uZmlndXJhdGlvbiA6IFtdO1xuICAgIHZhciBpc0RvbmUgPSBzdGF0ZVV0aWxzLmlzSW5GaW5hbFN0YXRlKHJlc29sdmVkQ29uZmlndXJhdGlvbiwgdGhpcyk7XG4gICAgdmFyIHJlc29sdmVkU3RhdGVWYWx1ZSA9IHdpbGxUcmFuc2l0aW9uID8gc3RhdGVVdGlscy5nZXRWYWx1ZSh0aGlzLm1hY2hpbmUsIGNvbmZpZ3VyYXRpb24pIDogdW5kZWZpbmVkO1xuICAgIHZhciBoaXN0b3J5VmFsdWUgPSBjdXJyZW50U3RhdGUgPyBjdXJyZW50U3RhdGUuaGlzdG9yeVZhbHVlID8gY3VycmVudFN0YXRlLmhpc3RvcnlWYWx1ZSA6IHN0YXRlVHJhbnNpdGlvbi5zb3VyY2UgPyB0aGlzLm1hY2hpbmUuaGlzdG9yeVZhbHVlKGN1cnJlbnRTdGF0ZS52YWx1ZSkgOiB1bmRlZmluZWQgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGFjdGlvbnMkMSA9IHRoaXMuZ2V0QWN0aW9ucyhuZXcgU2V0KHJlc29sdmVkQ29uZmlndXJhdGlvbiksIGlzRG9uZSwgc3RhdGVUcmFuc2l0aW9uLCBjb250ZXh0LCBfZXZlbnQsIGN1cnJlbnRTdGF0ZSk7XG4gICAgdmFyIGFjdGl2aXRpZXMgPSBjdXJyZW50U3RhdGUgPyBfdHNsaWIuX19hc3NpZ24oe30sIGN1cnJlbnRTdGF0ZS5hY3Rpdml0aWVzKSA6IHt9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIGFjdGlvbnNfMSA9IF90c2xpYi5fX3ZhbHVlcyhhY3Rpb25zJDEpLCBhY3Rpb25zXzFfMSA9IGFjdGlvbnNfMS5uZXh0KCk7ICFhY3Rpb25zXzFfMS5kb25lOyBhY3Rpb25zXzFfMSA9IGFjdGlvbnNfMS5uZXh0KCkpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IGFjdGlvbnNfMV8xLnZhbHVlO1xuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gYWN0aW9uVHlwZXMuc3RhcnQpIHtcbiAgICAgICAgICBhY3Rpdml0aWVzW2FjdGlvbi5hY3Rpdml0eS5pZCB8fCBhY3Rpb24uYWN0aXZpdHkudHlwZV0gPSBhY3Rpb247XG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09IGFjdGlvblR5cGVzLnN0b3ApIHtcbiAgICAgICAgICBhY3Rpdml0aWVzW2FjdGlvbi5hY3Rpdml0eS5pZCB8fCBhY3Rpb24uYWN0aXZpdHkudHlwZV0gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfNl8xKSB7XG4gICAgICBlXzYgPSB7XG4gICAgICAgIGVycm9yOiBlXzZfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGFjdGlvbnNfMV8xICYmICFhY3Rpb25zXzFfMS5kb25lICYmIChfYSA9IGFjdGlvbnNfMS5yZXR1cm4pKSBfYS5jYWxsKGFjdGlvbnNfMSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV82KSB0aHJvdyBlXzYuZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9iID0gX3RzbGliLl9fcmVhZChhY3Rpb25zLnJlc29sdmVBY3Rpb25zKHRoaXMsIGN1cnJlbnRTdGF0ZSwgY29udGV4dCwgX2V2ZW50LCBhY3Rpb25zJDEsIHByZWRpY3RhYmxlRXhlYywgdGhpcy5tYWNoaW5lLmNvbmZpZy5wcmVkaWN0YWJsZUFjdGlvbkFyZ3VtZW50cyB8fCB0aGlzLm1hY2hpbmUuY29uZmlnLnByZXNlcnZlQWN0aW9uT3JkZXIpLCAyKSxcbiAgICAgICAgcmVzb2x2ZWRBY3Rpb25zID0gX2JbMF0sXG4gICAgICAgIHVwZGF0ZWRDb250ZXh0ID0gX2JbMV07XG5cbiAgICB2YXIgX2MgPSBfdHNsaWIuX19yZWFkKHV0aWxzLnBhcnRpdGlvbihyZXNvbHZlZEFjdGlvbnMsIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBhY3Rpb24udHlwZSA9PT0gYWN0aW9uVHlwZXMucmFpc2UgfHwgYWN0aW9uLnR5cGUgPT09IGFjdGlvblR5cGVzLnNlbmQgJiYgYWN0aW9uLnRvID09PSB0eXBlcy5TcGVjaWFsVGFyZ2V0cy5JbnRlcm5hbDtcbiAgICB9KSwgMiksXG4gICAgICAgIHJhaXNlZEV2ZW50cyA9IF9jWzBdLFxuICAgICAgICBub25SYWlzZWRBY3Rpb25zID0gX2NbMV07XG5cbiAgICB2YXIgaW52b2tlQWN0aW9ucyA9IHJlc29sdmVkQWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgdmFyIF9hO1xuXG4gICAgICByZXR1cm4gYWN0aW9uLnR5cGUgPT09IGFjdGlvblR5cGVzLnN0YXJ0ICYmICgoX2EgPSBhY3Rpb24uYWN0aXZpdHkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlKSA9PT0gYWN0aW9uVHlwZXMuaW52b2tlO1xuICAgIH0pO1xuICAgIHZhciBjaGlsZHJlbiA9IGludm9rZUFjdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGFjdGlvbikge1xuICAgICAgYWNjW2FjdGlvbi5hY3Rpdml0eS5pZF0gPSBBY3Rvci5jcmVhdGVJbnZvY2FibGVBY3RvcihhY3Rpb24uYWN0aXZpdHksIF90aGlzLm1hY2hpbmUsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBjdXJyZW50U3RhdGUgPyBfdHNsaWIuX19hc3NpZ24oe30sIGN1cnJlbnRTdGF0ZS5jaGlsZHJlbikgOiB7fSk7XG4gICAgdmFyIG5leHRTdGF0ZSA9IG5ldyBTdGF0ZS5TdGF0ZSh7XG4gICAgICB2YWx1ZTogcmVzb2x2ZWRTdGF0ZVZhbHVlIHx8IGN1cnJlbnRTdGF0ZS52YWx1ZSxcbiAgICAgIGNvbnRleHQ6IHVwZGF0ZWRDb250ZXh0LFxuICAgICAgX2V2ZW50OiBfZXZlbnQsXG4gICAgICAvLyBQZXJzaXN0IF9zZXNzaW9uaWQgYmV0d2VlbiBzdGF0ZXNcbiAgICAgIF9zZXNzaW9uaWQ6IGN1cnJlbnRTdGF0ZSA/IGN1cnJlbnRTdGF0ZS5fc2Vzc2lvbmlkIDogbnVsbCxcbiAgICAgIGhpc3RvcnlWYWx1ZTogcmVzb2x2ZWRTdGF0ZVZhbHVlID8gaGlzdG9yeVZhbHVlID8gdXRpbHMudXBkYXRlSGlzdG9yeVZhbHVlKGhpc3RvcnlWYWx1ZSwgcmVzb2x2ZWRTdGF0ZVZhbHVlKSA6IHVuZGVmaW5lZCA6IGN1cnJlbnRTdGF0ZSA/IGN1cnJlbnRTdGF0ZS5oaXN0b3J5VmFsdWUgOiB1bmRlZmluZWQsXG4gICAgICBoaXN0b3J5OiAhcmVzb2x2ZWRTdGF0ZVZhbHVlIHx8IHN0YXRlVHJhbnNpdGlvbi5zb3VyY2UgPyBjdXJyZW50U3RhdGUgOiB1bmRlZmluZWQsXG4gICAgICBhY3Rpb25zOiByZXNvbHZlZFN0YXRlVmFsdWUgPyBub25SYWlzZWRBY3Rpb25zIDogW10sXG4gICAgICBhY3Rpdml0aWVzOiByZXNvbHZlZFN0YXRlVmFsdWUgPyBhY3Rpdml0aWVzIDogY3VycmVudFN0YXRlID8gY3VycmVudFN0YXRlLmFjdGl2aXRpZXMgOiB7fSxcbiAgICAgIGV2ZW50czogW10sXG4gICAgICBjb25maWd1cmF0aW9uOiByZXNvbHZlZENvbmZpZ3VyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uczogc3RhdGVUcmFuc2l0aW9uLnRyYW5zaXRpb25zLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgZG9uZTogaXNEb25lLFxuICAgICAgdGFnczogc3RhdGVVdGlscy5nZXRUYWdzRnJvbUNvbmZpZ3VyYXRpb24ocmVzb2x2ZWRDb25maWd1cmF0aW9uKSxcbiAgICAgIG1hY2hpbmU6IHRoaXNcbiAgICB9KTtcbiAgICB2YXIgZGlkVXBkYXRlQ29udGV4dCA9IGNvbnRleHQgIT09IHVwZGF0ZWRDb250ZXh0O1xuICAgIG5leHRTdGF0ZS5jaGFuZ2VkID0gX2V2ZW50Lm5hbWUgPT09IGFjdGlvblR5cGVzLnVwZGF0ZSB8fCBkaWRVcGRhdGVDb250ZXh0OyAvLyBEaXNwb3NlIG9mIHBlbnVsdGltYXRlIGhpc3RvcmllcyB0byBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXG4gICAgdmFyIGhpc3RvcnkgPSBuZXh0U3RhdGUuaGlzdG9yeTtcblxuICAgIGlmIChoaXN0b3J5KSB7XG4gICAgICBkZWxldGUgaGlzdG9yeS5oaXN0b3J5O1xuICAgIH0gLy8gVGhlcmUgYXJlIHRyYW5zaWVudCB0cmFuc2l0aW9ucyBpZiB0aGUgbWFjaGluZSBpcyBub3QgaW4gYSBmaW5hbCBzdGF0ZVxuICAgIC8vIGFuZCBpZiBzb21lIG9mIHRoZSBzdGF0ZSBub2RlcyBoYXZlIHRyYW5zaWVudCAoXCJhbHdheXNcIikgdHJhbnNpdGlvbnMuXG5cblxuICAgIHZhciBoYXNBbHdheXNUcmFuc2l0aW9ucyA9ICFpc0RvbmUgJiYgKHRoaXMuX3RyYW5zaWVudCB8fCBjb25maWd1cmF0aW9uLnNvbWUoZnVuY3Rpb24gKHN0YXRlTm9kZSkge1xuICAgICAgcmV0dXJuIHN0YXRlTm9kZS5fdHJhbnNpZW50O1xuICAgIH0pKTsgLy8gSWYgdGhlcmUgYXJlIG5vIGVuYWJsZWQgdHJhbnNpdGlvbnMsIGNoZWNrIGlmIHRoZXJlIGFyZSB0cmFuc2llbnQgdHJhbnNpdGlvbnMuXG4gICAgLy8gSWYgdGhlcmUgYXJlIHRyYW5zaWVudCB0cmFuc2l0aW9ucywgY29udGludWUgY2hlY2tpbmcgZm9yIG1vcmUgdHJhbnNpdGlvbnNcbiAgICAvLyBiZWNhdXNlIGFuIHRyYW5zaWVudCB0cmFuc2l0aW9uIHNob3VsZCBiZSB0cmlnZ2VyZWQgZXZlbiBpZiB0aGVyZSBhcmUgbm9cbiAgICAvLyBlbmFibGVkIHRyYW5zaXRpb25zLlxuICAgIC8vXG4gICAgLy8gSWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGFuIHRyYW5zaWVudCB0cmFuc2l0aW9uIHRoZW4gc3RvcCB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AuXG4gICAgLy9cbiAgICAvLyBPdGhlcndpc2UsIGlmIHRoZXJlIGFyZSBubyBlbmFibGVkIG5vciB0cmFuc2llbnQgdHJhbnNpdGlvbnMsIHdlIGFyZSBkb25lLlxuXG4gICAgaWYgKCF3aWxsVHJhbnNpdGlvbiAmJiAoIWhhc0Fsd2F5c1RyYW5zaXRpb25zIHx8IF9ldmVudC5uYW1lID09PSBOVUxMX0VWRU5UKSkge1xuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVOZXh0U3RhdGUgPSBuZXh0U3RhdGU7XG5cbiAgICBpZiAoIWlzRG9uZSkge1xuICAgICAgaWYgKGhhc0Fsd2F5c1RyYW5zaXRpb25zKSB7XG4gICAgICAgIG1heWJlTmV4dFN0YXRlID0gdGhpcy5yZXNvbHZlUmFpc2VkVHJhbnNpdGlvbihtYXliZU5leHRTdGF0ZSwge1xuICAgICAgICAgIHR5cGU6IGFjdGlvblR5cGVzLm51bGxFdmVudFxuICAgICAgICB9LCBfZXZlbnQsIHByZWRpY3RhYmxlRXhlYyk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChyYWlzZWRFdmVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciByYWlzZWRFdmVudCA9IHJhaXNlZEV2ZW50cy5zaGlmdCgpO1xuICAgICAgICBtYXliZU5leHRTdGF0ZSA9IHRoaXMucmVzb2x2ZVJhaXNlZFRyYW5zaXRpb24obWF5YmVOZXh0U3RhdGUsIHJhaXNlZEV2ZW50Ll9ldmVudCwgX2V2ZW50LCBwcmVkaWN0YWJsZUV4ZWMpO1xuICAgICAgfVxuICAgIH0gLy8gRGV0ZWN0IGlmIHN0YXRlIGNoYW5nZWRcblxuXG4gICAgdmFyIGNoYW5nZWQgPSBtYXliZU5leHRTdGF0ZS5jaGFuZ2VkIHx8IChoaXN0b3J5ID8gISFtYXliZU5leHRTdGF0ZS5hY3Rpb25zLmxlbmd0aCB8fCBkaWRVcGRhdGVDb250ZXh0IHx8IHR5cGVvZiBoaXN0b3J5LnZhbHVlICE9PSB0eXBlb2YgbWF5YmVOZXh0U3RhdGUudmFsdWUgfHwgIVN0YXRlLnN0YXRlVmFsdWVzRXF1YWwobWF5YmVOZXh0U3RhdGUudmFsdWUsIGhpc3RvcnkudmFsdWUpIDogdW5kZWZpbmVkKTtcbiAgICBtYXliZU5leHRTdGF0ZS5jaGFuZ2VkID0gY2hhbmdlZDsgLy8gUHJlc2VydmUgb3JpZ2luYWwgaGlzdG9yeSBhZnRlciByYWlzZWQgZXZlbnRzXG5cbiAgICBtYXliZU5leHRTdGF0ZS5oaXN0b3J5ID0gaGlzdG9yeTtcbiAgICByZXR1cm4gbWF5YmVOZXh0U3RhdGU7XG4gIH07XG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGNoaWxkIHN0YXRlIG5vZGUgZnJvbSBpdHMgcmVsYXRpdmUgYHN0YXRlS2V5YCwgb3IgdGhyb3dzLlxyXG4gICAqL1xuXG5cbiAgU3RhdGVOb2RlLnByb3RvdHlwZS5nZXRTdGF0ZU5vZGUgPSBmdW5jdGlvbiAoc3RhdGVLZXkpIHtcbiAgICBpZiAoaXNTdGF0ZUlkKHN0YXRlS2V5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFjaGluZS5nZXRTdGF0ZU5vZGVCeUlkKHN0YXRlS2V5KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3RhdGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gcmV0cmlldmUgY2hpbGQgc3RhdGUgJ1wiLmNvbmNhdChzdGF0ZUtleSwgXCInIGZyb20gJ1wiKS5jb25jYXQodGhpcy5pZCwgXCInOyBubyBjaGlsZCBzdGF0ZXMgZXhpc3QuXCIpKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5zdGF0ZXNbc3RhdGVLZXldO1xuXG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoaWxkIHN0YXRlICdcIi5jb25jYXQoc3RhdGVLZXksIFwiJyBkb2VzIG5vdCBleGlzdCBvbiAnXCIpLmNvbmNhdCh0aGlzLmlkLCBcIidcIikpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIHN0YXRlIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gYHN0YXRlSWRgLCBvciB0aHJvd3MuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc3RhdGVJZCBUaGUgc3RhdGUgSUQuIFRoZSBwcmVmaXggXCIjXCIgaXMgcmVtb3ZlZC5cclxuICAgKi9cblxuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUuZ2V0U3RhdGVOb2RlQnlJZCA9IGZ1bmN0aW9uIChzdGF0ZUlkKSB7XG4gICAgdmFyIHJlc29sdmVkU3RhdGVJZCA9IGlzU3RhdGVJZChzdGF0ZUlkKSA/IHN0YXRlSWQuc2xpY2UoU1RBVEVfSURFTlRJRklFUi5sZW5ndGgpIDogc3RhdGVJZDtcblxuICAgIGlmIChyZXNvbHZlZFN0YXRlSWQgPT09IHRoaXMuaWQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZU5vZGUgPSB0aGlzLm1hY2hpbmUuaWRNYXBbcmVzb2x2ZWRTdGF0ZUlkXTtcblxuICAgIGlmICghc3RhdGVOb2RlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGlsZCBzdGF0ZSBub2RlICcjXCIuY29uY2F0KHJlc29sdmVkU3RhdGVJZCwgXCInIGRvZXMgbm90IGV4aXN0IG9uIG1hY2hpbmUgJ1wiKS5jb25jYXQodGhpcy5pZCwgXCInXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGVOb2RlO1xuICB9O1xuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSByZWxhdGl2ZSBzdGF0ZSBub2RlIGZyb20gdGhlIGdpdmVuIGBzdGF0ZVBhdGhgLCBvciB0aHJvd3MuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc3RhdGVQYXRoIFRoZSBzdHJpbmcgb3Igc3RyaW5nIGFycmF5IHJlbGF0aXZlIHBhdGggdG8gdGhlIHN0YXRlIG5vZGUuXHJcbiAgICovXG5cblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLmdldFN0YXRlTm9kZUJ5UGF0aCA9IGZ1bmN0aW9uIChzdGF0ZVBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHN0YXRlUGF0aCA9PT0gJ3N0cmluZycgJiYgaXNTdGF0ZUlkKHN0YXRlUGF0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlTm9kZUJ5SWQoc3RhdGVQYXRoLnNsaWNlKDEpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsvLyB0cnkgaW5kaXZpZHVhbCBwYXRoc1xuICAgICAgICAvLyB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheVN0YXRlUGF0aCA9IHV0aWxzLnRvU3RhdGVQYXRoKHN0YXRlUGF0aCwgdGhpcy5kZWxpbWl0ZXIpLnNsaWNlKCk7XG4gICAgdmFyIGN1cnJlbnRTdGF0ZU5vZGUgPSB0aGlzO1xuXG4gICAgd2hpbGUgKGFycmF5U3RhdGVQYXRoLmxlbmd0aCkge1xuICAgICAgdmFyIGtleSA9IGFycmF5U3RhdGVQYXRoLnNoaWZ0KCk7XG5cbiAgICAgIGlmICgha2V5Lmxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY3VycmVudFN0YXRlTm9kZSA9IGN1cnJlbnRTdGF0ZU5vZGUuZ2V0U3RhdGVOb2RlKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZU5vZGU7XG4gIH07XG4gIC8qKlxyXG4gICAqIFJlc29sdmVzIGEgcGFydGlhbCBzdGF0ZSB2YWx1ZSB3aXRoIGl0cyBmdWxsIHJlcHJlc2VudGF0aW9uIGluIHRoaXMgbWFjaGluZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzdGF0ZVZhbHVlIFRoZSBwYXJ0aWFsIHN0YXRlIHZhbHVlIHRvIHJlc29sdmUuXHJcbiAgICovXG5cblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiAoc3RhdGVWYWx1ZSkge1xuICAgIHZhciBfYTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXN0YXRlVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluaXRpYWxTdGF0ZVZhbHVlIHx8IEVNUFRZX09CSkVDVDsgLy8gVE9ETzogdHlwZS1zcGVjaWZpYyBwcm9wZXJ0aWVzXG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3BhcmFsbGVsJzpcbiAgICAgICAgcmV0dXJuIHV0aWxzLm1hcFZhbHVlcyh0aGlzLmluaXRpYWxTdGF0ZVZhbHVlLCBmdW5jdGlvbiAoc3ViU3RhdGVWYWx1ZSwgc3ViU3RhdGVLZXkpIHtcbiAgICAgICAgICByZXR1cm4gc3ViU3RhdGVWYWx1ZSA/IF90aGlzLmdldFN0YXRlTm9kZShzdWJTdGF0ZUtleSkucmVzb2x2ZShzdGF0ZVZhbHVlW3N1YlN0YXRlS2V5XSB8fCBzdWJTdGF0ZVZhbHVlKSA6IEVNUFRZX09CSkVDVDtcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NvbXBvdW5kJzpcbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHN0YXRlVmFsdWUpKSB7XG4gICAgICAgICAgdmFyIHN1YlN0YXRlTm9kZSA9IHRoaXMuZ2V0U3RhdGVOb2RlKHN0YXRlVmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHN1YlN0YXRlTm9kZS50eXBlID09PSAncGFyYWxsZWwnIHx8IHN1YlN0YXRlTm9kZS50eXBlID09PSAnY29tcG91bmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gX2EgPSB7fSwgX2Fbc3RhdGVWYWx1ZV0gPSBzdWJTdGF0ZU5vZGUuaW5pdGlhbFN0YXRlVmFsdWUsIF9hO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdGF0ZVZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhzdGF0ZVZhbHVlKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsU3RhdGVWYWx1ZSB8fCB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1dGlscy5tYXBWYWx1ZXMoc3RhdGVWYWx1ZSwgZnVuY3Rpb24gKHN1YlN0YXRlVmFsdWUsIHN1YlN0YXRlS2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHN1YlN0YXRlVmFsdWUgPyBfdGhpcy5nZXRTdGF0ZU5vZGUoc3ViU3RhdGVLZXkpLnJlc29sdmUoc3ViU3RhdGVWYWx1ZSkgOiBFTVBUWV9PQkpFQ1Q7XG4gICAgICAgIH0pO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gc3RhdGVWYWx1ZSB8fCBFTVBUWV9PQkpFQ1Q7XG4gICAgfVxuICB9O1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUuZ2V0UmVzb2x2ZWRQYXRoID0gZnVuY3Rpb24gKHN0YXRlSWRlbnRpZmllcikge1xuICAgIGlmIChpc1N0YXRlSWQoc3RhdGVJZGVudGlmaWVyKSkge1xuICAgICAgdmFyIHN0YXRlTm9kZSA9IHRoaXMubWFjaGluZS5pZE1hcFtzdGF0ZUlkZW50aWZpZXIuc2xpY2UoU1RBVEVfSURFTlRJRklFUi5sZW5ndGgpXTtcblxuICAgICAgaWYgKCFzdGF0ZU5vZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgc3RhdGUgbm9kZSAnXCIuY29uY2F0KHN0YXRlSWRlbnRpZmllciwgXCInXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlTm9kZS5wYXRoO1xuICAgIH1cblxuICAgIHJldHVybiB1dGlscy50b1N0YXRlUGF0aChzdGF0ZUlkZW50aWZpZXIsIHRoaXMuZGVsaW1pdGVyKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVOb2RlLnByb3RvdHlwZSwgXCJpbml0aWFsU3RhdGVWYWx1ZVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2E7XG5cbiAgICAgIGlmICh0aGlzLl9fY2FjaGUuaW5pdGlhbFN0YXRlVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19jYWNoZS5pbml0aWFsU3RhdGVWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZVZhbHVlO1xuXG4gICAgICBpZiAodGhpcy50eXBlID09PSAncGFyYWxsZWwnKSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZVZhbHVlID0gdXRpbHMubWFwRmlsdGVyVmFsdWVzKHRoaXMuc3RhdGVzLCBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUuaW5pdGlhbFN0YXRlVmFsdWUgfHwgRU1QVFlfT0JKRUNUO1xuICAgICAgICB9LCBmdW5jdGlvbiAoc3RhdGVOb2RlKSB7XG4gICAgICAgICAgcmV0dXJuICEoc3RhdGVOb2RlLnR5cGUgPT09ICdoaXN0b3J5Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmluaXRpYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGVzW3RoaXMuaW5pdGlhbF0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbml0aWFsIHN0YXRlICdcIi5jb25jYXQodGhpcy5pbml0aWFsLCBcIicgbm90IGZvdW5kIG9uICdcIikuY29uY2F0KHRoaXMua2V5LCBcIidcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdGlhbFN0YXRlVmFsdWUgPSBzdGF0ZVV0aWxzLmlzTGVhZk5vZGUodGhpcy5zdGF0ZXNbdGhpcy5pbml0aWFsXSkgPyB0aGlzLmluaXRpYWwgOiAoX2EgPSB7fSwgX2FbdGhpcy5pbml0aWFsXSA9IHRoaXMuc3RhdGVzW3RoaXMuaW5pdGlhbF0uaW5pdGlhbFN0YXRlVmFsdWUsIF9hKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZSBmaW5pdGUgc3RhdGUgdmFsdWUgb2YgYSBtYWNoaW5lIHdpdGhvdXQgY2hpbGQgc3RhdGVzIGlzIGp1c3QgYW4gZW1wdHkgb2JqZWN0XG4gICAgICAgIGluaXRpYWxTdGF0ZVZhbHVlID0ge307XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX19jYWNoZS5pbml0aWFsU3RhdGVWYWx1ZSA9IGluaXRpYWxTdGF0ZVZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXMuX19jYWNoZS5pbml0aWFsU3RhdGVWYWx1ZTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZVZhbHVlLCBjb250ZXh0KSB7XG4gICAgdGhpcy5faW5pdCgpOyAvLyBUT0RPOiB0aGlzIHNob3VsZCBiZSBpbiB0aGUgY29uc3RydWN0b3IgKHNlZSBub3RlIGluIGNvbnN0cnVjdG9yKVxuXG5cbiAgICB2YXIgY29uZmlndXJhdGlvbiA9IHRoaXMuZ2V0U3RhdGVOb2RlcyhzdGF0ZVZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlVHJhbnNpdGlvbih7XG4gICAgICBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uLFxuICAgICAgZW50cnlTZXQ6IF90c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBfdHNsaWIuX19yZWFkKGNvbmZpZ3VyYXRpb24pLCBmYWxzZSksXG4gICAgICBleGl0U2V0OiBbXSxcbiAgICAgIHRyYW5zaXRpb25zOiBbXSxcbiAgICAgIHNvdXJjZTogdW5kZWZpbmVkLFxuICAgICAgYWN0aW9uczogW11cbiAgICB9LCB1bmRlZmluZWQsIGNvbnRleHQgIT09IG51bGwgJiYgY29udGV4dCAhPT0gdm9pZCAwID8gY29udGV4dCA6IHRoaXMubWFjaGluZS5jb250ZXh0LCB1bmRlZmluZWQpO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdGF0ZU5vZGUucHJvdG90eXBlLCBcImluaXRpYWxTdGF0ZVwiLCB7XG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaW5pdGlhbCBTdGF0ZSBpbnN0YW5jZSwgd2hpY2ggaW5jbHVkZXMgYWxsIGFjdGlvbnMgdG8gYmUgZXhlY3V0ZWQgZnJvbVxyXG4gICAgICogZW50ZXJpbmcgdGhlIGluaXRpYWwgc3RhdGUuXHJcbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbml0aWFsU3RhdGVWYWx1ZSA9IHRoaXMuaW5pdGlhbFN0YXRlVmFsdWU7XG5cbiAgICAgIGlmICghaW5pdGlhbFN0YXRlVmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJldHJpZXZlIGluaXRpYWwgc3RhdGUgZnJvbSBzaW1wbGUgc3RhdGUgJ1wiLmNvbmNhdCh0aGlzLmlkLCBcIicuXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5pdGlhbFN0YXRlKGluaXRpYWxTdGF0ZVZhbHVlKTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0YXRlTm9kZS5wcm90b3R5cGUsIFwidGFyZ2V0XCIsIHtcbiAgICAvKipcclxuICAgICAqIFRoZSB0YXJnZXQgc3RhdGUgdmFsdWUgb2YgdGhlIGhpc3Rvcnkgc3RhdGUgbm9kZSwgaWYgaXQgZXhpc3RzLiBUaGlzIHJlcHJlc2VudHMgdGhlXHJcbiAgICAgKiBkZWZhdWx0IHN0YXRlIHZhbHVlIHRvIHRyYW5zaXRpb24gdG8gaWYgbm8gaGlzdG9yeSB2YWx1ZSBleGlzdHMgeWV0LlxyXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGFyZ2V0O1xuXG4gICAgICBpZiAodGhpcy50eXBlID09PSAnaGlzdG9yeScpIHtcbiAgICAgICAgdmFyIGhpc3RvcnlDb25maWcgPSB0aGlzLmNvbmZpZztcblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoaGlzdG9yeUNvbmZpZy50YXJnZXQpKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gaXNTdGF0ZUlkKGhpc3RvcnlDb25maWcudGFyZ2V0KSA/IHV0aWxzLnBhdGhUb1N0YXRlVmFsdWUodGhpcy5tYWNoaW5lLmdldFN0YXRlTm9kZUJ5SWQoaGlzdG9yeUNvbmZpZy50YXJnZXQpLnBhdGguc2xpY2UodGhpcy5wYXRoLmxlbmd0aCAtIDEpKSA6IGhpc3RvcnlDb25maWcudGFyZ2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldCA9IGhpc3RvcnlDb25maWcudGFyZ2V0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGxlYWYgbm9kZXMgZnJvbSBhIHN0YXRlIHBhdGggcmVsYXRpdmUgdG8gdGhpcyBzdGF0ZSBub2RlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHJlbGF0aXZlU3RhdGVJZCBUaGUgcmVsYXRpdmUgc3RhdGUgcGF0aCB0byByZXRyaWV2ZSB0aGUgc3RhdGUgbm9kZXNcclxuICAgKiBAcGFyYW0gaGlzdG9yeSBUaGUgcHJldmlvdXMgc3RhdGUgdG8gcmV0cmlldmUgaGlzdG9yeVxyXG4gICAqIEBwYXJhbSByZXNvbHZlIFdoZXRoZXIgc3RhdGUgbm9kZXMgc2hvdWxkIHJlc29sdmUgdG8gaW5pdGlhbCBjaGlsZCBzdGF0ZSBub2Rlc1xyXG4gICAqL1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUuZ2V0UmVsYXRpdmVTdGF0ZU5vZGVzID0gZnVuY3Rpb24gKHJlbGF0aXZlU3RhdGVJZCwgaGlzdG9yeVZhbHVlLCByZXNvbHZlKSB7XG4gICAgaWYgKHJlc29sdmUgPT09IHZvaWQgMCkge1xuICAgICAgcmVzb2x2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc29sdmUgPyByZWxhdGl2ZVN0YXRlSWQudHlwZSA9PT0gJ2hpc3RvcnknID8gcmVsYXRpdmVTdGF0ZUlkLnJlc29sdmVIaXN0b3J5KGhpc3RvcnlWYWx1ZSkgOiByZWxhdGl2ZVN0YXRlSWQuaW5pdGlhbFN0YXRlTm9kZXMgOiBbcmVsYXRpdmVTdGF0ZUlkXTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVOb2RlLnByb3RvdHlwZSwgXCJpbml0aWFsU3RhdGVOb2Rlc1wiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoc3RhdGVVdGlscy5pc0xlYWZOb2RlKHRoaXMpKSB7XG4gICAgICAgIHJldHVybiBbdGhpc107XG4gICAgICB9IC8vIENhc2Ugd2hlbiBzdGF0ZSBub2RlIGlzIGNvbXBvdW5kIGJ1dCBubyBpbml0aWFsIHN0YXRlIGlzIGRlZmluZWRcblxuXG4gICAgICBpZiAodGhpcy50eXBlID09PSAnY29tcG91bmQnICYmICF0aGlzLmluaXRpYWwpIHtcbiAgICAgICAgaWYgKCFlbnZpcm9ubWVudC5JU19QUk9EVUNUSU9OKSB7XG4gICAgICAgICAgdXRpbHMud2FybihmYWxzZSwgXCJDb21wb3VuZCBzdGF0ZSBub2RlICdcIi5jb25jYXQodGhpcy5pZCwgXCInIGhhcyBubyBpbml0aWFsIHN0YXRlLlwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW3RoaXNdO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5pdGlhbFN0YXRlTm9kZVBhdGhzID0gdXRpbHMudG9TdGF0ZVBhdGhzKHRoaXMuaW5pdGlhbFN0YXRlVmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLmZsYXR0ZW4oaW5pdGlhbFN0YXRlTm9kZVBhdGhzLm1hcChmdW5jdGlvbiAoaW5pdGlhbFBhdGgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmdldEZyb21SZWxhdGl2ZVBhdGgoaW5pdGlhbFBhdGgpO1xuICAgICAgfSkpO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICAvKipcclxuICAgKiBSZXRyaWV2ZXMgc3RhdGUgbm9kZXMgZnJvbSBhIHJlbGF0aXZlIHBhdGggdG8gdGhpcyBzdGF0ZSBub2RlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHJlbGF0aXZlUGF0aCBUaGUgcmVsYXRpdmUgcGF0aCBmcm9tIHRoaXMgc3RhdGUgbm9kZVxyXG4gICAqIEBwYXJhbSBoaXN0b3J5VmFsdWVcclxuICAgKi9cblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLmdldEZyb21SZWxhdGl2ZVBhdGggPSBmdW5jdGlvbiAocmVsYXRpdmVQYXRoKSB7XG4gICAgaWYgKCFyZWxhdGl2ZVBhdGgubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW3RoaXNdO1xuICAgIH1cblxuICAgIHZhciBfYSA9IF90c2xpYi5fX3JlYWQocmVsYXRpdmVQYXRoKSxcbiAgICAgICAgc3RhdGVLZXkgPSBfYVswXSxcbiAgICAgICAgY2hpbGRTdGF0ZVBhdGggPSBfYS5zbGljZSgxKTtcblxuICAgIGlmICghdGhpcy5zdGF0ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXRyaWV2ZSBzdWJQYXRoICdcIi5jb25jYXQoc3RhdGVLZXksIFwiJyBmcm9tIG5vZGUgd2l0aCBubyBzdGF0ZXNcIikpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZFN0YXRlTm9kZSA9IHRoaXMuZ2V0U3RhdGVOb2RlKHN0YXRlS2V5KTtcblxuICAgIGlmIChjaGlsZFN0YXRlTm9kZS50eXBlID09PSAnaGlzdG9yeScpIHtcbiAgICAgIHJldHVybiBjaGlsZFN0YXRlTm9kZS5yZXNvbHZlSGlzdG9yeSgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zdGF0ZXNbc3RhdGVLZXldKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGlsZCBzdGF0ZSAnXCIuY29uY2F0KHN0YXRlS2V5LCBcIicgZG9lcyBub3QgZXhpc3Qgb24gJ1wiKS5jb25jYXQodGhpcy5pZCwgXCInXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGF0ZXNbc3RhdGVLZXldLmdldEZyb21SZWxhdGl2ZVBhdGgoY2hpbGRTdGF0ZVBhdGgpO1xuICB9O1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUuaGlzdG9yeVZhbHVlID0gZnVuY3Rpb24gKHJlbGF0aXZlU3RhdGVWYWx1ZSkge1xuICAgIGlmICghT2JqZWN0LmtleXModGhpcy5zdGF0ZXMpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudDogcmVsYXRpdmVTdGF0ZVZhbHVlIHx8IHRoaXMuaW5pdGlhbFN0YXRlVmFsdWUsXG4gICAgICBzdGF0ZXM6IHV0aWxzLm1hcEZpbHRlclZhbHVlcyh0aGlzLnN0YXRlcywgZnVuY3Rpb24gKHN0YXRlTm9kZSwga2V5KSB7XG4gICAgICAgIGlmICghcmVsYXRpdmVTdGF0ZVZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlTm9kZS5oaXN0b3J5VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWJTdGF0ZVZhbHVlID0gdXRpbHMuaXNTdHJpbmcocmVsYXRpdmVTdGF0ZVZhbHVlKSA/IHVuZGVmaW5lZCA6IHJlbGF0aXZlU3RhdGVWYWx1ZVtrZXldO1xuICAgICAgICByZXR1cm4gc3RhdGVOb2RlLmhpc3RvcnlWYWx1ZShzdWJTdGF0ZVZhbHVlIHx8IHN0YXRlTm9kZS5pbml0aWFsU3RhdGVWYWx1ZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoc3RhdGVOb2RlKSB7XG4gICAgICAgIHJldHVybiAhc3RhdGVOb2RlLmhpc3Rvcnk7XG4gICAgICB9KVxuICAgIH07XG4gIH07XG4gIC8qKlxyXG4gICAqIFJlc29sdmVzIHRvIHRoZSBoaXN0b3JpY2FsIHZhbHVlKHMpIG9mIHRoZSBwYXJlbnQgc3RhdGUgbm9kZSxcclxuICAgKiByZXByZXNlbnRlZCBieSBzdGF0ZSBub2Rlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBoaXN0b3J5VmFsdWVcclxuICAgKi9cblxuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUucmVzb2x2ZUhpc3RvcnkgPSBmdW5jdGlvbiAoaGlzdG9yeVZhbHVlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnR5cGUgIT09ICdoaXN0b3J5Jykge1xuICAgICAgcmV0dXJuIFt0aGlzXTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cbiAgICBpZiAoIWhpc3RvcnlWYWx1ZSkge1xuICAgICAgdmFyIGhpc3RvcnlUYXJnZXQgPSB0aGlzLnRhcmdldDtcbiAgICAgIHJldHVybiBoaXN0b3J5VGFyZ2V0ID8gdXRpbHMuZmxhdHRlbih1dGlscy50b1N0YXRlUGF0aHMoaGlzdG9yeVRhcmdldCkubWFwKGZ1bmN0aW9uIChyZWxhdGl2ZUNoaWxkUGF0aCkge1xuICAgICAgICByZXR1cm4gcGFyZW50LmdldEZyb21SZWxhdGl2ZVBhdGgocmVsYXRpdmVDaGlsZFBhdGgpO1xuICAgICAgfSkpIDogcGFyZW50LmluaXRpYWxTdGF0ZU5vZGVzO1xuICAgIH1cblxuICAgIHZhciBzdWJIaXN0b3J5VmFsdWUgPSB1dGlscy5uZXN0ZWRQYXRoKHBhcmVudC5wYXRoLCAnc3RhdGVzJykoaGlzdG9yeVZhbHVlKS5jdXJyZW50O1xuXG4gICAgaWYgKHV0aWxzLmlzU3RyaW5nKHN1Ykhpc3RvcnlWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBbcGFyZW50LmdldFN0YXRlTm9kZShzdWJIaXN0b3J5VmFsdWUpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuZmxhdHRlbih1dGlscy50b1N0YXRlUGF0aHMoc3ViSGlzdG9yeVZhbHVlKS5tYXAoZnVuY3Rpb24gKHN1YlN0YXRlUGF0aCkge1xuICAgICAgcmV0dXJuIF90aGlzLmhpc3RvcnkgPT09ICdkZWVwJyA/IHBhcmVudC5nZXRGcm9tUmVsYXRpdmVQYXRoKHN1YlN0YXRlUGF0aCkgOiBbcGFyZW50LnN0YXRlc1tzdWJTdGF0ZVBhdGhbMF1dXTtcbiAgICB9KSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0YXRlTm9kZS5wcm90b3R5cGUsIFwic3RhdGVJZHNcIiwge1xuICAgIC8qKlxyXG4gICAgICogQWxsIHRoZSBzdGF0ZSBub2RlIElEcyBvZiB0aGlzIHN0YXRlIG5vZGUgYW5kIGl0cyBkZXNjZW5kYW50IHN0YXRlIG5vZGVzLlxyXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgY2hpbGRTdGF0ZUlkcyA9IHV0aWxzLmZsYXR0ZW4oT2JqZWN0LmtleXModGhpcy5zdGF0ZXMpLm1hcChmdW5jdGlvbiAoc3RhdGVLZXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnN0YXRlc1tzdGF0ZUtleV0uc3RhdGVJZHM7XG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gW3RoaXMuaWRdLmNvbmNhdChjaGlsZFN0YXRlSWRzKTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0YXRlTm9kZS5wcm90b3R5cGUsIFwiZXZlbnRzXCIsIHtcbiAgICAvKipcclxuICAgICAqIEFsbCB0aGUgZXZlbnQgdHlwZXMgYWNjZXB0ZWQgYnkgdGhpcyBzdGF0ZSBub2RlIGFuZCBpdHMgZGVzY2VuZGFudHMuXHJcbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlXzcsIF9hLCBlXzgsIF9iO1xuXG4gICAgICBpZiAodGhpcy5fX2NhY2hlLmV2ZW50cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2NhY2hlLmV2ZW50cztcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXRlcyA9IHRoaXMuc3RhdGVzO1xuICAgICAgdmFyIGV2ZW50cyA9IG5ldyBTZXQodGhpcy5vd25FdmVudHMpO1xuXG4gICAgICBpZiAoc3RhdGVzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgX2MgPSBfdHNsaWIuX192YWx1ZXMoT2JqZWN0LmtleXMoc3RhdGVzKSksIF9kID0gX2MubmV4dCgpOyAhX2QuZG9uZTsgX2QgPSBfYy5uZXh0KCkpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZUlkID0gX2QudmFsdWU7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZXNbc3RhdGVJZF07XG5cbiAgICAgICAgICAgIGlmIChzdGF0ZS5zdGF0ZXMpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IChlXzggPSB2b2lkIDAsIF90c2xpYi5fX3ZhbHVlcyhzdGF0ZS5ldmVudHMpKSwgX2YgPSBfZS5uZXh0KCk7ICFfZi5kb25lOyBfZiA9IF9lLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50XzEgPSBfZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgIGV2ZW50cy5hZGQoXCJcIi5jb25jYXQoZXZlbnRfMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZV84XzEpIHtcbiAgICAgICAgICAgICAgICBlXzggPSB7XG4gICAgICAgICAgICAgICAgICBlcnJvcjogZV84XzFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBpZiAoX2YgJiYgIV9mLmRvbmUgJiYgKF9iID0gX2UucmV0dXJuKSkgX2IuY2FsbChfZSk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlXzgpIHRocm93IGVfOC5lcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVfN18xKSB7XG4gICAgICAgICAgZV83ID0ge1xuICAgICAgICAgICAgZXJyb3I6IGVfN18xXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYSA9IF9jLnJldHVybikpIF9hLmNhbGwoX2MpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZV83KSB0aHJvdyBlXzcuZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9fY2FjaGUuZXZlbnRzID0gQXJyYXkuZnJvbShldmVudHMpO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVOb2RlLnByb3RvdHlwZSwgXCJvd25FdmVudHNcIiwge1xuICAgIC8qKlxyXG4gICAgICogQWxsIHRoZSBldmVudHMgdGhhdCBoYXZlIHRyYW5zaXRpb25zIGRpcmVjdGx5IGZyb20gdGhpcyBzdGF0ZSBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEV4Y2x1ZGVzIGFueSBpbmVydCBldmVudHMuXHJcbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBldmVudHMgPSBuZXcgU2V0KHRoaXMudHJhbnNpdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiAhKCF0cmFuc2l0aW9uLnRhcmdldCAmJiAhdHJhbnNpdGlvbi5hY3Rpb25zLmxlbmd0aCAmJiB0cmFuc2l0aW9uLmludGVybmFsKTtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAodHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gdHJhbnNpdGlvbi5ldmVudFR5cGU7XG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShldmVudHMpO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuXG4gIFN0YXRlTm9kZS5wcm90b3R5cGUucmVzb2x2ZVRhcmdldCA9IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFuIHVuZGVmaW5lZCB0YXJnZXQgc2lnbmFscyB0aGF0IHRoZSBzdGF0ZSBub2RlIHNob3VsZCBub3QgdHJhbnNpdGlvbiBmcm9tIHRoYXQgc3RhdGUgd2hlbiByZWNlaXZpbmcgdGhhdCBldmVudFxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RhcmdldC5tYXAoZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgaWYgKCF1dGlscy5pc1N0cmluZyh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0ludGVybmFsVGFyZ2V0ID0gdGFyZ2V0WzBdID09PSBfdGhpcy5kZWxpbWl0ZXI7IC8vIElmIGludGVybmFsIHRhcmdldCBpcyBkZWZpbmVkIG9uIG1hY2hpbmUsXG4gICAgICAvLyBkbyBub3QgaW5jbHVkZSBtYWNoaW5lIGtleSBvbiB0YXJnZXRcblxuICAgICAgaWYgKGlzSW50ZXJuYWxUYXJnZXQgJiYgIV90aGlzLnBhcmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2V0U3RhdGVOb2RlQnlQYXRoKHRhcmdldC5zbGljZSgxKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXNvbHZlZFRhcmdldCA9IGlzSW50ZXJuYWxUYXJnZXQgPyBfdGhpcy5rZXkgKyB0YXJnZXQgOiB0YXJnZXQ7XG5cbiAgICAgIGlmIChfdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgdGFyZ2V0U3RhdGVOb2RlID0gX3RoaXMucGFyZW50LmdldFN0YXRlTm9kZUJ5UGF0aChyZXNvbHZlZFRhcmdldCk7XG5cbiAgICAgICAgICByZXR1cm4gdGFyZ2V0U3RhdGVOb2RlO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRyYW5zaXRpb24gZGVmaW5pdGlvbiBmb3Igc3RhdGUgbm9kZSAnXCIuY29uY2F0KF90aGlzLmlkLCBcIic6XFxuXCIpLmNvbmNhdChlcnIubWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2V0U3RhdGVOb2RlQnlQYXRoKHJlc29sdmVkVGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBTdGF0ZU5vZGUucHJvdG90eXBlLmZvcm1hdFRyYW5zaXRpb24gPSBmdW5jdGlvbiAodHJhbnNpdGlvbkNvbmZpZykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgbm9ybWFsaXplZFRhcmdldCA9IHV0aWxzLm5vcm1hbGl6ZVRhcmdldCh0cmFuc2l0aW9uQ29uZmlnLnRhcmdldCk7XG4gICAgdmFyIGludGVybmFsID0gJ2ludGVybmFsJyBpbiB0cmFuc2l0aW9uQ29uZmlnID8gdHJhbnNpdGlvbkNvbmZpZy5pbnRlcm5hbCA6IG5vcm1hbGl6ZWRUYXJnZXQgPyBub3JtYWxpemVkVGFyZ2V0LnNvbWUoZnVuY3Rpb24gKF90YXJnZXQpIHtcbiAgICAgIHJldHVybiB1dGlscy5pc1N0cmluZyhfdGFyZ2V0KSAmJiBfdGFyZ2V0WzBdID09PSBfdGhpcy5kZWxpbWl0ZXI7XG4gICAgfSkgOiB0cnVlO1xuICAgIHZhciBndWFyZHMgPSB0aGlzLm1hY2hpbmUub3B0aW9ucy5ndWFyZHM7XG4gICAgdmFyIHRhcmdldCA9IHRoaXMucmVzb2x2ZVRhcmdldChub3JtYWxpemVkVGFyZ2V0KTtcblxuICAgIHZhciB0cmFuc2l0aW9uID0gX3RzbGliLl9fYXNzaWduKF90c2xpYi5fX2Fzc2lnbih7fSwgdHJhbnNpdGlvbkNvbmZpZyksIHtcbiAgICAgIGFjdGlvbnM6IGFjdGlvbnMudG9BY3Rpb25PYmplY3RzKHV0aWxzLnRvQXJyYXkodHJhbnNpdGlvbkNvbmZpZy5hY3Rpb25zKSksXG4gICAgICBjb25kOiB1dGlscy50b0d1YXJkKHRyYW5zaXRpb25Db25maWcuY29uZCwgZ3VhcmRzKSxcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgaW50ZXJuYWw6IGludGVybmFsLFxuICAgICAgZXZlbnRUeXBlOiB0cmFuc2l0aW9uQ29uZmlnLmV2ZW50LFxuICAgICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdHNsaWIuX19hc3NpZ24oX3RzbGliLl9fYXNzaWduKHt9LCB0cmFuc2l0aW9uKSwge1xuICAgICAgICAgIHRhcmdldDogdHJhbnNpdGlvbi50YXJnZXQgPyB0cmFuc2l0aW9uLnRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIiNcIi5jb25jYXQodC5pZCk7XG4gICAgICAgICAgfSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgc291cmNlOiBcIiNcIi5jb25jYXQoX3RoaXMuaWQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyYW5zaXRpb247XG4gIH07XG5cbiAgU3RhdGVOb2RlLnByb3RvdHlwZS5mb3JtYXRUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZV85LCBfYTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb25Db25maWc7XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLm9uKSB7XG4gICAgICBvbkNvbmZpZyA9IFtdO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmNvbmZpZy5vbikpIHtcbiAgICAgIG9uQ29uZmlnID0gdGhpcy5jb25maWcub247XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfYiA9IHRoaXMuY29uZmlnLm9uLFxuICAgICAgICAgIF9jID0gV0lMRENBUkQsXG4gICAgICAgICAgX2QgPSBfYltfY10sXG4gICAgICAgICAgd2lsZGNhcmRDb25maWdzID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsXG4gICAgICAgICAgc3RyaWN0VHJhbnNpdGlvbkNvbmZpZ3NfMSA9IF90c2xpYi5fX3Jlc3QoX2IsIFt0eXBlb2YgX2MgPT09IFwic3ltYm9sXCIgPyBfYyA6IF9jICsgXCJcIl0pO1xuXG4gICAgICBvbkNvbmZpZyA9IHV0aWxzLmZsYXR0ZW4oT2JqZWN0LmtleXMoc3RyaWN0VHJhbnNpdGlvbkNvbmZpZ3NfMSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFlbnZpcm9ubWVudC5JU19QUk9EVUNUSU9OICYmIGtleSA9PT0gTlVMTF9FVkVOVCkge1xuICAgICAgICAgIHV0aWxzLndhcm4oZmFsc2UsIFwiRW1wdHkgc3RyaW5nIHRyYW5zaXRpb24gY29uZmlncyAoZS5nLiwgYHsgb246IHsgJyc6IC4uLiB9fWApIGZvciB0cmFuc2llbnQgdHJhbnNpdGlvbnMgYXJlIGRlcHJlY2F0ZWQuIFNwZWNpZnkgdGhlIHRyYW5zaXRpb24gaW4gdGhlIGB7IGFsd2F5czogLi4uIH1gIHByb3BlcnR5IGluc3RlYWQuIFwiICsgXCJQbGVhc2UgY2hlY2sgdGhlIGBvbmAgY29uZmlndXJhdGlvbiBmb3IgXFxcIiNcIi5jb25jYXQoX3RoaXMuaWQsIFwiXFxcIi5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zaXRpb25Db25maWdBcnJheSA9IHV0aWxzLnRvVHJhbnNpdGlvbkNvbmZpZ0FycmF5KGtleSwgc3RyaWN0VHJhbnNpdGlvbkNvbmZpZ3NfMVtrZXldKTtcblxuICAgICAgICBpZiAoIWVudmlyb25tZW50LklTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICB2YWxpZGF0ZUFycmF5aWZpZWRUcmFuc2l0aW9ucyhfdGhpcywga2V5LCB0cmFuc2l0aW9uQ29uZmlnQXJyYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25Db25maWdBcnJheTtcbiAgICAgIH0pLmNvbmNhdCh1dGlscy50b1RyYW5zaXRpb25Db25maWdBcnJheShXSUxEQ0FSRCwgd2lsZGNhcmRDb25maWdzKSkpO1xuICAgIH1cblxuICAgIHZhciBldmVudGxlc3NDb25maWcgPSB0aGlzLmNvbmZpZy5hbHdheXMgPyB1dGlscy50b1RyYW5zaXRpb25Db25maWdBcnJheSgnJywgdGhpcy5jb25maWcuYWx3YXlzKSA6IFtdO1xuICAgIHZhciBkb25lQ29uZmlnID0gdGhpcy5jb25maWcub25Eb25lID8gdXRpbHMudG9UcmFuc2l0aW9uQ29uZmlnQXJyYXkoU3RyaW5nKGFjdGlvbnMuZG9uZSh0aGlzLmlkKSksIHRoaXMuY29uZmlnLm9uRG9uZSkgOiBbXTtcblxuICAgIGlmICghZW52aXJvbm1lbnQuSVNfUFJPRFVDVElPTikge1xuICAgICAgdXRpbHMud2FybighKHRoaXMuY29uZmlnLm9uRG9uZSAmJiAhdGhpcy5wYXJlbnQpLCBcIlJvb3Qgbm9kZXMgY2Fubm90IGhhdmUgYW4gXFxcIi5vbkRvbmVcXFwiIHRyYW5zaXRpb24uIFBsZWFzZSBjaGVjayB0aGUgY29uZmlnIG9mIFxcXCJcIi5jb25jYXQodGhpcy5pZCwgXCJcXFwiLlwiKSk7XG4gICAgfVxuXG4gICAgdmFyIGludm9rZUNvbmZpZyA9IHV0aWxzLmZsYXR0ZW4odGhpcy5pbnZva2UubWFwKGZ1bmN0aW9uIChpbnZva2VEZWYpIHtcbiAgICAgIHZhciBzZXR0bGVUcmFuc2l0aW9ucyA9IFtdO1xuXG4gICAgICBpZiAoaW52b2tlRGVmLm9uRG9uZSkge1xuICAgICAgICBzZXR0bGVUcmFuc2l0aW9ucy5wdXNoLmFwcGx5KHNldHRsZVRyYW5zaXRpb25zLCBfdHNsaWIuX19zcHJlYWRBcnJheShbXSwgX3RzbGliLl9fcmVhZCh1dGlscy50b1RyYW5zaXRpb25Db25maWdBcnJheShTdHJpbmcoYWN0aW9ucy5kb25lSW52b2tlKGludm9rZURlZi5pZCkpLCBpbnZva2VEZWYub25Eb25lKSksIGZhbHNlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnZva2VEZWYub25FcnJvcikge1xuICAgICAgICBzZXR0bGVUcmFuc2l0aW9ucy5wdXNoLmFwcGx5KHNldHRsZVRyYW5zaXRpb25zLCBfdHNsaWIuX19zcHJlYWRBcnJheShbXSwgX3RzbGliLl9fcmVhZCh1dGlscy50b1RyYW5zaXRpb25Db25maWdBcnJheShTdHJpbmcoYWN0aW9ucy5lcnJvcihpbnZva2VEZWYuaWQpKSwgaW52b2tlRGVmLm9uRXJyb3IpKSwgZmFsc2UpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldHRsZVRyYW5zaXRpb25zO1xuICAgIH0pKTtcbiAgICB2YXIgZGVsYXllZFRyYW5zaXRpb25zID0gdGhpcy5hZnRlcjtcbiAgICB2YXIgZm9ybWF0dGVkVHJhbnNpdGlvbnMgPSB1dGlscy5mbGF0dGVuKF90c2xpYi5fX3NwcmVhZEFycmF5KF90c2xpYi5fX3NwcmVhZEFycmF5KF90c2xpYi5fX3NwcmVhZEFycmF5KF90c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBfdHNsaWIuX19yZWFkKGRvbmVDb25maWcpLCBmYWxzZSksIF90c2xpYi5fX3JlYWQoaW52b2tlQ29uZmlnKSwgZmFsc2UpLCBfdHNsaWIuX19yZWFkKG9uQ29uZmlnKSwgZmFsc2UpLCBfdHNsaWIuX19yZWFkKGV2ZW50bGVzc0NvbmZpZyksIGZhbHNlKS5tYXAoZnVuY3Rpb24gKHRyYW5zaXRpb25Db25maWcpIHtcbiAgICAgIHJldHVybiB1dGlscy50b0FycmF5KHRyYW5zaXRpb25Db25maWcpLm1hcChmdW5jdGlvbiAodHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gX3RoaXMuZm9ybWF0VHJhbnNpdGlvbih0cmFuc2l0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pKTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBkZWxheWVkVHJhbnNpdGlvbnNfMSA9IF90c2xpYi5fX3ZhbHVlcyhkZWxheWVkVHJhbnNpdGlvbnMpLCBkZWxheWVkVHJhbnNpdGlvbnNfMV8xID0gZGVsYXllZFRyYW5zaXRpb25zXzEubmV4dCgpOyAhZGVsYXllZFRyYW5zaXRpb25zXzFfMS5kb25lOyBkZWxheWVkVHJhbnNpdGlvbnNfMV8xID0gZGVsYXllZFRyYW5zaXRpb25zXzEubmV4dCgpKSB7XG4gICAgICAgIHZhciBkZWxheWVkVHJhbnNpdGlvbiA9IGRlbGF5ZWRUcmFuc2l0aW9uc18xXzEudmFsdWU7XG4gICAgICAgIGZvcm1hdHRlZFRyYW5zaXRpb25zLnB1c2goZGVsYXllZFRyYW5zaXRpb24pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfOV8xKSB7XG4gICAgICBlXzkgPSB7XG4gICAgICAgIGVycm9yOiBlXzlfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGRlbGF5ZWRUcmFuc2l0aW9uc18xXzEgJiYgIWRlbGF5ZWRUcmFuc2l0aW9uc18xXzEuZG9uZSAmJiAoX2EgPSBkZWxheWVkVHJhbnNpdGlvbnNfMS5yZXR1cm4pKSBfYS5jYWxsKGRlbGF5ZWRUcmFuc2l0aW9uc18xKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlXzkpIHRocm93IGVfOS5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0dGVkVHJhbnNpdGlvbnM7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRlTm9kZTtcbn0oKTtcblxuZXhwb3J0cy5TdGF0ZU5vZGUgPSBTdGF0ZU5vZGU7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgU3RhdGVOb2RlID0gcmVxdWlyZSgnLi9TdGF0ZU5vZGUuanMnKTtcbnZhciBlbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vZW52aXJvbm1lbnQuanMnKTtcblxudmFyIHdhcm5lZCA9IGZhbHNlO1xuZnVuY3Rpb24gTWFjaGluZShjb25maWcsIG9wdGlvbnMsIGluaXRpYWxDb250ZXh0KSB7XG4gIGlmIChpbml0aWFsQ29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdGlhbENvbnRleHQgPSBjb25maWcuY29udGV4dDtcbiAgfVxuXG4gIHJldHVybiBuZXcgU3RhdGVOb2RlLlN0YXRlTm9kZShjb25maWcsIG9wdGlvbnMsIGluaXRpYWxDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1hY2hpbmUoY29uZmlnLCBvcHRpb25zKSB7XG4gIGlmICghZW52aXJvbm1lbnQuSVNfUFJPRFVDVElPTiAmJiAhY29uZmlnLnByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzICYmICF3YXJuZWQpIHtcbiAgICB3YXJuZWQgPSB0cnVlO1xuICAgIGNvbnNvbGUud2FybignSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIHNldCBgcHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHNgIHRvIGB0cnVlYCB3aGVuIHVzaW5nIGBjcmVhdGVNYWNoaW5lYC4gaHR0cHM6Ly94c3RhdGUuanMub3JnL2RvY3MvZ3VpZGVzL2FjdGlvbnMuaHRtbCcpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTdGF0ZU5vZGUuU3RhdGVOb2RlKGNvbmZpZywgb3B0aW9ucyk7XG59XG5cbmV4cG9ydHMuTWFjaGluZSA9IE1hY2hpbmU7XG5leHBvcnRzLmNyZWF0ZU1hY2hpbmUgPSBjcmVhdGVNYWNoaW5lO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIF90c2xpYiA9IHJlcXVpcmUoJy4vX3ZpcnR1YWwvX3RzbGliLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlKHN0YXRlTWFwLCBzdGF0ZUlkKSB7XG4gIHZhciBlXzEsIF9hO1xuXG4gIHZhciBmb3VuZFN0YXRlSWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfYiA9IF90c2xpYi5fX3ZhbHVlcyhPYmplY3Qua2V5cyhzdGF0ZU1hcCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICB2YXIgbWFwcGVkU3RhdGVJZCA9IF9jLnZhbHVlO1xuXG4gICAgICBpZiAodXRpbHMubWF0Y2hlc1N0YXRlKG1hcHBlZFN0YXRlSWQsIHN0YXRlSWQpICYmICghZm91bmRTdGF0ZUlkIHx8IHN0YXRlSWQubGVuZ3RoID4gZm91bmRTdGF0ZUlkLmxlbmd0aCkpIHtcbiAgICAgICAgZm91bmRTdGF0ZUlkID0gbWFwcGVkU3RhdGVJZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVfMV8xKSB7XG4gICAgZV8xID0ge1xuICAgICAgZXJyb3I6IGVfMV8xXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXRlTWFwW2ZvdW5kU3RhdGVJZF07XG59XG5cbmV4cG9ydHMubWFwU3RhdGUgPSBtYXBTdGF0ZTtcbiIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBfdHNsaWIgPSByZXF1aXJlKCcuL192aXJ0dWFsL190c2xpYi5qcycpO1xudmFyIFN0YXRlID0gcmVxdWlyZSgnLi9TdGF0ZS5qcycpO1xuXG5mdW5jdGlvbiBtYXRjaFN0YXRlKHN0YXRlLCBwYXR0ZXJucywgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBlXzEsIF9hO1xuXG4gIHZhciByZXNvbHZlZFN0YXRlID0gU3RhdGUuU3RhdGUuZnJvbShzdGF0ZSwgc3RhdGUgaW5zdGFuY2VvZiBTdGF0ZS5TdGF0ZSA/IHN0YXRlLmNvbnRleHQgOiB1bmRlZmluZWQpO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgcGF0dGVybnNfMSA9IF90c2xpYi5fX3ZhbHVlcyhwYXR0ZXJucyksIHBhdHRlcm5zXzFfMSA9IHBhdHRlcm5zXzEubmV4dCgpOyAhcGF0dGVybnNfMV8xLmRvbmU7IHBhdHRlcm5zXzFfMSA9IHBhdHRlcm5zXzEubmV4dCgpKSB7XG4gICAgICB2YXIgX2IgPSBfdHNsaWIuX19yZWFkKHBhdHRlcm5zXzFfMS52YWx1ZSwgMiksXG4gICAgICAgICAgc3RhdGVWYWx1ZSA9IF9iWzBdLFxuICAgICAgICAgIGdldFZhbHVlID0gX2JbMV07XG5cbiAgICAgIGlmIChyZXNvbHZlZFN0YXRlLm1hdGNoZXMoc3RhdGVWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGdldFZhbHVlKHJlc29sdmVkU3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZV8xXzEpIHtcbiAgICBlXzEgPSB7XG4gICAgICBlcnJvcjogZV8xXzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAocGF0dGVybnNfMV8xICYmICFwYXR0ZXJuc18xXzEuZG9uZSAmJiAoX2EgPSBwYXR0ZXJuc18xLnJldHVybikpIF9hLmNhbGwocGF0dGVybnNfMSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdFZhbHVlKHJlc29sdmVkU3RhdGUpO1xufVxuXG5leHBvcnRzLm1hdGNoU3RhdGUgPSBtYXRjaFN0YXRlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gY3JlYXRlU2NoZW1hKHNjaGVtYSkge1xuICByZXR1cm4gc2NoZW1hO1xufVxudmFyIHQgPSBjcmVhdGVTY2hlbWE7XG5cbmV4cG9ydHMuY3JlYXRlU2NoZW1hID0gY3JlYXRlU2NoZW1hO1xuZXhwb3J0cy50ID0gdDtcbiIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBhY3Rpb25zID0gcmVxdWlyZSgnLi9hY3Rpb25zLmpzJyk7XG52YXIgQWN0b3IgPSByZXF1aXJlKCcuL0FjdG9yLmpzJyk7XG52YXIgaW50ZXJwcmV0ZXIgPSByZXF1aXJlKCcuL2ludGVycHJldGVyLmpzJyk7XG52YXIgTWFjaGluZSA9IHJlcXVpcmUoJy4vTWFjaGluZS5qcycpO1xudmFyIG1hcFN0YXRlID0gcmVxdWlyZSgnLi9tYXBTdGF0ZS5qcycpO1xudmFyIG1hdGNoID0gcmVxdWlyZSgnLi9tYXRjaC5qcycpO1xudmFyIHNjaGVtYSA9IHJlcXVpcmUoJy4vc2NoZW1hLmpzJyk7XG52YXIgU3RhdGUgPSByZXF1aXJlKCcuL1N0YXRlLmpzJyk7XG52YXIgU3RhdGVOb2RlID0gcmVxdWlyZSgnLi9TdGF0ZU5vZGUuanMnKTtcbnZhciBiZWhhdmlvcnMgPSByZXF1aXJlKCcuL2JlaGF2aW9ycy5qcycpO1xudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcy5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5qcycpO1xuXG52YXIgYXNzaWduID0gYWN0aW9ucy5hc3NpZ24sXG4gICAgc2VuZCA9IGFjdGlvbnMuc2VuZCxcbiAgICBzZW5kUGFyZW50ID0gYWN0aW9ucy5zZW5kUGFyZW50LFxuICAgIHNlbmRVcGRhdGUgPSBhY3Rpb25zLnNlbmRVcGRhdGUsXG4gICAgZm9yd2FyZFRvID0gYWN0aW9ucy5mb3J3YXJkVG8sXG4gICAgZG9uZUludm9rZSA9IGFjdGlvbnMuZG9uZUludm9rZTtcblxuZXhwb3J0cy5hY3Rpb25zID0gYWN0aW9ucztcbmV4cG9ydHMudG9BY3RvclJlZiA9IEFjdG9yLnRvQWN0b3JSZWY7XG5leHBvcnRzLkludGVycHJldGVyID0gaW50ZXJwcmV0ZXIuSW50ZXJwcmV0ZXI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0ludGVycHJldGVyU3RhdHVzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVycHJldGVyLkludGVycHJldGVyU3RhdHVzOyB9XG59KTtcbmV4cG9ydHMuaW50ZXJwcmV0ID0gaW50ZXJwcmV0ZXIuaW50ZXJwcmV0O1xuZXhwb3J0cy5zcGF3biA9IGludGVycHJldGVyLnNwYXduO1xuZXhwb3J0cy5NYWNoaW5lID0gTWFjaGluZS5NYWNoaW5lO1xuZXhwb3J0cy5jcmVhdGVNYWNoaW5lID0gTWFjaGluZS5jcmVhdGVNYWNoaW5lO1xuZXhwb3J0cy5tYXBTdGF0ZSA9IG1hcFN0YXRlLm1hcFN0YXRlO1xuZXhwb3J0cy5tYXRjaFN0YXRlID0gbWF0Y2gubWF0Y2hTdGF0ZTtcbmV4cG9ydHMuY3JlYXRlU2NoZW1hID0gc2NoZW1hLmNyZWF0ZVNjaGVtYTtcbmV4cG9ydHMudCA9IHNjaGVtYS50O1xuZXhwb3J0cy5TdGF0ZSA9IFN0YXRlLlN0YXRlO1xuZXhwb3J0cy5TdGF0ZU5vZGUgPSBTdGF0ZU5vZGUuU3RhdGVOb2RlO1xuZXhwb3J0cy5zcGF3bkJlaGF2aW9yID0gYmVoYXZpb3JzLnNwYXduQmVoYXZpb3I7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0FjdGlvblR5cGVzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzLkFjdGlvblR5cGVzOyB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU3BlY2lhbFRhcmdldHMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXMuU3BlY2lhbFRhcmdldHM7IH1cbn0pO1xuZXhwb3J0cy5tYXRjaGVzU3RhdGUgPSB1dGlscy5tYXRjaGVzU3RhdGU7XG5leHBvcnRzLnRvRXZlbnRPYmplY3QgPSB1dGlscy50b0V2ZW50T2JqZWN0O1xuZXhwb3J0cy50b09ic2VydmVyID0gdXRpbHMudG9PYnNlcnZlcjtcbmV4cG9ydHMudG9TQ1hNTEV2ZW50ID0gdXRpbHMudG9TQ1hNTEV2ZW50O1xuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5leHBvcnRzLmRvbmVJbnZva2UgPSBkb25lSW52b2tlO1xuZXhwb3J0cy5mb3J3YXJkVG8gPSBmb3J3YXJkVG87XG5leHBvcnRzLnNlbmQgPSBzZW5kO1xuZXhwb3J0cy5zZW5kUGFyZW50ID0gc2VuZFBhcmVudDtcbmV4cG9ydHMuc2VuZFVwZGF0ZSA9IHNlbmRVcGRhdGU7XG4iLCBudWxsLCAiKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5uZWFybGV5ID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24oKSB7XG5cbiAgICBmdW5jdGlvbiBSdWxlKG5hbWUsIHN5bWJvbHMsIHBvc3Rwcm9jZXNzKSB7XG4gICAgICAgIHRoaXMuaWQgPSArK1J1bGUuaGlnaGVzdElkO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN5bWJvbHMgPSBzeW1ib2xzOyAgICAgICAgLy8gYSBsaXN0IG9mIGxpdGVyYWwgfCByZWdleCBjbGFzcyB8IG5vbnRlcm1pbmFsXG4gICAgICAgIHRoaXMucG9zdHByb2Nlc3MgPSBwb3N0cHJvY2VzcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIFJ1bGUuaGlnaGVzdElkID0gMDtcblxuICAgIFJ1bGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24od2l0aEN1cnNvckF0KSB7XG4gICAgICAgIHZhciBzeW1ib2xTZXF1ZW5jZSA9ICh0eXBlb2Ygd2l0aEN1cnNvckF0ID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc3ltYm9scy5tYXAoZ2V0U3ltYm9sU2hvcnREaXNwbGF5KS5qb2luKCcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoICAgdGhpcy5zeW1ib2xzLnNsaWNlKDAsIHdpdGhDdXJzb3JBdCkubWFwKGdldFN5bWJvbFNob3J0RGlzcGxheSkuam9pbignICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIFx1MjVDRiBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0aGlzLnN5bWJvbHMuc2xpY2Uod2l0aEN1cnNvckF0KS5tYXAoZ2V0U3ltYm9sU2hvcnREaXNwbGF5KS5qb2luKCcgJykgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIiBcdTIxOTIgXCIgKyBzeW1ib2xTZXF1ZW5jZTtcbiAgICB9XG5cblxuICAgIC8vIGEgU3RhdGUgaXMgYSBydWxlIGF0IGEgcG9zaXRpb24gZnJvbSBhIGdpdmVuIHN0YXJ0aW5nIHBvaW50IGluIHRoZSBpbnB1dCBzdHJlYW0gKHJlZmVyZW5jZSlcbiAgICBmdW5jdGlvbiBTdGF0ZShydWxlLCBkb3QsIHJlZmVyZW5jZSwgd2FudGVkQnkpIHtcbiAgICAgICAgdGhpcy5ydWxlID0gcnVsZTtcbiAgICAgICAgdGhpcy5kb3QgPSBkb3Q7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlO1xuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgICAgdGhpcy53YW50ZWRCeSA9IHdhbnRlZEJ5O1xuICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSB0aGlzLmRvdCA9PT0gcnVsZS5zeW1ib2xzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBTdGF0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwie1wiICsgdGhpcy5ydWxlLnRvU3RyaW5nKHRoaXMuZG90KSArIFwifSwgZnJvbTogXCIgKyAodGhpcy5yZWZlcmVuY2UgfHwgMCk7XG4gICAgfTtcblxuICAgIFN0YXRlLnByb3RvdHlwZS5uZXh0U3RhdGUgPSBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUodGhpcy5ydWxlLCB0aGlzLmRvdCArIDEsIHRoaXMucmVmZXJlbmNlLCB0aGlzLndhbnRlZEJ5KTtcbiAgICAgICAgc3RhdGUubGVmdCA9IHRoaXM7XG4gICAgICAgIHN0YXRlLnJpZ2h0ID0gY2hpbGQ7XG4gICAgICAgIGlmIChzdGF0ZS5pc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICBzdGF0ZS5kYXRhID0gc3RhdGUuYnVpbGQoKTtcbiAgICAgICAgICAgIC8vIEhhdmluZyByaWdodCBzZXQgaGVyZSB3aWxsIHByZXZlbnQgdGhlIHJpZ2h0IHN0YXRlIGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAgICAgIC8vIGZvcm0gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAgICAgICAgICAgIHN0YXRlLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9O1xuXG4gICAgU3RhdGUucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXM7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobm9kZS5yaWdodC5kYXRhKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XG4gICAgICAgIH0gd2hpbGUgKG5vZGUubGVmdCk7XG4gICAgICAgIGNoaWxkcmVuLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH07XG5cbiAgICBTdGF0ZS5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnJ1bGUucG9zdHByb2Nlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMucnVsZS5wb3N0cHJvY2Vzcyh0aGlzLmRhdGEsIHRoaXMucmVmZXJlbmNlLCBQYXJzZXIuZmFpbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBDb2x1bW4oZ3JhbW1hciwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5ncmFtbWFyID0gZ3JhbW1hcjtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnN0YXRlcyA9IFtdO1xuICAgICAgICB0aGlzLndhbnRzID0ge307IC8vIHN0YXRlcyBpbmRleGVkIGJ5IHRoZSBub24tdGVybWluYWwgdGhleSBleHBlY3RcbiAgICAgICAgdGhpcy5zY2FubmFibGUgPSBbXTsgLy8gbGlzdCBvZiBzdGF0ZXMgdGhhdCBleHBlY3QgYSB0b2tlblxuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IHt9OyAvLyBzdGF0ZXMgdGhhdCBhcmUgbnVsbGFibGVcbiAgICB9XG5cblxuICAgIENvbHVtbi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKG5leHRDb2x1bW4pIHtcbiAgICAgICAgdmFyIHN0YXRlcyA9IHRoaXMuc3RhdGVzO1xuICAgICAgICB2YXIgd2FudHMgPSB0aGlzLndhbnRzO1xuICAgICAgICB2YXIgY29tcGxldGVkID0gdGhpcy5jb21wbGV0ZWQ7XG5cbiAgICAgICAgZm9yICh2YXIgdyA9IDA7IHcgPCBzdGF0ZXMubGVuZ3RoOyB3KyspIHsgLy8gbmIuIHdlIHB1c2goKSBkdXJpbmcgaXRlcmF0aW9uXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZXNbd107XG5cbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmRhdGEgIT09IFBhcnNlci5mYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgIHZhciB3YW50ZWRCeSA9IHN0YXRlLndhbnRlZEJ5O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gd2FudGVkQnkubGVuZ3RoOyBpLS07ICkgeyAvLyB0aGlzIGxpbmUgaXMgaG90XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IHdhbnRlZEJ5W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZShsZWZ0LCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsLWNhc2UgbnVsbGFibGVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5yZWZlcmVuY2UgPT09IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBmdXR1cmUgcHJlZGljdG9ycyBvZiB0aGlzIHJ1bGUgZ2V0IGNvbXBsZXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHAgPSBzdGF0ZS5ydWxlLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5jb21wbGV0ZWRbZXhwXSA9IHRoaXMuY29tcGxldGVkW2V4cF0gfHwgW10pLnB1c2goc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHF1ZXVlIHNjYW5uYWJsZSBzdGF0ZXNcbiAgICAgICAgICAgICAgICB2YXIgZXhwID0gc3RhdGUucnVsZS5zeW1ib2xzW3N0YXRlLmRvdF07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5hYmxlLnB1c2goc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBwcmVkaWN0XG4gICAgICAgICAgICAgICAgaWYgKHdhbnRzW2V4cF0pIHtcbiAgICAgICAgICAgICAgICAgICAgd2FudHNbZXhwXS5wdXNoKHN0YXRlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkLmhhc093blByb3BlcnR5KGV4cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudWxscyA9IGNvbXBsZXRlZFtleHBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByaWdodCA9IG51bGxzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGUoc3RhdGUsIHJpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbnRzW2V4cF0gPSBbc3RhdGVdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWRpY3QoZXhwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb2x1bW4ucHJvdG90eXBlLnByZWRpY3QgPSBmdW5jdGlvbihleHApIHtcbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5ncmFtbWFyLmJ5TmFtZVtleHBdIHx8IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciByID0gcnVsZXNbaV07XG4gICAgICAgICAgICB2YXIgd2FudGVkQnkgPSB0aGlzLndhbnRzW2V4cF07XG4gICAgICAgICAgICB2YXIgcyA9IG5ldyBTdGF0ZShyLCAwLCB0aGlzLmluZGV4LCB3YW50ZWRCeSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlcy5wdXNoKHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ29sdW1uLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHZhciBjb3B5ID0gbGVmdC5uZXh0U3RhdGUocmlnaHQpO1xuICAgICAgICB0aGlzLnN0YXRlcy5wdXNoKGNvcHkpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gR3JhbW1hcihydWxlcywgc3RhcnQpIHtcbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQgfHwgdGhpcy5ydWxlc1swXS5uYW1lO1xuICAgICAgICB2YXIgYnlOYW1lID0gdGhpcy5ieU5hbWUgPSB7fTtcbiAgICAgICAgdGhpcy5ydWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgIGlmICghYnlOYW1lLmhhc093blByb3BlcnR5KHJ1bGUubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBieU5hbWVbcnVsZS5uYW1lXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnlOYW1lW3J1bGUubmFtZV0ucHVzaChydWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gU28gd2UgY2FuIGFsbG93IHBhc3NpbmcgKHJ1bGVzLCBzdGFydCkgZGlyZWN0bHkgdG8gUGFyc2VyIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIEdyYW1tYXIuZnJvbUNvbXBpbGVkID0gZnVuY3Rpb24ocnVsZXMsIHN0YXJ0KSB7XG4gICAgICAgIHZhciBsZXhlciA9IHJ1bGVzLkxleGVyO1xuICAgICAgICBpZiAocnVsZXMuUGFyc2VyU3RhcnQpIHtcbiAgICAgICAgICBzdGFydCA9IHJ1bGVzLlBhcnNlclN0YXJ0O1xuICAgICAgICAgIHJ1bGVzID0gcnVsZXMuUGFyc2VyUnVsZXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJ1bGVzID0gcnVsZXMubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiAobmV3IFJ1bGUoci5uYW1lLCByLnN5bWJvbHMsIHIucG9zdHByb2Nlc3MpKTsgfSk7XG4gICAgICAgIHZhciBnID0gbmV3IEdyYW1tYXIocnVsZXMsIHN0YXJ0KTtcbiAgICAgICAgZy5sZXhlciA9IGxleGVyOyAvLyBuYi4gc3RvcmluZyBsZXhlciBvbiBHcmFtbWFyIGlzIGlmZnksIGJ1dCB1bmF2b2lkYWJsZVxuICAgICAgICByZXR1cm4gZztcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIFN0cmVhbUxleGVyKCkge1xuICAgICAgdGhpcy5yZXNldChcIlwiKTtcbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbihkYXRhLCBzdGF0ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGRhdGE7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmxpbmUgPSBzdGF0ZSA/IHN0YXRlLmxpbmUgOiAxO1xuICAgICAgICB0aGlzLmxhc3RMaW5lQnJlYWsgPSBzdGF0ZSA/IC1zdGF0ZS5jb2wgOiAwO1xuICAgIH1cblxuICAgIFN0cmVhbUxleGVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSB0aGlzLmJ1ZmZlclt0aGlzLmluZGV4KytdO1xuICAgICAgICAgICAgaWYgKGNoID09PSAnXFxuJykge1xuICAgICAgICAgICAgICB0aGlzLmxpbmUgKz0gMTtcbiAgICAgICAgICAgICAgdGhpcy5sYXN0TGluZUJyZWFrID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7dmFsdWU6IGNofTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFN0cmVhbUxleGVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgIGNvbDogdGhpcy5pbmRleCAtIHRoaXMubGFzdExpbmVCcmVhayxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUuZm9ybWF0RXJyb3IgPSBmdW5jdGlvbih0b2tlbiwgbWVzc2FnZSkge1xuICAgICAgICAvLyBuYi4gdGhpcyBnZXRzIGNhbGxlZCBhZnRlciBjb25zdW1pbmcgdGhlIG9mZmVuZGluZyB0b2tlbixcbiAgICAgICAgLy8gc28gdGhlIGN1bHByaXQgaXMgaW5kZXgtMVxuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIGxpbmVzID0gYnVmZmVyXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgLnNsaWNlKFxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCgwLCB0aGlzLmxpbmUgLSA1KSwgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHZhciBuZXh0TGluZUJyZWFrID0gYnVmZmVyLmluZGV4T2YoJ1xcbicsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgaWYgKG5leHRMaW5lQnJlYWsgPT09IC0xKSBuZXh0TGluZUJyZWFrID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjb2wgPSB0aGlzLmluZGV4IC0gdGhpcy5sYXN0TGluZUJyZWFrO1xuICAgICAgICAgICAgdmFyIGxhc3RMaW5lRGlnaXRzID0gU3RyaW5nKHRoaXMubGluZSkubGVuZ3RoO1xuICAgICAgICAgICAgbWVzc2FnZSArPSBcIiBhdCBsaW5lIFwiICsgdGhpcy5saW5lICsgXCIgY29sIFwiICsgY29sICsgXCI6XFxuXFxuXCI7XG4gICAgICAgICAgICBtZXNzYWdlICs9IGxpbmVzXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihsaW5lLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWQodGhpcy5saW5lIC0gbGluZXMubGVuZ3RoICsgaSArIDEsIGxhc3RMaW5lRGlnaXRzKSArIFwiIFwiICsgbGluZTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgbWVzc2FnZSArPSBcIlxcblwiICsgcGFkKFwiXCIsIGxhc3RMaW5lRGlnaXRzICsgY29sKSArIFwiXlxcblwiO1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZSArIFwiIGF0IGluZGV4IFwiICsgKHRoaXMuaW5kZXggLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBhZChuLCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBzID0gU3RyaW5nKG4pO1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5KGxlbmd0aCAtIHMubGVuZ3RoICsgMSkuam9pbihcIiBcIikgKyBzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gUGFyc2VyKHJ1bGVzLCBzdGFydCwgb3B0aW9ucykge1xuICAgICAgICBpZiAocnVsZXMgaW5zdGFuY2VvZiBHcmFtbWFyKSB7XG4gICAgICAgICAgICB2YXIgZ3JhbW1hciA9IHJ1bGVzO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBzdGFydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBncmFtbWFyID0gR3JhbW1hci5mcm9tQ29tcGlsZWQocnVsZXMsIHN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyYW1tYXIgPSBncmFtbWFyO1xuXG4gICAgICAgIC8vIFJlYWQgb3B0aW9uc1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBrZWVwSGlzdG9yeTogZmFsc2UsXG4gICAgICAgICAgICBsZXhlcjogZ3JhbW1hci5sZXhlciB8fCBuZXcgU3RyZWFtTGV4ZXIsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGtleSBpbiAob3B0aW9ucyB8fCB7fSkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgbGV4ZXJcbiAgICAgICAgdGhpcy5sZXhlciA9IHRoaXMub3B0aW9ucy5sZXhlcjtcbiAgICAgICAgdGhpcy5sZXhlclN0YXRlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIFNldHVwIGEgdGFibGVcbiAgICAgICAgdmFyIGNvbHVtbiA9IG5ldyBDb2x1bW4oZ3JhbW1hciwgMCk7XG4gICAgICAgIHZhciB0YWJsZSA9IHRoaXMudGFibGUgPSBbY29sdW1uXTtcblxuICAgICAgICAvLyBJIGNvdWxkIGJlIGV4cGVjdGluZyBhbnl0aGluZy5cbiAgICAgICAgY29sdW1uLndhbnRzW2dyYW1tYXIuc3RhcnRdID0gW107XG4gICAgICAgIGNvbHVtbi5wcmVkaWN0KGdyYW1tYXIuc3RhcnQpO1xuICAgICAgICAvLyBUT0RPIHdoYXQgaWYgc3RhcnQgcnVsZSBpcyBudWxsYWJsZT9cbiAgICAgICAgY29sdW1uLnByb2Nlc3MoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gMDsgLy8gdG9rZW4gaW5kZXhcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgYSByZXNlcnZlZCB0b2tlbiBmb3IgaW5kaWNhdGluZyBhIHBhcnNlIGZhaWxcbiAgICBQYXJzZXIuZmFpbCA9IHt9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5mZWVkID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgICAgdmFyIGxleGVyID0gdGhpcy5sZXhlcjtcbiAgICAgICAgbGV4ZXIucmVzZXQoY2h1bmssIHRoaXMubGV4ZXJTdGF0ZSk7XG5cbiAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IGxleGVyLm5leHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIG5leHQgY29sdW1uIHNvIHRoYXQgdGhlIGVycm9yIHJlcG9ydGVyXG4gICAgICAgICAgICAgICAgLy8gY2FuIGRpc3BsYXkgdGhlIGNvcnJlY3RseSBwcmVkaWN0ZWQgc3RhdGVzLlxuICAgICAgICAgICAgICAgIHZhciBuZXh0Q29sdW1uID0gbmV3IENvbHVtbih0aGlzLmdyYW1tYXIsIHRoaXMuY3VycmVudCArIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFibGUucHVzaChuZXh0Q29sdW1uKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKHRoaXMucmVwb3J0TGV4ZXJFcnJvcihlKSk7XG4gICAgICAgICAgICAgICAgZXJyLm9mZnNldCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICBlcnIudG9rZW4gPSBlLnRva2VuO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIGFkZCBuZXcgc3RhdGVzIHRvIHRhYmxlW2N1cnJlbnQrMV1cbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlW3RoaXMuY3VycmVudF07XG5cbiAgICAgICAgICAgIC8vIEdDIHVudXNlZCBzdGF0ZXNcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmtlZXBIaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudGFibGVbdGhpcy5jdXJyZW50IC0gMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5jdXJyZW50ICsgMTtcbiAgICAgICAgICAgIHZhciBuZXh0Q29sdW1uID0gbmV3IENvbHVtbih0aGlzLmdyYW1tYXIsIG4pO1xuICAgICAgICAgICAgdGhpcy50YWJsZS5wdXNoKG5leHRDb2x1bW4pO1xuXG4gICAgICAgICAgICAvLyBBZHZhbmNlIGFsbCB0b2tlbnMgdGhhdCBleHBlY3QgdGhlIHN5bWJvbFxuICAgICAgICAgICAgdmFyIGxpdGVyYWwgPSB0b2tlbi50ZXh0ICE9PSB1bmRlZmluZWQgPyB0b2tlbi50ZXh0IDogdG9rZW4udmFsdWU7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBsZXhlci5jb25zdHJ1Y3RvciA9PT0gU3RyZWFtTGV4ZXIgPyB0b2tlbi52YWx1ZSA6IHRva2VuO1xuICAgICAgICAgICAgdmFyIHNjYW5uYWJsZSA9IGNvbHVtbi5zY2FubmFibGU7XG4gICAgICAgICAgICBmb3IgKHZhciB3ID0gc2Nhbm5hYmxlLmxlbmd0aDsgdy0tOyApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzY2FubmFibGVbd107XG4gICAgICAgICAgICAgICAgdmFyIGV4cGVjdCA9IHN0YXRlLnJ1bGUuc3ltYm9sc1tzdGF0ZS5kb3RdO1xuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBjb25zdW1lIHRoZSB0b2tlblxuICAgICAgICAgICAgICAgIC8vIGVpdGhlciByZWdleCBvciBsaXRlcmFsXG4gICAgICAgICAgICAgICAgaWYgKGV4cGVjdC50ZXN0ID8gZXhwZWN0LnRlc3QodmFsdWUpIDpcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LnR5cGUgPyBleHBlY3QudHlwZSA9PT0gdG9rZW4udHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGV4cGVjdC5saXRlcmFsID09PSBsaXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBpdFxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHN0YXRlLm5leHRTdGF0ZSh7ZGF0YTogdmFsdWUsIHRva2VuOiB0b2tlbiwgaXNUb2tlbjogdHJ1ZSwgcmVmZXJlbmNlOiBuIC0gMX0pO1xuICAgICAgICAgICAgICAgICAgICBuZXh0Q29sdW1uLnN0YXRlcy5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTmV4dCwgZm9yIGVhY2ggb2YgdGhlIHJ1bGVzLCB3ZSBlaXRoZXJcbiAgICAgICAgICAgIC8vIChhKSBjb21wbGV0ZSBpdCwgYW5kIHRyeSB0byBzZWUgaWYgdGhlIHJlZmVyZW5jZSByb3cgZXhwZWN0ZWQgdGhhdFxuICAgICAgICAgICAgLy8gICAgIHJ1bGVcbiAgICAgICAgICAgIC8vIChiKSBwcmVkaWN0IHRoZSBuZXh0IG5vbnRlcm1pbmFsIGl0IGV4cGVjdHMgYnkgYWRkaW5nIHRoYXRcbiAgICAgICAgICAgIC8vICAgICBub250ZXJtaW5hbCdzIHN0YXJ0IHN0YXRlXG4gICAgICAgICAgICAvLyBUbyBwcmV2ZW50IGR1cGxpY2F0aW9uLCB3ZSBhbHNvIGtlZXAgdHJhY2sgb2YgcnVsZXMgd2UgaGF2ZSBhbHJlYWR5XG4gICAgICAgICAgICAvLyBhZGRlZFxuXG4gICAgICAgICAgICBuZXh0Q29sdW1uLnByb2Nlc3MoKTtcblxuICAgICAgICAgICAgLy8gSWYgbmVlZGVkLCB0aHJvdyBhbiBlcnJvcjpcbiAgICAgICAgICAgIGlmIChuZXh0Q29sdW1uLnN0YXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBObyBzdGF0ZXMgYXQgYWxsISBUaGlzIGlzIG5vdCBnb29kLlxuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IodGhpcy5yZXBvcnRFcnJvcih0b2tlbikpO1xuICAgICAgICAgICAgICAgIGVyci5vZmZzZXQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXJyLnRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtYXliZSBzYXZlIGxleGVyIHN0YXRlXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmtlZXBIaXN0b3J5KSB7XG4gICAgICAgICAgICAgIGNvbHVtbi5sZXhlclN0YXRlID0gbGV4ZXIuc2F2ZSgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2x1bW4pIHtcbiAgICAgICAgICB0aGlzLmxleGVyU3RhdGUgPSBsZXhlci5zYXZlKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluY3JlbWVudGFsbHkga2VlcCB0cmFjayBvZiByZXN1bHRzXG4gICAgICAgIHRoaXMucmVzdWx0cyA9IHRoaXMuZmluaXNoKCk7XG5cbiAgICAgICAgLy8gQWxsb3cgY2hhaW5pbmcsIGZvciB3aGF0ZXZlciBpdCdzIHdvcnRoXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlcG9ydExleGVyRXJyb3IgPSBmdW5jdGlvbihsZXhlckVycm9yKSB7XG4gICAgICAgIHZhciB0b2tlbkRpc3BsYXksIGxleGVyTWVzc2FnZTtcbiAgICAgICAgLy8gUGxhbm5pbmcgdG8gYWRkIGEgdG9rZW4gcHJvcGVydHkgdG8gbW9vJ3MgdGhyb3duIGVycm9yXG4gICAgICAgIC8vIGV2ZW4gb24gZXJyb3JpbmcgdG9rZW5zIHRvIGJlIHVzZWQgaW4gZXJyb3IgZGlzcGxheSBiZWxvd1xuICAgICAgICB2YXIgdG9rZW4gPSBsZXhlckVycm9yLnRva2VuO1xuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHRva2VuRGlzcGxheSA9IFwiaW5wdXQgXCIgKyBKU09OLnN0cmluZ2lmeSh0b2tlbi50ZXh0WzBdKSArIFwiIChsZXhlciBlcnJvcilcIjtcbiAgICAgICAgICAgIGxleGVyTWVzc2FnZSA9IHRoaXMubGV4ZXIuZm9ybWF0RXJyb3IodG9rZW4sIFwiU3ludGF4IGVycm9yXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW5EaXNwbGF5ID0gXCJpbnB1dCAobGV4ZXIgZXJyb3IpXCI7XG4gICAgICAgICAgICBsZXhlck1lc3NhZ2UgPSBsZXhlckVycm9yLm1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVwb3J0RXJyb3JDb21tb24obGV4ZXJNZXNzYWdlLCB0b2tlbkRpc3BsYXkpO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlcG9ydEVycm9yID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgdmFyIHRva2VuRGlzcGxheSA9ICh0b2tlbi50eXBlID8gdG9rZW4udHlwZSArIFwiIHRva2VuOiBcIiA6IFwiXCIpICsgSlNPTi5zdHJpbmdpZnkodG9rZW4udmFsdWUgIT09IHVuZGVmaW5lZCA/IHRva2VuLnZhbHVlIDogdG9rZW4pO1xuICAgICAgICB2YXIgbGV4ZXJNZXNzYWdlID0gdGhpcy5sZXhlci5mb3JtYXRFcnJvcih0b2tlbiwgXCJTeW50YXggZXJyb3JcIik7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcG9ydEVycm9yQ29tbW9uKGxleGVyTWVzc2FnZSwgdG9rZW5EaXNwbGF5KTtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXBvcnRFcnJvckNvbW1vbiA9IGZ1bmN0aW9uKGxleGVyTWVzc2FnZSwgdG9rZW5EaXNwbGF5KSB7XG4gICAgICAgIHZhciBsaW5lcyA9IFtdO1xuICAgICAgICBsaW5lcy5wdXNoKGxleGVyTWVzc2FnZSk7XG4gICAgICAgIHZhciBsYXN0Q29sdW1uSW5kZXggPSB0aGlzLnRhYmxlLmxlbmd0aCAtIDI7XG4gICAgICAgIHZhciBsYXN0Q29sdW1uID0gdGhpcy50YWJsZVtsYXN0Q29sdW1uSW5kZXhdO1xuICAgICAgICB2YXIgZXhwZWN0YW50U3RhdGVzID0gbGFzdENvbHVtbi5zdGF0ZXNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFN5bWJvbCA9IHN0YXRlLnJ1bGUuc3ltYm9sc1tzdGF0ZS5kb3RdO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0U3ltYm9sICYmIHR5cGVvZiBuZXh0U3ltYm9sICE9PSBcInN0cmluZ1wiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGV4cGVjdGFudFN0YXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJ1VuZXhwZWN0ZWQgJyArIHRva2VuRGlzcGxheSArICcuIEkgZGlkIG5vdCBleHBlY3QgYW55IG1vcmUgaW5wdXQuIEhlcmUgaXMgdGhlIHN0YXRlIG9mIG15IHBhcnNlIHRhYmxlOlxcbicpO1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3RhdGVTdGFjayhsYXN0Q29sdW1uLnN0YXRlcywgbGluZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZXMucHVzaCgnVW5leHBlY3RlZCAnICsgdG9rZW5EaXNwbGF5ICsgJy4gSW5zdGVhZCwgSSB3YXMgZXhwZWN0aW5nIHRvIHNlZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcXG4nKTtcbiAgICAgICAgICAgIC8vIERpc3BsYXkgYSBcInN0YXRlIHN0YWNrXCIgZm9yIGVhY2ggZXhwZWN0YW50IHN0YXRlXG4gICAgICAgICAgICAvLyAtIHdoaWNoIHNob3dzIHlvdSBob3cgdGhpcyBzdGF0ZSBjYW1lIHRvIGJlLCBzdGVwIGJ5IHN0ZXAuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGRlcml2YXRpb24sIHdlIG9ubHkgZGlzcGxheSB0aGUgZmlyc3Qgb25lLlxuICAgICAgICAgICAgdmFyIHN0YXRlU3RhY2tzID0gZXhwZWN0YW50U3RhdGVzXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZEZpcnN0U3RhdGVTdGFjayhzdGF0ZSwgW10pIHx8IFtzdGF0ZV07XG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IGVhY2ggc3RhdGUgdGhhdCBpcyBleHBlY3RpbmcgYSB0ZXJtaW5hbCBzeW1ib2wgbmV4dC5cbiAgICAgICAgICAgIHN0YXRlU3RhY2tzLmZvckVhY2goZnVuY3Rpb24oc3RhdGVTdGFjaykge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlU3RhY2tbMF07XG4gICAgICAgICAgICAgICAgdmFyIG5leHRTeW1ib2wgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICB2YXIgc3ltYm9sRGlzcGxheSA9IHRoaXMuZ2V0U3ltYm9sRGlzcGxheShuZXh0U3ltYm9sKTtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCdBICcgKyBzeW1ib2xEaXNwbGF5ICsgJyBiYXNlZCBvbjonKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlTdGF0ZVN0YWNrKHN0YXRlU3RhY2ssIGxpbmVzKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVzLnB1c2goXCJcIik7XG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKFwiXFxuXCIpO1xuICAgIH1cbiAgICBcbiAgICBQYXJzZXIucHJvdG90eXBlLmRpc3BsYXlTdGF0ZVN0YWNrID0gZnVuY3Rpb24oc3RhdGVTdGFjaywgbGluZXMpIHtcbiAgICAgICAgdmFyIGxhc3REaXNwbGF5O1xuICAgICAgICB2YXIgc2FtZURpc3BsYXlDb3VudCA9IDA7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RhdGVTdGFjay5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RhdGVTdGFja1tqXTtcbiAgICAgICAgICAgIHZhciBkaXNwbGF5ID0gc3RhdGUucnVsZS50b1N0cmluZyhzdGF0ZS5kb3QpO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXkgPT09IGxhc3REaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgc2FtZURpc3BsYXlDb3VudCsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc2FtZURpc3BsYXlDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaCgnICAgIF4gJyArIHNhbWVEaXNwbGF5Q291bnQgKyAnIG1vcmUgbGluZXMgaWRlbnRpY2FsIHRvIHRoaXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2FtZURpc3BsYXlDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnICAgICcgKyBkaXNwbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3REaXNwbGF5ID0gZGlzcGxheTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLmdldFN5bWJvbERpc3BsYXkgPSBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIGdldFN5bWJvbExvbmdEaXNwbGF5KHN5bWJvbCk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgQnVpbGRzIGEgdGhlIGZpcnN0IHN0YXRlIHN0YWNrLiBZb3UgY2FuIHRoaW5rIG9mIGEgc3RhdGUgc3RhY2sgYXMgdGhlIGNhbGwgc3RhY2tcbiAgICBvZiB0aGUgcmVjdXJzaXZlLWRlc2NlbnQgcGFyc2VyIHdoaWNoIHRoZSBOZWFybGV5IHBhcnNlIGFsZ29yaXRobSBzaW11bGF0ZXMuXG4gICAgQSBzdGF0ZSBzdGFjayBpcyByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBzdGF0ZSBvYmplY3RzLiBXaXRoaW4gYVxuICAgIHN0YXRlIHN0YWNrLCB0aGUgZmlyc3QgaXRlbSBvZiB0aGUgYXJyYXkgd2lsbCBiZSB0aGUgc3RhcnRpbmdcbiAgICBzdGF0ZSwgd2l0aCBlYWNoIHN1Y2Nlc3NpdmUgaXRlbSBpbiB0aGUgYXJyYXkgZ29pbmcgZnVydGhlciBiYWNrIGludG8gaGlzdG9yeS5cblxuICAgIFRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgZ2l2ZW4gYSBzdGFydGluZyBzdGF0ZSBhbmQgYW4gZW1wdHkgYXJyYXkgcmVwcmVzZW50aW5nXG4gICAgdGhlIHZpc2l0ZWQgc3RhdGVzLCBhbmQgaXQgcmV0dXJucyBhbiBzaW5nbGUgc3RhdGUgc3RhY2suXG5cbiAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUuYnVpbGRGaXJzdFN0YXRlU3RhY2sgPSBmdW5jdGlvbihzdGF0ZSwgdmlzaXRlZCkge1xuICAgICAgICBpZiAodmlzaXRlZC5pbmRleE9mKHN0YXRlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIEZvdW5kIGN5Y2xlLCByZXR1cm4gbnVsbFxuICAgICAgICAgICAgLy8gdG8gZWxpbWluYXRlIHRoaXMgcGF0aCBmcm9tIHRoZSByZXN1bHRzLCBiZWNhdXNlXG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBrbm93IGhvdyB0byBkaXNwbGF5IGl0IG1lYW5pbmdmdWxseVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLndhbnRlZEJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtzdGF0ZV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZTdGF0ZSA9IHN0YXRlLndhbnRlZEJ5WzBdO1xuICAgICAgICB2YXIgY2hpbGRWaXNpdGVkID0gW3N0YXRlXS5jb25jYXQodmlzaXRlZCk7XG4gICAgICAgIHZhciBjaGlsZFJlc3VsdCA9IHRoaXMuYnVpbGRGaXJzdFN0YXRlU3RhY2socHJldlN0YXRlLCBjaGlsZFZpc2l0ZWQpO1xuICAgICAgICBpZiAoY2hpbGRSZXN1bHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbc3RhdGVdLmNvbmNhdChjaGlsZFJlc3VsdCk7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY29sdW1uID0gdGhpcy50YWJsZVt0aGlzLmN1cnJlbnRdO1xuICAgICAgICBjb2x1bW4ubGV4ZXJTdGF0ZSA9IHRoaXMubGV4ZXJTdGF0ZTtcbiAgICAgICAgcmV0dXJuIGNvbHVtbjtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvbHVtbi5pbmRleDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gaW5kZXg7XG4gICAgICAgIHRoaXMudGFibGVbaW5kZXhdID0gY29sdW1uO1xuICAgICAgICB0aGlzLnRhYmxlLnNwbGljZShpbmRleCArIDEpO1xuICAgICAgICB0aGlzLmxleGVyU3RhdGUgPSBjb2x1bW4ubGV4ZXJTdGF0ZTtcblxuICAgICAgICAvLyBJbmNyZW1lbnRhbGx5IGtlZXAgdHJhY2sgb2YgcmVzdWx0c1xuICAgICAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLmZpbmlzaCgpO1xuICAgIH07XG5cbiAgICAvLyBuYi4gZGVwcmVjYXRlZDogdXNlIHNhdmUvcmVzdG9yZSBpbnN0ZWFkIVxuICAgIFBhcnNlci5wcm90b3R5cGUucmV3aW5kID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMua2VlcEhpc3RvcnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2V0IG9wdGlvbiBga2VlcEhpc3RvcnlgIHRvIGVuYWJsZSByZXdpbmRpbmcnKVxuICAgICAgICB9XG4gICAgICAgIC8vIG5iLiByZWNhbGwgY29sdW1uICh0YWJsZSkgaW5kaWNpZXMgZmFsbCBiZXR3ZWVuIHRva2VuIGluZGljaWVzLlxuICAgICAgICAvLyAgICAgICAgY29sIDAgICAtLSAgIHRva2VuIDAgICAtLSAgIGNvbCAxXG4gICAgICAgIHRoaXMucmVzdG9yZSh0aGlzLnRhYmxlW2luZGV4XSk7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcG9zc2libGUgcGFyc2luZ3NcbiAgICAgICAgdmFyIGNvbnNpZGVyYXRpb25zID0gW107XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuZ3JhbW1hci5zdGFydDtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMudGFibGVbdGhpcy50YWJsZS5sZW5ndGggLSAxXVxuICAgICAgICBjb2x1bW4uc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGlmICh0LnJ1bGUubmFtZSA9PT0gc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5kb3QgPT09IHQucnVsZS5zeW1ib2xzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAmJiB0LnJlZmVyZW5jZSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAmJiB0LmRhdGEgIT09IFBhcnNlci5mYWlsKSB7XG4gICAgICAgICAgICAgICAgY29uc2lkZXJhdGlvbnMucHVzaCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb25zaWRlcmF0aW9ucy5tYXAoZnVuY3Rpb24oYykge3JldHVybiBjLmRhdGE7IH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRTeW1ib2xMb25nRGlzcGxheShzeW1ib2wpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2Ygc3ltYm9sO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBpZiAoc3ltYm9sLmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3ltYm9sLmxpdGVyYWwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzeW1ib2wgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NoYXJhY3RlciBtYXRjaGluZyAnICsgc3ltYm9sO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzeW1ib2wudHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2wudHlwZSArICcgdG9rZW4nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzeW1ib2wudGVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndG9rZW4gbWF0Y2hpbmcgJyArIFN0cmluZyhzeW1ib2wudGVzdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzeW1ib2wgdHlwZTogJyArIHN5bWJvbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTeW1ib2xTaG9ydERpc3BsYXkoc3ltYm9sKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHN5bWJvbDtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWYgKHN5bWJvbC5saXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN5bWJvbC5saXRlcmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbC50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzeW1ib2wudHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJScgKyBzeW1ib2wudHlwZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnRlc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzwnICsgU3RyaW5nKHN5bWJvbC50ZXN0KSArICc+JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHN5bWJvbCB0eXBlOiAnICsgc3ltYm9sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIFBhcnNlcjogUGFyc2VyLFxuICAgICAgICBHcmFtbWFyOiBHcmFtbWFyLFxuICAgICAgICBSdWxlOiBSdWxlLFxuICAgIH07XG5cbn0pKTtcbiIsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsICJmdW5jdGlvbiBub29wKCkgeyB9XG5jb25zdCBpZGVudGl0eSA9IHggPT4geDtcbmZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKGNvbnN0IGsgaW4gc3JjKVxuICAgICAgICB0YXJba10gPSBzcmNba107XG4gICAgcmV0dXJuIHRhcjtcbn1cbmZ1bmN0aW9uIGlzX3Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGFkZF9sb2NhdGlvbihlbGVtZW50LCBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIpIHtcbiAgICBlbGVtZW50Ll9fc3ZlbHRlX21ldGEgPSB7XG4gICAgICAgIGxvYzogeyBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIgfVxuICAgIH07XG59XG5mdW5jdGlvbiBydW4oZm4pIHtcbiAgICByZXR1cm4gZm4oKTtcbn1cbmZ1bmN0aW9uIGJsYW5rX29iamVjdCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbmZ1bmN0aW9uIHJ1bl9hbGwoZm5zKSB7XG4gICAgZm5zLmZvckVhY2gocnVuKTtcbn1cbmZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHNhZmVfbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5sZXQgc3JjX3VybF9lcXVhbF9hbmNob3I7XG5mdW5jdGlvbiBzcmNfdXJsX2VxdWFsKGVsZW1lbnRfc3JjLCB1cmwpIHtcbiAgICBpZiAoIXNyY191cmxfZXF1YWxfYW5jaG9yKSB7XG4gICAgICAgIHNyY191cmxfZXF1YWxfYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIH1cbiAgICBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmID0gdXJsO1xuICAgIHJldHVybiBlbGVtZW50X3NyYyA9PT0gc3JjX3VybF9lcXVhbF9hbmNob3IuaHJlZjtcbn1cbmZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuICAgIGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG4gICAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHN1YnNjcmliZShzdG9yZSwgXyA9PiB2YWx1ZSA9IF8pKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuXG4gICAgICAgID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpXG4gICAgICAgIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG4gICAgICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgICAgIGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZXRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuICAgIH1cbiAgICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGlmIChzbG90X2NoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgICAgIHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3Qoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgY29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcbiAgICB1cGRhdGVfc2xvdF9iYXNlKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBzbG90X2NoYW5nZXMsIGdldF9zbG90X2NvbnRleHRfZm4pO1xufVxuZnVuY3Rpb24gZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlKCQkc2NvcGUpIHtcbiAgICBpZiAoJCRzY29wZS5jdHgubGVuZ3RoID4gMzIpIHtcbiAgICAgICAgY29uc3QgZGlydHkgPSBbXTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gJCRzY29wZS5jdHgubGVuZ3RoIC8gMzI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRpcnR5W2ldID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcnR5O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuICAgIGNvbnN0IHJlc3QgPSB7fTtcbiAgICBrZXlzID0gbmV3IFNldChrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9zbG90cyhzbG90cykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChyYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUpIHtcbiAgICBzdG9yZS5zZXQodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59XG5jb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG4gICAgcmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5cbmNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xubGV0IG5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xubGV0IHJhZiA9IGlzX2NsaWVudCA/IGNiID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBub29wO1xuLy8gdXNlZCBpbnRlcm5hbGx5IGZvciB0ZXN0aW5nXG5mdW5jdGlvbiBzZXRfbm93KGZuKSB7XG4gICAgbm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgcmFmID0gZm47XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuICAgIHRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGlmICghdGFzay5jKG5vdykpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suZigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhc2tzLnNpemUgIT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xufVxuLyoqXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5IVxuICovXG5mdW5jdGlvbiBjbGVhcl9sb29wcygpIHtcbiAgICB0YXNrcy5jbGVhcigpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhc2sgdGhhdCBydW5zIG9uIGVhY2ggcmFmIGZyYW1lXG4gKiB1bnRpbCBpdCByZXR1cm5zIGEgZmFsc3kgdmFsdWUgb3IgaXMgYWJvcnRlZFxuICovXG5mdW5jdGlvbiBsb29wKGNhbGxiYWNrKSB7XG4gICAgbGV0IHRhc2s7XG4gICAgaWYgKHRhc2tzLnNpemUgPT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBUcmFjayB3aGljaCBub2RlcyBhcmUgY2xhaW1lZCBkdXJpbmcgaHlkcmF0aW9uLiBVbmNsYWltZWQgbm9kZXMgY2FuIHRoZW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbi8vIGF0IHRoZSBlbmQgb2YgaHlkcmF0aW9uIHdpdGhvdXQgdG91Y2hpbmcgdGhlIHJlbWFpbmluZyBub2Rlcy5cbmxldCBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIHN0YXJ0X2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gZW5kX2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwcGVyX2JvdW5kKGxvdywgaGlnaCwga2V5LCB2YWx1ZSkge1xuICAgIC8vIFJldHVybiBmaXJzdCBpbmRleCBvZiB2YWx1ZSBsYXJnZXIgdGhhbiBpbnB1dCB2YWx1ZSBpbiB0aGUgcmFuZ2UgW2xvdywgaGlnaClcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICBjb25zdCBtaWQgPSBsb3cgKyAoKGhpZ2ggLSBsb3cpID4+IDEpO1xuICAgICAgICBpZiAoa2V5KG1pZCkgPD0gdmFsdWUpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG59XG5mdW5jdGlvbiBpbml0X2h5ZHJhdGUodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5oeWRyYXRlX2luaXQpXG4gICAgICAgIHJldHVybjtcbiAgICB0YXJnZXQuaHlkcmF0ZV9pbml0ID0gdHJ1ZTtcbiAgICAvLyBXZSBrbm93IHRoYXQgYWxsIGNoaWxkcmVuIGhhdmUgY2xhaW1fb3JkZXIgdmFsdWVzIHNpbmNlIHRoZSB1bmNsYWltZWQgaGF2ZSBiZWVuIGRldGFjaGVkIGlmIHRhcmdldCBpcyBub3QgPGhlYWQ+XG4gICAgbGV0IGNoaWxkcmVuID0gdGFyZ2V0LmNoaWxkTm9kZXM7XG4gICAgLy8gSWYgdGFyZ2V0IGlzIDxoZWFkPiwgdGhlcmUgbWF5IGJlIGNoaWxkcmVuIHdpdGhvdXQgY2xhaW1fb3JkZXJcbiAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSAnSEVBRCcpIHtcbiAgICAgICAgY29uc3QgbXlDaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbXlDaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuID0gbXlDaGlsZHJlbjtcbiAgICB9XG4gICAgLypcbiAgICAqIFJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkuXG4gICAgKiBXZSBjYW4gcmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseSBieSBmaW5kaW5nIHRoZSBsb25nZXN0IHN1YnNlcXVlbmNlIG9mXG4gICAgKiBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IGNsYWltZWQgaW4gb3JkZXIgYW5kIG9ubHkgbW92aW5nIHRoZSByZXN0LiBUaGUgbG9uZ2VzdFxuICAgICogc3Vic2VxdWVuY2Ugc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgdGhhdCBhcmUgY2xhaW1lZCBpbiBvcmRlciBjYW4gYmUgZm91bmQgYnlcbiAgICAqIGNvbXB1dGluZyB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIC5jbGFpbV9vcmRlciB2YWx1ZXMuXG4gICAgKlxuICAgICogVGhpcyBhbGdvcml0aG0gaXMgb3B0aW1hbCBpbiBnZW5lcmF0aW5nIHRoZSBsZWFzdCBhbW91bnQgb2YgcmVvcmRlciBvcGVyYXRpb25zXG4gICAgKiBwb3NzaWJsZS5cbiAgICAqXG4gICAgKiBQcm9vZjpcbiAgICAqIFdlIGtub3cgdGhhdCwgZ2l2ZW4gYSBzZXQgb2YgcmVvcmRlcmluZyBvcGVyYXRpb25zLCB0aGUgbm9kZXMgdGhhdCBkbyBub3QgbW92ZVxuICAgICogYWx3YXlzIGZvcm0gYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSwgc2luY2UgdGhleSBkbyBub3QgbW92ZSBhbW9uZyBlYWNoIG90aGVyXG4gICAgKiBtZWFuaW5nIHRoYXQgdGhleSBtdXN0IGJlIGFscmVhZHkgb3JkZXJlZCBhbW9uZyBlYWNoIG90aGVyLiBUaHVzLCB0aGUgbWF4aW1hbFxuICAgICogc2V0IG9mIG5vZGVzIHRoYXQgZG8gbm90IG1vdmUgZm9ybSBhIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZS5cbiAgICAqL1xuICAgIC8vIENvbXB1dGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgLy8gbTogc3Vic2VxdWVuY2UgbGVuZ3RoIGogPT4gaW5kZXggayBvZiBzbWFsbGVzdCB2YWx1ZSB0aGF0IGVuZHMgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBsZW5ndGggalxuICAgIGNvbnN0IG0gPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGggKyAxKTtcbiAgICAvLyBQcmVkZWNlc3NvciBpbmRpY2VzICsgMVxuICAgIGNvbnN0IHAgPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGgpO1xuICAgIG1bMF0gPSAtMTtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gY2hpbGRyZW5baV0uY2xhaW1fb3JkZXI7XG4gICAgICAgIC8vIEZpbmQgdGhlIGxhcmdlc3Qgc3Vic2VxdWVuY2UgbGVuZ3RoIHN1Y2ggdGhhdCBpdCBlbmRzIGluIGEgdmFsdWUgbGVzcyB0aGFuIG91ciBjdXJyZW50IHZhbHVlXG4gICAgICAgIC8vIHVwcGVyX2JvdW5kIHJldHVybnMgZmlyc3QgZ3JlYXRlciB2YWx1ZSwgc28gd2Ugc3VidHJhY3Qgb25lXG4gICAgICAgIC8vIHdpdGggZmFzdCBwYXRoIGZvciB3aGVuIHdlIGFyZSBvbiB0aGUgY3VycmVudCBsb25nZXN0IHN1YnNlcXVlbmNlXG4gICAgICAgIGNvbnN0IHNlcUxlbiA9ICgobG9uZ2VzdCA+IDAgJiYgY2hpbGRyZW5bbVtsb25nZXN0XV0uY2xhaW1fb3JkZXIgPD0gY3VycmVudCkgPyBsb25nZXN0ICsgMSA6IHVwcGVyX2JvdW5kKDEsIGxvbmdlc3QsIGlkeCA9PiBjaGlsZHJlblttW2lkeF1dLmNsYWltX29yZGVyLCBjdXJyZW50KSkgLSAxO1xuICAgICAgICBwW2ldID0gbVtzZXFMZW5dICsgMTtcbiAgICAgICAgY29uc3QgbmV3TGVuID0gc2VxTGVuICsgMTtcbiAgICAgICAgLy8gV2UgY2FuIGd1YXJhbnRlZSB0aGF0IGN1cnJlbnQgaXMgdGhlIHNtYWxsZXN0IHZhbHVlLiBPdGhlcndpc2UsIHdlIHdvdWxkIGhhdmUgZ2VuZXJhdGVkIGEgbG9uZ2VyIHNlcXVlbmNlLlxuICAgICAgICBtW25ld0xlbl0gPSBpO1xuICAgICAgICBsb25nZXN0ID0gTWF0aC5tYXgobmV3TGVuLCBsb25nZXN0KTtcbiAgICB9XG4gICAgLy8gVGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBub2RlcyAoaW5pdGlhbGx5IHJldmVyc2VkKVxuICAgIGNvbnN0IGxpcyA9IFtdO1xuICAgIC8vIFRoZSByZXN0IG9mIHRoZSBub2Rlcywgbm9kZXMgdGhhdCB3aWxsIGJlIG1vdmVkXG4gICAgY29uc3QgdG9Nb3ZlID0gW107XG4gICAgbGV0IGxhc3QgPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGN1ciA9IG1bbG9uZ2VzdF0gKyAxOyBjdXIgIT0gMDsgY3VyID0gcFtjdXIgLSAxXSkge1xuICAgICAgICBsaXMucHVzaChjaGlsZHJlbltjdXIgLSAxXSk7XG4gICAgICAgIGZvciAoOyBsYXN0ID49IGN1cjsgbGFzdC0tKSB7XG4gICAgICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdC0tO1xuICAgIH1cbiAgICBmb3IgKDsgbGFzdCA+PSAwOyBsYXN0LS0pIHtcbiAgICAgICAgdG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuICAgIH1cbiAgICBsaXMucmV2ZXJzZSgpO1xuICAgIC8vIFdlIHNvcnQgdGhlIG5vZGVzIGJlaW5nIG1vdmVkIHRvIGd1YXJhbnRlZSB0aGF0IHRoZWlyIGluc2VydGlvbiBvcmRlciBtYXRjaGVzIHRoZSBjbGFpbSBvcmRlclxuICAgIHRvTW92ZS5zb3J0KChhLCBiKSA9PiBhLmNsYWltX29yZGVyIC0gYi5jbGFpbV9vcmRlcik7XG4gICAgLy8gRmluYWxseSwgd2UgbW92ZSB0aGUgbm9kZXNcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCB0b01vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd2hpbGUgKGogPCBsaXMubGVuZ3RoICYmIHRvTW92ZVtpXS5jbGFpbV9vcmRlciA+PSBsaXNbal0uY2xhaW1fb3JkZXIpIHtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3IgPSBqIDwgbGlzLmxlbmd0aCA/IGxpc1tqXSA6IG51bGw7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUodG9Nb3ZlW2ldLCBhbmNob3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzKHRhcmdldCwgc3R5bGVfc2hlZXRfaWQsIHN0eWxlcykge1xuICAgIGNvbnN0IGFwcGVuZF9zdHlsZXNfdG8gPSBnZXRfcm9vdF9mb3Jfc3R5bGUodGFyZ2V0KTtcbiAgICBpZiAoIWFwcGVuZF9zdHlsZXNfdG8uZ2V0RWxlbWVudEJ5SWQoc3R5bGVfc2hlZXRfaWQpKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUuaWQgPSBzdHlsZV9zaGVldF9pZDtcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG4gICAgICAgIGFwcGVuZF9zdHlsZXNoZWV0KGFwcGVuZF9zdHlsZXNfdG8sIHN0eWxlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIGNvbnN0IHJvb3QgPSBub2RlLmdldFJvb3ROb2RlID8gbm9kZS5nZXRSb290Tm9kZSgpIDogbm9kZS5vd25lckRvY3VtZW50O1xuICAgIGlmIChyb290ICYmIHJvb3QuaG9zdCkge1xuICAgICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudDtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZV9lbGVtZW50ID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICBhcHBlbmRfc3R5bGVzaGVldChnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSksIHN0eWxlX2VsZW1lbnQpO1xuICAgIHJldHVybiBzdHlsZV9lbGVtZW50LnNoZWV0O1xufVxuZnVuY3Rpb24gYXBwZW5kX3N0eWxlc2hlZXQobm9kZSwgc3R5bGUpIHtcbiAgICBhcHBlbmQobm9kZS5oZWFkIHx8IG5vZGUsIHN0eWxlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKSB7XG4gICAgaWYgKGlzX2h5ZHJhdGluZykge1xuICAgICAgICBpbml0X2h5ZHJhdGUodGFyZ2V0KTtcbiAgICAgICAgaWYgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9PT0gdW5kZWZpbmVkKSB8fCAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsKSAmJiAodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQucGFyZW50RWxlbWVudCAhPT0gdGFyZ2V0KSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2tpcCBub2RlcyBvZiB1bmRlZmluZWQgb3JkZXJpbmdcbiAgICAgICAgd2hpbGUgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCkgJiYgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLmNsYWltX29yZGVyID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlICE9PSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCkge1xuICAgICAgICAgICAgLy8gV2Ugb25seSBpbnNlcnQgaWYgdGhlIG9yZGVyaW5nIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUgbW9kaWZpZWQgb3IgdGhlIHBhcmVudCBub2RlIGlzIG5vdCB0YXJnZXRcbiAgICAgICAgICAgIGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQgfHwgbm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nICYmICFhbmNob3IpIHtcbiAgICAgICAgYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9IGFuY2hvcikge1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cnVzdGVkKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC5pc1RydXN0ZWQpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0X2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdfX3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yc1trZXldICYmIGRlc2NyaXB0b3JzW2tleV0uc2V0KSB7XG4gICAgICAgICAgICBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdmdfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChwcm9wIGluIG5vZGUpIHtcbiAgICAgICAgbm9kZVtwcm9wXSA9IHR5cGVvZiBub2RlW3Byb3BdID09PSAnYm9vbGVhbicgJiYgdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgdmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6ICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRpbWVfcmFuZ2VzX3RvX2FycmF5KHJhbmdlcykge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyYXkucHVzaCh7IHN0YXJ0OiByYW5nZXMuc3RhcnQoaSksIGVuZDogcmFuZ2VzLmVuZChpKSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2Rlcyk7XG59XG5mdW5jdGlvbiBpbml0X2NsYWltX2luZm8obm9kZXMpIHtcbiAgICBpZiAobm9kZXMuY2xhaW1faW5mbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGVzLmNsYWltX2luZm8gPSB7IGxhc3RfaW5kZXg6IDAsIHRvdGFsX2NsYWltZWQ6IDAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGFpbV9ub2RlKG5vZGVzLCBwcmVkaWNhdGUsIHByb2Nlc3NOb2RlLCBjcmVhdGVOb2RlLCBkb250VXBkYXRlTGFzdEluZGV4ID0gZmFsc2UpIHtcbiAgICAvLyBUcnkgdG8gZmluZCBub2RlcyBpbiBhbiBvcmRlciBzdWNoIHRoYXQgd2UgbGVuZ3RoZW4gdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgcmVzdWx0Tm9kZSA9ICgoKSA9PiB7XG4gICAgICAgIC8vIFdlIGZpcnN0IHRyeSB0byBmaW5kIGFuIGVsZW1lbnQgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICBmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4OyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHRyeSB0byBmaW5kIG9uZSBiZWZvcmVcbiAgICAgICAgLy8gV2UgaXRlcmF0ZSBpbiByZXZlcnNlIHNvIHRoYXQgd2UgZG9uJ3QgZ28gdG9vIGZhciBiYWNrXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb250VXBkYXRlTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2Ugd2Ugc3BsaWNlZCBiZWZvcmUgdGhlIGxhc3RfaW5kZXgsIHdlIGRlY3JlYXNlIGl0XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBjYW4ndCBmaW5kIGFueSBtYXRjaGluZyBub2RlLCB3ZSBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgIHJldHVybiBjcmVhdGVOb2RlKCk7XG4gICAgfSkoKTtcbiAgICByZXN1bHROb2RlLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgIG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZCArPSAxO1xuICAgIHJldHVybiByZXN1bHROb2RlO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBjcmVhdGVfZWxlbWVudCkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlTmFtZSA9PT0gbmFtZSwgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbW92ZS5mb3JFYWNoKHYgPT4gbm9kZS5yZW1vdmVBdHRyaWJ1dGUodikpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sICgpID0+IGNyZWF0ZV9lbGVtZW50KG5hbWUpKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGNsYWltX3N2Z19lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnX2VsZW1lbnQpO1xufVxuZnVuY3Rpb24gY2xhaW1fdGV4dChub2RlcywgZGF0YSkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gMywgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YVN0ciA9ICcnICsgZGF0YTtcbiAgICAgICAgaWYgKG5vZGUuZGF0YS5zdGFydHNXaXRoKGRhdGFTdHIpKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5kYXRhLmxlbmd0aCAhPT0gZGF0YVN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5zcGxpdFRleHQoZGF0YVN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gZGF0YVN0cjtcbiAgICAgICAgfVxuICAgIH0sICgpID0+IHRleHQoZGF0YSksIHRydWUgLy8gVGV4dCBub2RlcyBzaG91bGQgbm90IHVwZGF0ZSBsYXN0IGluZGV4IHNpbmNlIGl0IGlzIGxpa2VseSBub3Qgd29ydGggaXQgdG8gZWxpbWluYXRlIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgYWN0dWFsIGVsZW1lbnRzXG4gICAgKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3NwYWNlKG5vZGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX3RleHQobm9kZXMsICcgJyk7XG59XG5mdW5jdGlvbiBmaW5kX2NvbW1lbnQobm9kZXMsIHRleHQsIHN0YXJ0KSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8gJiYgbm9kZS50ZXh0Q29udGVudC50cmltKCkgPT09IHRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2Rlcy5sZW5ndGg7XG59XG5mdW5jdGlvbiBjbGFpbV9odG1sX3RhZyhub2RlcywgaXNfc3ZnKSB7XG4gICAgLy8gZmluZCBodG1sIG9wZW5pbmcgdGFnXG4gICAgY29uc3Qgc3RhcnRfaW5kZXggPSBmaW5kX2NvbW1lbnQobm9kZXMsICdIVE1MX1RBR19TVEFSVCcsIDApO1xuICAgIGNvbnN0IGVuZF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX0VORCcsIHN0YXJ0X2luZGV4KTtcbiAgICBpZiAoc3RhcnRfaW5kZXggPT09IGVuZF9pbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24odW5kZWZpbmVkLCBpc19zdmcpO1xuICAgIH1cbiAgICBpbml0X2NsYWltX2luZm8obm9kZXMpO1xuICAgIGNvbnN0IGh0bWxfdGFnX25vZGVzID0gbm9kZXMuc3BsaWNlKHN0YXJ0X2luZGV4LCBlbmRfaW5kZXggLSBzdGFydF9pbmRleCArIDEpO1xuICAgIGRldGFjaChodG1sX3RhZ19ub2Rlc1swXSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzW2h0bWxfdGFnX25vZGVzLmxlbmd0aCAtIDFdKTtcbiAgICBjb25zdCBjbGFpbWVkX25vZGVzID0gaHRtbF90YWdfbm9kZXMuc2xpY2UoMSwgaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMSk7XG4gICAgZm9yIChjb25zdCBuIG9mIGNsYWltZWRfbm9kZXMpIHtcbiAgICAgICAgbi5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcbiAgICAgICAgbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbihjbGFpbWVkX25vZGVzLCBpc19zdmcpO1xufVxuZnVuY3Rpb24gc2V0X2RhdGEodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUsIGltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIGlmIChvcHRpb24uX192YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZWN0LnNlbGVjdGVkSW5kZXggPSAtMTsgLy8gbm8gb3B0aW9uIHNob3VsZCBiZSBzZWxlY3RlZFxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcbmxldCBjcm9zc29yaWdpbjtcbmZ1bmN0aW9uIGlzX2Nyb3Nzb3JpZ2luKCkge1xuICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyb3Nzb3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZvaWQgd2luZG93LnBhcmVudC5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Jvc3NvcmlnaW47XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG4gICAgY29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChjb21wdXRlZF9zdHlsZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuICAgIGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgJyArXG4gICAgICAgICdvdmVyZmxvdzogaGlkZGVuOyBib3JkZXI6IDA7IG9wYWNpdHk6IDA7IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAtMTsnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgaWZyYW1lLnRhYkluZGV4ID0gLTE7XG4gICAgY29uc3QgY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbigpO1xuICAgIGxldCB1bnN1YnNjcmliZTtcbiAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9IFwiZGF0YTp0ZXh0L2h0bWwsPHNjcmlwdD5vbnJlc2l6ZT1mdW5jdGlvbigpe3BhcmVudC5wb3N0TWVzc2FnZSgwLCcqJyl9PC9zY3JpcHQ+XCI7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKHdpbmRvdywgJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KVxuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3RlbihpZnJhbWUuY29udGVudFdpbmRvdywgJ3Jlc2l6ZScsIGZuKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kKG5vZGUsIGlmcmFtZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuc3Vic2NyaWJlICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRldGFjaChpZnJhbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0b2dnbGVfY2xhc3MoZWxlbWVudCwgbmFtZSwgdG9nZ2xlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3RbdG9nZ2xlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG59XG5mdW5jdGlvbiBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGJ1YmJsZXMgPSBmYWxzZSwgY2FuY2VsYWJsZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cbmNsYXNzIEh0bWxUYWcge1xuICAgIGNvbnN0cnVjdG9yKGlzX3N2ZyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuaXNfc3ZnID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfc3ZnID0gaXNfc3ZnO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgIH1cbiAgICBtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNfc3ZnKVxuICAgICAgICAgICAgICAgIHRoaXMuZSA9IHN2Z19lbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5lID0gZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5jKGh0bWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaShhbmNob3IpO1xuICAgIH1cbiAgICBoKGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAoaHRtbCkge1xuICAgICAgICB0aGlzLmQoKTtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB0aGlzLmkodGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5jbGFzcyBIdG1sVGFnSHlkcmF0aW9uIGV4dGVuZHMgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoY2xhaW1lZF9ub2RlcywgaXNfc3ZnID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoaXNfc3ZnKTtcbiAgICAgICAgdGhpcy5lID0gdGhpcy5uID0gbnVsbDtcbiAgICAgICAgdGhpcy5sID0gY2xhaW1lZF9ub2RlcztcbiAgICB9XG4gICAgYyhodG1sKSB7XG4gICAgICAgIGlmICh0aGlzLmwpIHtcbiAgICAgICAgICAgIHRoaXMubiA9IHRoaXMubDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLmMoaHRtbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaShhbmNob3IpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm4ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGluc2VydF9oeWRyYXRpb24odGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhdHRyaWJ1dGVfdG9fb2JqZWN0KGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJlc3VsdFthdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzKGVsZW1lbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBlbGVtZW50LmNoaWxkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICByZXN1bHRbbm9kZS5zbG90IHx8ICdkZWZhdWx0J10gPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGZvciBtdWx0aXBsZSBkb2N1bWVudHMgYmVjYXVzZSBhIFN2ZWx0ZSBhcHBsaWNhdGlvbiBjb3VsZCBhbHNvIGNvbnRhaW4gaWZyYW1lc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9pc3N1ZXMvMzYyNFxuY29uc3QgbWFuYWdlZF9zdHlsZXMgPSBuZXcgTWFwKCk7XG5sZXQgYWN0aXZlID0gMDtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJrc2t5YXBwL3N0cmluZy1oYXNoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICAgIGxldCBoYXNoID0gNTM4MTtcbiAgICBsZXQgaSA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5mdW5jdGlvbiBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKSB7XG4gICAgY29uc3QgaW5mbyA9IHsgc3R5bGVzaGVldDogYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSksIHJ1bGVzOiB7fSB9O1xuICAgIG1hbmFnZWRfc3R5bGVzLnNldChkb2MsIGluZm8pO1xuICAgIHJldHVybiBpbmZvO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSk7XG4gICAgY29uc3QgeyBzdHlsZXNoZWV0LCBydWxlcyB9ID0gbWFuYWdlZF9zdHlsZXMuZ2V0KGRvYykgfHwgY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uKGRvYywgbm9kZSk7XG4gICAgaWYgKCFydWxlc1tuYW1lXSkge1xuICAgICAgICBydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6ICcnfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICBjb25zdCBuZXh0ID0gcHJldmlvdXMuZmlsdGVyKG5hbWVcbiAgICAgICAgPyBhbmltID0+IGFuaW0uaW5kZXhPZihuYW1lKSA8IDAgLy8gcmVtb3ZlIHNwZWNpZmljIGFuaW1hdGlvblxuICAgICAgICA6IGFuaW0gPT4gYW5pbS5pbmRleE9mKCdfX3N2ZWx0ZScpID09PSAtMSAvLyByZW1vdmUgYWxsIFN2ZWx0ZSBhbmltYXRpb25zXG4gICAgKTtcbiAgICBjb25zdCBkZWxldGVkID0gcHJldmlvdXMubGVuZ3RoIC0gbmV4dC5sZW5ndGg7XG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBuZXh0LmpvaW4oJywgJyk7XG4gICAgICAgIGFjdGl2ZSAtPSBkZWxldGVkO1xuICAgICAgICBpZiAoIWFjdGl2ZSlcbiAgICAgICAgICAgIGNsZWFyX3J1bGVzKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgcmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFuYWdlZF9zdHlsZXMuZm9yRWFjaChpbmZvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3R5bGVzaGVldCB9ID0gaW5mbztcbiAgICAgICAgICAgIGxldCBpID0gc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKVxuICAgICAgICAgICAgICAgIHN0eWxlc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgICAgICAgICAgIGluZm8ucnVsZXMgPSB7fTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1hbmFnZWRfc3R5bGVzLmNsZWFyKCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZV9hbmltYXRpb24obm9kZSwgZnJvbSwgZm4sIHBhcmFtcykge1xuICAgIGlmICghZnJvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgdG8gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChmcm9tLmxlZnQgPT09IHRvLmxlZnQgJiYgZnJvbS5yaWdodCA9PT0gdG8ucmlnaHQgJiYgZnJvbS50b3AgPT09IHRvLnRvcCAmJiBmcm9tLmJvdHRvbSA9PT0gdG8uYm90dG9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86IHNob3VsZCB0aGlzIGJlIHNlcGFyYXRlZCBmcm9tIGRlc3RydWN0dXJpbmc/IE9yIHN0YXJ0L2VuZCBhZGRlZCB0byBwdWJsaWMgYXBpIGFuZCBkb2N1bWVudGF0aW9uP1xuICAgIHN0YXJ0OiBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOlxuICAgIGVuZCA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbiwgdGljayA9IG5vb3AsIGNzcyB9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGxldCBuYW1lO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICBuYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpO1xuICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgaWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCAmJiBub3cgPj0gZW5kKSB7XG4gICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnQoKTtcbiAgICB0aWNrKDAsIDEpO1xuICAgIHJldHVybiBzdG9wO1xufVxuZnVuY3Rpb24gZml4X3Bvc2l0aW9uKG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc3R5bGU7XG4gICAgICAgIGNvbnN0IGEgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYWRkX3RyYW5zZm9ybShub2RlLCBhKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcbiAgICBjb25zdCBiID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYS5sZWZ0ICE9PSBiLmxlZnQgfHwgYS50b3AgIT09IGIudG9wKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBgJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke2EubGVmdCAtIGIubGVmdH1weCwgJHthLnRvcCAtIGIudG9wfXB4KWA7XG4gICAgfVxufVxuXG5sZXQgY3VycmVudF9jb21wb25lbnQ7XG5mdW5jdGlvbiBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgY3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG4gICAgaWYgKCFjdXJyZW50X2NvbXBvbmVudClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBjYWxsZWQgb3V0c2lkZSBjb21wb25lbnQgaW5pdGlhbGl6YXRpb24nKTtcbiAgICByZXR1cm4gY3VycmVudF9jb21wb25lbnQ7XG59XG5mdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5iZWZvcmVfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25Nb3VudChmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9kZXN0cm95LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgIHJldHVybiAodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gVE9ETyBhcmUgdGhlcmUgc2l0dWF0aW9ucyB3aGVyZSBldmVudHMgY291bGQgYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgLy8gaW4gYSBzZXJ2ZXIgKG5vbi1ET00pIGVudmlyb25tZW50P1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgfSk7XG4gICAgICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbXBvbmVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbiAgICByZXR1cm4gY29udGV4dDtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG5mdW5jdGlvbiBnZXRBbGxDb250ZXh0cygpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dDtcbn1cbmZ1bmN0aW9uIGhhc0NvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuaGFzKGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcbiAgICB9XG59XG5cbmNvbnN0IGRpcnR5X2NvbXBvbmVudHMgPSBbXTtcbmNvbnN0IGludHJvcyA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbmNvbnN0IGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG5jb25zdCByZW5kZXJfY2FsbGJhY2tzID0gW107XG5jb25zdCBmbHVzaF9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlc29sdmVkX3Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbmxldCB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG5mdW5jdGlvbiBzY2hlZHVsZV91cGRhdGUoKSB7XG4gICAgaWYgKCF1cGRhdGVfc2NoZWR1bGVkKSB7XG4gICAgICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICByZXNvbHZlZF9wcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRpY2soKSB7XG4gICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgcmV0dXJuIHJlc29sdmVkX3Byb21pc2U7XG59XG5mdW5jdGlvbiBhZGRfcmVuZGVyX2NhbGxiYWNrKGZuKSB7XG4gICAgcmVuZGVyX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFkZF9mbHVzaF9jYWxsYmFjayhmbikge1xuICAgIGZsdXNoX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbi8vIGZsdXNoKCkgY2FsbHMgY2FsbGJhY2tzIGluIHRoaXMgb3JkZXI6XG4vLyAxLiBBbGwgYmVmb3JlVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuXG4vLyAyLiBBbGwgYmluZDp0aGlzIGNhbGxiYWNrcywgaW4gcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyAzLiBBbGwgYWZ0ZXJVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW4uIEVYQ0VQVFxuLy8gICAgZm9yIGFmdGVyVXBkYXRlcyBjYWxsZWQgZHVyaW5nIHRoZSBpbml0aWFsIG9uTW91bnQsIHdoaWNoIGFyZSBjYWxsZWQgaW5cbi8vICAgIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gU2luY2UgY2FsbGJhY2tzIG1pZ2h0IHVwZGF0ZSBjb21wb25lbnQgdmFsdWVzLCB3aGljaCBjb3VsZCB0cmlnZ2VyIGFub3RoZXJcbi8vIGNhbGwgdG8gZmx1c2goKSwgdGhlIGZvbGxvd2luZyBzdGVwcyBndWFyZCBhZ2FpbnN0IHRoaXM6XG4vLyAxLiBEdXJpbmcgYmVmb3JlVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4vLyAgICBkaXJ0eV9jb21wb25lbnRzIGFycmF5IGFuZCB3aWxsIGNhdXNlIGEgcmVlbnRyYW50IGNhbGwgdG8gZmx1c2goKS4gQmVjYXVzZVxuLy8gICAgdGhlIGZsdXNoIGluZGV4IGlzIGtlcHQgb3V0c2lkZSB0aGUgZnVuY3Rpb24sIHRoZSByZWVudHJhbnQgY2FsbCB3aWxsIHBpY2tcbi8vICAgIHVwIHdoZXJlIHRoZSBlYXJsaWVyIGNhbGwgbGVmdCBvZmYgYW5kIGdvIHRocm91Z2ggYWxsIGRpcnR5IGNvbXBvbmVudHMuIFRoZVxuLy8gICAgY3VycmVudF9jb21wb25lbnQgdmFsdWUgaXMgc2F2ZWQgYW5kIHJlc3RvcmVkIHNvIHRoYXQgdGhlIHJlZW50cmFudCBjYWxsIHdpbGxcbi8vICAgIG5vdCBpbnRlcmZlcmUgd2l0aCB0aGUgXCJwYXJlbnRcIiBmbHVzaCgpIGNhbGwuXG4vLyAyLiBiaW5kOnRoaXMgY2FsbGJhY2tzIGNhbm5vdCB0cmlnZ2VyIG5ldyBmbHVzaCgpIGNhbGxzLlxuLy8gMy4gRHVyaW5nIGFmdGVyVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgTk9UIGhhdmUgdGhlaXIgYWZ0ZXJVcGRhdGVcbi8vICAgIGNhbGxiYWNrIGNhbGxlZCBhIHNlY29uZCB0aW1lOyB0aGUgc2Vlbl9jYWxsYmFja3Mgc2V0LCBvdXRzaWRlIHRoZSBmbHVzaCgpXG4vLyAgICBmdW5jdGlvbiwgZ3VhcmFudGVlcyB0aGlzIGJlaGF2aW9yLlxuY29uc3Qgc2Vlbl9jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG5sZXQgZmx1c2hpZHggPSAwOyAvLyBEbyAqbm90KiBtb3ZlIHRoaXMgaW5zaWRlIHRoZSBmbHVzaCgpIGZ1bmN0aW9uXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBjb25zdCBzYXZlZF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIHdoaWxlIChmbHVzaGlkeCA8IGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ZsdXNoaWR4XTtcbiAgICAgICAgICAgIGZsdXNoaWR4Kys7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShjb21wb25lbnQuJCQpO1xuICAgICAgICB9XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgICBmbHVzaGlkeCA9IDA7XG4gICAgICAgIHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpXG4gICAgICAgICAgICBiaW5kaW5nX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcbiAgICAgICAgLy8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICAgICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5zbyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gICAgd2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgfVxuICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChzYXZlZF9jb21wb25lbnQpO1xufVxuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICQkLnVwZGF0ZSgpO1xuICAgICAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgICAgICBjb25zdCBkaXJ0eSA9ICQkLmRpcnR5O1xuICAgICAgICAkJC5kaXJ0eSA9IFstMV07XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LnAoJCQuY3R4LCBkaXJ0eSk7XG4gICAgICAgICQkLmFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xuICAgIH1cbn1cblxubGV0IHByb21pc2U7XG5mdW5jdGlvbiB3YWl0KCkge1xuICAgIGlmICghcHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZGlyZWN0aW9uLCBraW5kKSB7XG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuY29uc3Qgb3V0cm9pbmcgPSBuZXcgU2V0KCk7XG5sZXQgb3V0cm9zO1xuZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuICAgIG91dHJvcyA9IHtcbiAgICAgICAgcjogMCxcbiAgICAgICAgYzogW10sXG4gICAgICAgIHA6IG91dHJvcyAvLyBwYXJlbnQgZ3JvdXBcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuICAgIGlmICghb3V0cm9zLnIpIHtcbiAgICAgICAgcnVuX2FsbChvdXRyb3MuYyk7XG4gICAgfVxuICAgIG91dHJvcyA9IG91dHJvcy5wO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICBibG9jay5pKGxvY2FsKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2subykge1xuICAgICAgICBpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0cm9pbmcuYWRkKGJsb2NrKTtcbiAgICAgICAgb3V0cm9zLmMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFjaClcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suZCgxKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYmxvY2subyhsb2NhbCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuY29uc3QgbnVsbF90cmFuc2l0aW9uID0geyBkdXJhdGlvbjogMCB9O1xuZnVuY3Rpb24gY3JlYXRlX2luX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gZmFsc2U7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGxldCB0YXNrO1xuICAgIGxldCB1aWQgPSAwO1xuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MsIHVpZCsrKTtcbiAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGFzaylcbiAgICAgICAgICAgIHRhc2suYWJvcnQoKTtcbiAgICAgICAgcnVubmluZyA9IHRydWU7XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuICAgICAgICB0YXNrID0gbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCgpIHtcbiAgICAgICAgICAgIGlmIChzdGFydGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSk7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKGdvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgY29uc3QgZ3JvdXAgPSBvdXRyb3M7XG4gICAgZ3JvdXAuciArPSAxO1xuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnc3RhcnQnKSk7XG4gICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS0tZ3JvdXAucikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJlc3VsdCBpbiBgZW5kKClgIGJlaW5nIGNhbGxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xlYW4gdXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxIC0gdCwgdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgIGdvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ28oKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kKHJlc2V0KSB7XG4gICAgICAgICAgICBpZiAocmVzZXQgJiYgY29uZmlnLnRpY2spIHtcbiAgICAgICAgICAgICAgICBjb25maWcudGljaygxLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgdCA9IGludHJvID8gMCA6IDE7XG4gICAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkID0gKHByb2dyYW0uYiAtIHQpO1xuICAgICAgICBkdXJhdGlvbiAqPSBNYXRoLmFicyhkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGE6IHQsXG4gICAgICAgICAgICBiOiBwcm9ncmFtLmIsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBzdGFydDogcHJvZ3JhbS5zdGFydCxcbiAgICAgICAgICAgIGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuICAgICAgICAgICAgZ3JvdXA6IHByb2dyYW0uZ3JvdXBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oYikge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBjb25zdCBwcm9ncmFtID0ge1xuICAgICAgICAgICAgc3RhcnQ6IG5vdygpICsgZGVsYXksXG4gICAgICAgICAgICBiXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIHByb2dyYW0uZ3JvdXAgPSBvdXRyb3M7XG4gICAgICAgICAgICBvdXRyb3MuciArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIFx1MjAxNCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIFx1MjAxNCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuICAgIGNvbnN0IHRva2VuID0gaW5mby50b2tlbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCBpbmRleCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSB2YWx1ZTtcbiAgICAgICAgbGV0IGNoaWxkX2N0eCA9IGluZm8uY3R4O1xuICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9jayA9IHR5cGUgJiYgKGluZm8uY3VycmVudCA9IHR5cGUpKGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5mby5ibG9jaykge1xuICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzW2ldID09PSBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9jay5kKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgICAgICBibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuICAgICAgICAgICAgbmVlZHNfZmx1c2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8uYmxvY2sgPSBibG9jaztcbiAgICAgICAgaWYgKGluZm8uYmxvY2tzKVxuICAgICAgICAgICAgaW5mby5ibG9ja3NbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgIGlmIChuZWVkc19mbHVzaCkge1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNfcHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgICAgICBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgICAgICBpZiAoIWluZm8uaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIHdlIHByZXZpb3VzbHkgaGFkIGEgdGhlbi9jYXRjaCBibG9jaywgZGVzdHJveSBpdFxuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnBlbmRpbmcsIDApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8udGhlbikge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLnJlc29sdmVkID0gcHJvbWlzZTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVfYXdhaXRfYmxvY2tfYnJhbmNoKGluZm8sIGN0eCwgZGlydHkpIHtcbiAgICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgICBjb25zdCB7IHJlc29sdmVkIH0gPSBpbmZvO1xuICAgIGlmIChpbmZvLmN1cnJlbnQgPT09IGluZm8udGhlbikge1xuICAgICAgICBjaGlsZF9jdHhbaW5mby52YWx1ZV0gPSByZXNvbHZlZDtcbiAgICB9XG4gICAgaWYgKGluZm8uY3VycmVudCA9PT0gaW5mby5jYXRjaCkge1xuICAgICAgICBjaGlsZF9jdHhbaW5mby5lcnJvcl0gPSByZXNvbHZlZDtcbiAgICB9XG4gICAgaW5mby5ibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgOiBnbG9iYWwpO1xuXG5mdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5kKDEpO1xuICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cbmZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2gob2xkX2Jsb2NrcywgZGlydHksIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jaywgbmV4dCwgZ2V0X2NvbnRleHQpIHtcbiAgICBsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuICAgIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gICAgbGV0IGkgPSBvO1xuICAgIGNvbnN0IG9sZF9pbmRleGVzID0ge307XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcbiAgICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gICAgY29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG4gICAgaSA9IG47XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgYmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfbG9va3VwLnNldChrZXksIG5ld19ibG9ja3NbaV0gPSBibG9jayk7XG4gICAgICAgIGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpXG4gICAgICAgICAgICBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcbiAgICB9XG4gICAgY29uc3Qgd2lsbF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgYmxvY2subShub2RlLCBuZXh0KTtcbiAgICAgICAgbG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcbiAgICAgICAgbmV4dCA9IGJsb2NrLmZpcnN0O1xuICAgICAgICBuLS07XG4gICAgfVxuICAgIHdoaWxlIChvICYmIG4pIHtcbiAgICAgICAgY29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3NbbyAtIDFdO1xuICAgICAgICBjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcbiAgICAgICAgY29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG4gICAgICAgIGlmIChuZXdfYmxvY2sgPT09IG9sZF9ibG9jaykge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgbmV4dCA9IG5ld19ibG9jay5maXJzdDtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgYmxvY2tcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBkaWRfbW92ZS5hZGQobmV3X2tleSk7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbGxfbW92ZS5hZGQob2xkX2tleSk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG8tLSkge1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW29dO1xuICAgICAgICBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9ibG9jay5rZXkpKVxuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgfVxuICAgIHdoaWxlIChuKVxuICAgICAgICBpbnNlcnQobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuICAgIHJldHVybiBuZXdfYmxvY2tzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcbiAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuICAgICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2gnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3NwcmVhZF91cGRhdGUobGV2ZWxzLCB1cGRhdGVzKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge307XG4gICAgY29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcbiAgICBjb25zdCBhY2NvdW50ZWRfZm9yID0geyAkJHNjb3BlOiAxIH07XG4gICAgbGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgbyA9IGxldmVsc1tpXTtcbiAgICAgICAgY29uc3QgbiA9IHVwZGF0ZXNbaV07XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG4pKVxuICAgICAgICAgICAgICAgICAgICB0b19udWxsX291dFtrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XSA9IG5ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXZlbHNbaV0gPSBuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHVwZGF0ZSkpXG4gICAgICAgICAgICB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuICAgIHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cblxuLy8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcbmNvbnN0IGJvb2xlYW5fYXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgICdhbGxvd2Z1bGxzY3JlZW4nLFxuICAgICdhbGxvd3BheW1lbnRyZXF1ZXN0JyxcbiAgICAnYXN5bmMnLFxuICAgICdhdXRvZm9jdXMnLFxuICAgICdhdXRvcGxheScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdjb250cm9scycsXG4gICAgJ2RlZmF1bHQnLFxuICAgICdkZWZlcicsXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnZm9ybW5vdmFsaWRhdGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdpc21hcCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211dGVkJyxcbiAgICAnbm9tb2R1bGUnLFxuICAgICdub3ZhbGlkYXRlJyxcbiAgICAnb3BlbicsXG4gICAgJ3BsYXlzaW5saW5lJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3JldmVyc2VkJyxcbiAgICAnc2VsZWN0ZWQnXG5dKTtcblxuY29uc3Qgdm9pZF9lbGVtZW50X25hbWVzID0gL14oPzphcmVhfGJhc2V8YnJ8Y29sfGNvbW1hbmR8ZW1iZWR8aHJ8aW1nfGlucHV0fGtleWdlbnxsaW5rfG1ldGF8cGFyYW18c291cmNlfHRyYWNrfHdicikkLztcbmZ1bmN0aW9uIGlzX3ZvaWQobmFtZSkge1xuICAgIHJldHVybiB2b2lkX2VsZW1lbnRfbmFtZXMudGVzdChuYW1lKSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICchZG9jdHlwZSc7XG59XG5cbmNvbnN0IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gL1tcXHMnXCI+Lz1cXHV7RkREMH0tXFx1e0ZERUZ9XFx1e0ZGRkV9XFx1e0ZGRkZ9XFx1ezFGRkZFfVxcdXsxRkZGRn1cXHV7MkZGRkV9XFx1ezJGRkZGfVxcdXszRkZGRX1cXHV7M0ZGRkZ9XFx1ezRGRkZFfVxcdXs0RkZGRn1cXHV7NUZGRkV9XFx1ezVGRkZGfVxcdXs2RkZGRX1cXHV7NkZGRkZ9XFx1ezdGRkZFfVxcdXs3RkZGRn1cXHV7OEZGRkV9XFx1ezhGRkZGfVxcdXs5RkZGRX1cXHV7OUZGRkZ9XFx1e0FGRkZFfVxcdXtBRkZGRn1cXHV7QkZGRkV9XFx1e0JGRkZGfVxcdXtDRkZGRX1cXHV7Q0ZGRkZ9XFx1e0RGRkZFfVxcdXtERkZGRn1cXHV7RUZGRkV9XFx1e0VGRkZGfVxcdXtGRkZGRX1cXHV7RkZGRkZ9XFx1ezEwRkZGRX1cXHV7MTBGRkZGfV0vdTtcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI25vbmNoYXJhY3RlclxuZnVuY3Rpb24gc3ByZWFkKGFyZ3MsIGF0dHJzX3RvX2FkZCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi5hcmdzKTtcbiAgICBpZiAoYXR0cnNfdG9fYWRkKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNfdG9fYWRkID0gYXR0cnNfdG9fYWRkLmNsYXNzZXM7XG4gICAgICAgIGNvbnN0IHN0eWxlc190b19hZGQgPSBhdHRyc190b19hZGQuc3R5bGVzO1xuICAgICAgICBpZiAoY2xhc3Nlc190b19hZGQpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gY2xhc3Nlc190b19hZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzICs9ICcgJyArIGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdHlsZXNfdG9fYWRkKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5zdHlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVzX3RvX2FkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnN0eWxlID0gc3R5bGVfb2JqZWN0X3RvX3N0cmluZyhtZXJnZV9zc3Jfc3R5bGVzKGF0dHJpYnV0ZXMuc3R5bGUsIHN0eWxlc190b19hZGQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgc3RyID0gJyc7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgaWYgKGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLnRlc3QobmFtZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKVxuICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0ciArPSBgICR7bmFtZX09XCIke3ZhbHVlfVwiYDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBtZXJnZV9zc3Jfc3R5bGVzKHN0eWxlX2F0dHJpYnV0ZSwgc3R5bGVfZGlyZWN0aXZlKSB7XG4gICAgY29uc3Qgc3R5bGVfb2JqZWN0ID0ge307XG4gICAgZm9yIChjb25zdCBpbmRpdmlkdWFsX3N0eWxlIG9mIHN0eWxlX2F0dHJpYnV0ZS5zcGxpdCgnOycpKSB7XG4gICAgICAgIGNvbnN0IGNvbG9uX2luZGV4ID0gaW5kaXZpZHVhbF9zdHlsZS5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBpbmRpdmlkdWFsX3N0eWxlLnNsaWNlKDAsIGNvbG9uX2luZGV4KS50cmltKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5kaXZpZHVhbF9zdHlsZS5zbGljZShjb2xvbl9pbmRleCArIDEpLnRyaW0oKTtcbiAgICAgICAgaWYgKCFuYW1lKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHN0eWxlX29iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc3R5bGVfZGlyZWN0aXZlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVfZGlyZWN0aXZlW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN0eWxlX29iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHN0eWxlX29iamVjdFtuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGVfb2JqZWN0O1xufVxuY29uc3QgQVRUUl9SRUdFWCA9IC9bJlwiXS9nO1xuY29uc3QgQ09OVEVOVF9SRUdFWCA9IC9bJjxdL2c7XG4vKipcbiAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHBlcmZvcm1hbmNlIHNlbnNpdGl2ZSBhbmQgaGFzIGJlZW4gb3B0aW1pemVkXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL3B1bGwvNTcwMVxuICovXG5mdW5jdGlvbiBlc2NhcGUodmFsdWUsIGlzX2F0dHIgPSBmYWxzZSkge1xuICAgIGNvbnN0IHN0ciA9IFN0cmluZyh2YWx1ZSk7XG4gICAgY29uc3QgcGF0dGVybiA9IGlzX2F0dHIgPyBBVFRSX1JFR0VYIDogQ09OVEVOVF9SRUdFWDtcbiAgICBwYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gICAgbGV0IGVzY2FwZWQgPSAnJztcbiAgICBsZXQgbGFzdCA9IDA7XG4gICAgd2hpbGUgKHBhdHRlcm4udGVzdChzdHIpKSB7XG4gICAgICAgIGNvbnN0IGkgPSBwYXR0ZXJuLmxhc3RJbmRleCAtIDE7XG4gICAgICAgIGNvbnN0IGNoID0gc3RyW2ldO1xuICAgICAgICBlc2NhcGVkICs9IHN0ci5zdWJzdHJpbmcobGFzdCwgaSkgKyAoY2ggPT09ICcmJyA/ICcmYW1wOycgOiAoY2ggPT09ICdcIicgPyAnJnF1b3Q7JyA6ICcmbHQ7JykpO1xuICAgICAgICBsYXN0ID0gaSArIDE7XG4gICAgfVxuICAgIHJldHVybiBlc2NhcGVkICsgc3RyLnN1YnN0cmluZyhsYXN0KTtcbn1cbmZ1bmN0aW9uIGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUodmFsdWUpIHtcbiAgICAvLyBrZWVwIGJvb2xlYW5zLCBudWxsLCBhbmQgdW5kZWZpbmVkIGZvciB0aGUgc2FrZSBvZiBgc3ByZWFkYFxuICAgIGNvbnN0IHNob3VsZF9lc2NhcGUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8ICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKTtcbiAgICByZXR1cm4gc2hvdWxkX2VzY2FwZSA/IGVzY2FwZSh2YWx1ZSwgdHJ1ZSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGVzY2FwZV9vYmplY3Qob2JqKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZShvYmpba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBlYWNoKGl0ZW1zLCBmbikge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBmbihpdGVtc1tpXSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBtaXNzaW5nX2NvbXBvbmVudCA9IHtcbiAgICAkJHJlbmRlcjogKCkgPT4gJydcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZV9jb21wb25lbnQoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgaWYgKCFjb21wb25lbnQgfHwgIWNvbXBvbmVudC4kJHJlbmRlcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnKVxuICAgICAgICAgICAgbmFtZSArPSAnIHRoaXM9ey4uLn0nO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDwke25hbWV9PiBpcyBub3QgYSB2YWxpZCBTU1IgY29tcG9uZW50LiBZb3UgbWF5IG5lZWQgdG8gcmV2aWV3IHlvdXIgYnVpbGQgY29uZmlnIHRvIGVuc3VyZSB0aGF0IGRlcGVuZGVuY2llcyBhcmUgY29tcGlsZWQsIHJhdGhlciB0aGFuIGltcG9ydGVkIGFzIHByZS1jb21waWxlZCBtb2R1bGVzYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChjb250ZXh0IHx8IChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pKSxcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZGlzY2FyZGVkXG4gICAgICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuICAgICAgICBjb25zdCBodG1sID0gZm4ocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyOiAocHJvcHMgPSB7fSwgeyAkJHNsb3RzID0ge30sIGNvbnRleHQgPSBuZXcgTWFwKCkgfSA9IHt9KSA9PiB7XG4gICAgICAgICAgICBvbl9kZXN0cm95ID0gW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHRpdGxlOiAnJywgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sICQkc2xvdHMsIGNvbnRleHQpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGFzc2lnbm1lbnQgPSAoYm9vbGVhbiAmJiB2YWx1ZSA9PT0gdHJ1ZSkgPyAnJyA6IGA9XCIke2VzY2FwZSh2YWx1ZSwgdHJ1ZSl9XCJgO1xuICAgIHJldHVybiBgICR7bmFtZX0ke2Fzc2lnbm1lbnR9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogJyc7XG59XG5mdW5jdGlvbiBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZV9vYmplY3QpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHN0eWxlX29iamVjdFtrZXldKVxuICAgICAgICAubWFwKGtleSA9PiBgJHtrZXl9OiAke3N0eWxlX29iamVjdFtrZXldfTtgKVxuICAgICAgICAuam9pbignICcpO1xufVxuZnVuY3Rpb24gYWRkX3N0eWxlcyhzdHlsZV9vYmplY3QpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCk7XG4gICAgcmV0dXJuIHN0eWxlcyA/IGAgc3R5bGU9XCIke3N0eWxlc31cImAgOiAnJztcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IsIGN1c3RvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBvbl9tb3VudCwgb25fZGVzdHJveSwgYWZ0ZXJfdXBkYXRlIH0gPSBjb21wb25lbnQuJCQ7XG4gICAgZnJhZ21lbnQgJiYgZnJhZ21lbnQubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgaWYgKCFjdXN0b21FbGVtZW50KSB7XG4gICAgICAgIC8vIG9uTW91bnQgaGFwcGVucyBiZWZvcmUgdGhlIGluaXRpYWwgYWZ0ZXJVcGRhdGVcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdfb25fZGVzdHJveSA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICBpZiAob25fZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIG9uX2Rlc3Ryb3kucHVzaCguLi5uZXdfb25fZGVzdHJveSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFZGdlIGNhc2UgLSBjb21wb25lbnQgd2FzIGRlc3Ryb3llZCBpbW1lZGlhdGVseSxcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGxpa2VseSBhcyBhIHJlc3VsdCBvZiBhIGJpbmRpbmcgaW5pdGlhbGlzaW5nXG4gICAgICAgICAgICAgICAgcnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gZGVzdHJveV9jb21wb25lbnQoY29tcG9uZW50LCBkZXRhY2hpbmcpIHtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJDtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgcnVuX2FsbCgkJC5vbl9kZXN0cm95KTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuZChkZXRhY2hpbmcpO1xuICAgICAgICAvLyBUT0RPIG51bGwgb3V0IG90aGVyIHJlZnMsIGluY2x1ZGluZyBjb21wb25lbnQuJCQgKGJ1dCBuZWVkIHRvXG4gICAgICAgIC8vIHByZXNlcnZlIGZpbmFsIHN0YXRlPylcbiAgICAgICAgJCQub25fZGVzdHJveSA9ICQkLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgJCQuY3R4ID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpIHtcbiAgICBpZiAoY29tcG9uZW50LiQkLmRpcnR5WzBdID09PSAtMSkge1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgICAgIGNvbXBvbmVudC4kJC5kaXJ0eS5maWxsKDApO1xuICAgIH1cbiAgICBjb21wb25lbnQuJCQuZGlydHlbKGkgLyAzMSkgfCAwXSB8PSAoMSA8PCAoaSAlIDMxKSk7XG59XG5mdW5jdGlvbiBpbml0KGNvbXBvbmVudCwgb3B0aW9ucywgaW5zdGFuY2UsIGNyZWF0ZV9mcmFnbWVudCwgbm90X2VxdWFsLCBwcm9wcywgYXBwZW5kX3N0eWxlcywgZGlydHkgPSBbLTFdKSB7XG4gICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkID0ge1xuICAgICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgICAgY3R4OiBudWxsLFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICBwcm9wcyxcbiAgICAgICAgdXBkYXRlOiBub29wLFxuICAgICAgICBub3RfZXF1YWwsXG4gICAgICAgIGJvdW5kOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgLy8gbGlmZWN5Y2xlXG4gICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgb25fZGVzdHJveTogW10sXG4gICAgICAgIG9uX2Rpc2Nvbm5lY3Q6IFtdLFxuICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgY29udGV4dDogbmV3IE1hcChvcHRpb25zLmNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuICAgICAgICAvLyBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgZGlydHksXG4gICAgICAgIHNraXBfYm91bmQ6IGZhbHNlLFxuICAgICAgICByb290OiBvcHRpb25zLnRhcmdldCB8fCBwYXJlbnRfY29tcG9uZW50LiQkLnJvb3RcbiAgICB9O1xuICAgIGFwcGVuZF9zdHlsZXMgJiYgYXBwZW5kX3N0eWxlcygkJC5yb290KTtcbiAgICBsZXQgcmVhZHkgPSBmYWxzZTtcbiAgICAkJC5jdHggPSBpbnN0YW5jZVxuICAgICAgICA/IGluc3RhbmNlKGNvbXBvbmVudCwgb3B0aW9ucy5wcm9wcyB8fCB7fSwgKGksIHJldCwgLi4ucmVzdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXN0Lmxlbmd0aCA/IHJlc3RbMF0gOiByZXQ7XG4gICAgICAgICAgICBpZiAoJCQuY3R4ICYmIG5vdF9lcXVhbCgkJC5jdHhbaV0sICQkLmN0eFtpXSA9IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICghJCQuc2tpcF9ib3VuZCAmJiAkJC5ib3VuZFtpXSlcbiAgICAgICAgICAgICAgICAgICAgJCQuYm91bmRbaV0odmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZWFkeSlcbiAgICAgICAgICAgICAgICAgICAgbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSlcbiAgICAgICAgOiBbXTtcbiAgICAkJC51cGRhdGUoKTtcbiAgICByZWFkeSA9IHRydWU7XG4gICAgcnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcbiAgICAvLyBgZmFsc2VgIGFzIGEgc3BlY2lhbCBjYXNlIG9mIG5vIERPTSBjb21wb25lbnRcbiAgICAkJC5mcmFnbWVudCA9IGNyZWF0ZV9mcmFnbWVudCA/IGNyZWF0ZV9mcmFnbWVudCgkJC5jdHgpIDogZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7XG4gICAgICAgIGlmIChvcHRpb25zLmh5ZHJhdGUpIHtcbiAgICAgICAgICAgIHN0YXJ0X2h5ZHJhdGluZygpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbihvcHRpb25zLnRhcmdldCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQubChub2Rlcyk7XG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKGRldGFjaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuYygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmludHJvKVxuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgICBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zLnRhcmdldCwgb3B0aW9ucy5hbmNob3IsIG9wdGlvbnMuY3VzdG9tRWxlbWVudCk7XG4gICAgICAgIGVuZF9oeWRyYXRpbmcoKTtcbiAgICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xufVxubGV0IFN2ZWx0ZUVsZW1lbnQ7XG5pZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgU3ZlbHRlRWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb25fbW91bnQgfSA9IHRoaXMuJCQ7XG4gICAgICAgICAgICB0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuJCQuc2xvdHRlZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLiQkLnNsb3R0ZWRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIF9vbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbYXR0cl0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHJ1bl9hbGwodGhpcy4kJC5vbl9kaXNjb25uZWN0KTtcbiAgICAgICAgfVxuICAgICAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICAgICAgdGhpcy4kZGVzdHJveSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHNob3VsZCB0aGlzIGRlbGVnYXRlIHRvIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMuIFVzZWQgd2hlbiBkZXY9ZmFsc2UuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoX2Rldih0eXBlLCBkZXRhaWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCBPYmplY3QuYXNzaWduKHsgdmVyc2lvbjogJzMuNDkuMCcgfSwgZGV0YWlsKSwgeyBidWJibGVzOiB0cnVlIH0pKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9kZXYodGFyZ2V0LCBub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmQodGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbl9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBkZXRhY2hfZGV2KG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZScsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uKSB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IFsnY2FwdHVyZSddIDogb3B0aW9ucyA/IEFycmF5LmZyb20oT2JqZWN0LmtleXMob3B0aW9ucykpIDogW107XG4gICAgaWYgKGhhc19wcmV2ZW50X2RlZmF1bHQpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdwcmV2ZW50RGVmYXVsdCcpO1xuICAgIGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICBjb25zdCBkaXNwb3NlID0gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG4gICAgZWxzZVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldEF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlLCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRQcm9wZXJ0eScsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YXNldCcsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcbiAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9hcmd1bWVudChhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ3N0cmluZycgJiYgIShhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gYXJnKSkge1xuICAgICAgICBsZXQgbXNnID0gJ3sjZWFjaH0gb25seSBpdGVyYXRlcyBvdmVyIGFycmF5LWxpa2Ugb2JqZWN0cy4nO1xuICAgICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmcgJiYgU3ltYm9sLml0ZXJhdG9yIGluIGFyZykge1xuICAgICAgICAgICAgbXNnICs9ICcgWW91IGNhbiB1c2UgYSBzcHJlYWQgdG8gY29udmVydCB0aGlzIGl0ZXJhYmxlIGludG8gYW4gYXJyYXkuJztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zbG90cyhuYW1lLCBzbG90LCBrZXlzKSB7XG4gICAgZm9yIChjb25zdCBzbG90X2tleSBvZiBPYmplY3Qua2V5cyhzbG90KSkge1xuICAgICAgICBpZiAoIX5rZXlzLmluZGV4T2Yoc2xvdF9rZXkpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYDwke25hbWV9PiByZWNlaXZlZCBhbiB1bmV4cGVjdGVkIHNsb3QgXCIke3Nsb3Rfa2V5fVwiLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfZHluYW1pY19lbGVtZW50KHRhZykge1xuICAgIGNvbnN0IGlzX3N0cmluZyA9IHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnO1xuICAgIGlmICh0YWcgJiYgIWlzX3N0cmluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxzdmVsdGU6ZWxlbWVudD4gZXhwZWN0cyBcInRoaXNcIiBhdHRyaWJ1dGUgdG8gYmUgYSBzdHJpbmcuJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfdm9pZF9keW5hbWljX2VsZW1lbnQodGFnKSB7XG4gICAgaWYgKHRhZyAmJiBpc192b2lkKHRhZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8c3ZlbHRlOmVsZW1lbnQgdGhpcz1cIiR7dGFnfVwiPiBpcyBzZWxmLWNsb3NpbmcgYW5kIGNhbm5vdCBoYXZlIGNvbnRlbnQuYCk7XG4gICAgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cyB3aXRoIHNvbWUgbWlub3IgZGV2LWVuaGFuY2VtZW50cy4gVXNlZCB3aGVuIGRldj10cnVlLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIndGFyZ2V0JyBpcyBhIHJlcXVpcmVkIG9wdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuJGRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ29tcG9uZW50IHdhcyBhbHJlYWR5IGRlc3Ryb3llZCcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJGNhcHR1cmVfc3RhdGUoKSB7IH1cbiAgICAkaW5qZWN0X3N0YXRlKCkgeyB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgdG8gY3JlYXRlIHN0cm9uZ2x5IHR5cGVkIFN2ZWx0ZSBjb21wb25lbnRzLlxuICogVGhpcyBvbmx5IGV4aXN0cyBmb3IgdHlwaW5nIHB1cnBvc2VzIGFuZCBzaG91bGQgYmUgdXNlZCBpbiBgLmQudHNgIGZpbGVzLlxuICpcbiAqICMjIyBFeGFtcGxlOlxuICpcbiAqIFlvdSBoYXZlIGNvbXBvbmVudCBsaWJyYXJ5IG9uIG5wbSBjYWxsZWQgYGNvbXBvbmVudC1saWJyYXJ5YCwgZnJvbSB3aGljaFxuICogeW91IGV4cG9ydCBhIGNvbXBvbmVudCBjYWxsZWQgYE15Q29tcG9uZW50YC4gRm9yIFN2ZWx0ZStUeXBlU2NyaXB0IHVzZXJzLFxuICogeW91IHdhbnQgdG8gcHJvdmlkZSB0eXBpbmdzLiBUaGVyZWZvcmUgeW91IGNyZWF0ZSBhIGBpbmRleC5kLnRzYDpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBTdmVsdGVDb21wb25lbnRUeXBlZCB9IGZyb20gXCJzdmVsdGVcIjtcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkPHtmb286IHN0cmluZ30+IHt9XG4gKiBgYGBcbiAqIFR5cGluZyB0aGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciBJREVzIGxpa2UgVlMgQ29kZSB3aXRoIHRoZSBTdmVsdGUgZXh0ZW5zaW9uXG4gKiB0byBwcm92aWRlIGludGVsbGlzZW5zZSBhbmQgdG8gdXNlIHRoZSBjb21wb25lbnQgbGlrZSB0aGlzIGluIGEgU3ZlbHRlIGZpbGVcbiAqIHdpdGggVHlwZVNjcmlwdDpcbiAqIGBgYHN2ZWx0ZVxuICogPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAqIFx0aW1wb3J0IHsgTXlDb21wb25lbnQgfSBmcm9tIFwiY29tcG9uZW50LWxpYnJhcnlcIjtcbiAqIDwvc2NyaXB0PlxuICogPE15Q29tcG9uZW50IGZvbz17J2Jhcid9IC8+XG4gKiBgYGBcbiAqXG4gKiAjIyMjIFdoeSBub3QgbWFrZSB0aGlzIHBhcnQgb2YgYFN2ZWx0ZUNvbXBvbmVudChEZXYpYD9cbiAqIEJlY2F1c2VcbiAqIGBgYHRzXG4gKiBjbGFzcyBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogY29uc3QgY29tcG9uZW50OiB0eXBlb2YgU3ZlbHRlQ29tcG9uZW50ID0gQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQ7XG4gKiBgYGBcbiAqIHdpbGwgdGhyb3cgYSB0eXBlIGVycm9yLCBzbyB3ZSBuZWVkIHRvIHNlcGFyYXRlIHRoZSBtb3JlIHN0cmljdGx5IHR5cGVkIGNsYXNzLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnRUeXBlZCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudERldiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsb29wX2d1YXJkKHRpbWVvdXQpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCcpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgSHRtbFRhZywgSHRtbFRhZ0h5ZHJhdGlvbiwgU3ZlbHRlQ29tcG9uZW50LCBTdmVsdGVDb21wb25lbnREZXYsIFN2ZWx0ZUNvbXBvbmVudFR5cGVkLCBTdmVsdGVFbGVtZW50LCBhY3Rpb25fZGVzdHJveWVyLCBhZGRfYXR0cmlidXRlLCBhZGRfY2xhc3NlcywgYWRkX2ZsdXNoX2NhbGxiYWNrLCBhZGRfbG9jYXRpb24sIGFkZF9yZW5kZXJfY2FsbGJhY2ssIGFkZF9yZXNpemVfbGlzdGVuZXIsIGFkZF9zdHlsZXMsIGFkZF90cmFuc2Zvcm0sIGFmdGVyVXBkYXRlLCBhcHBlbmQsIGFwcGVuZF9kZXYsIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0LCBhcHBlbmRfaHlkcmF0aW9uLCBhcHBlbmRfaHlkcmF0aW9uX2RldiwgYXBwZW5kX3N0eWxlcywgYXNzaWduLCBhdHRyLCBhdHRyX2RldiwgYXR0cmlidXRlX3RvX29iamVjdCwgYmVmb3JlVXBkYXRlLCBiaW5kLCBiaW5kaW5nX2NhbGxiYWNrcywgYmxhbmtfb2JqZWN0LCBidWJibGUsIGNoZWNrX291dHJvcywgY2hpbGRyZW4sIGNsYWltX2NvbXBvbmVudCwgY2xhaW1fZWxlbWVudCwgY2xhaW1faHRtbF90YWcsIGNsYWltX3NwYWNlLCBjbGFpbV9zdmdfZWxlbWVudCwgY2xhaW1fdGV4dCwgY2xlYXJfbG9vcHMsIGNvbXBvbmVudF9zdWJzY3JpYmUsIGNvbXB1dGVfcmVzdF9wcm9wcywgY29tcHV0ZV9zbG90cywgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBjcmVhdGVfYW5pbWF0aW9uLCBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uLCBjcmVhdGVfY29tcG9uZW50LCBjcmVhdGVfaW5fdHJhbnNpdGlvbiwgY3JlYXRlX291dF90cmFuc2l0aW9uLCBjcmVhdGVfc2xvdCwgY3JlYXRlX3Nzcl9jb21wb25lbnQsIGN1cnJlbnRfY29tcG9uZW50LCBjdXN0b21fZXZlbnQsIGRhdGFzZXRfZGV2LCBkZWJ1ZywgZGVzdHJveV9ibG9jaywgZGVzdHJveV9jb21wb25lbnQsIGRlc3Ryb3lfZWFjaCwgZGV0YWNoLCBkZXRhY2hfYWZ0ZXJfZGV2LCBkZXRhY2hfYmVmb3JlX2RldiwgZGV0YWNoX2JldHdlZW5fZGV2LCBkZXRhY2hfZGV2LCBkaXJ0eV9jb21wb25lbnRzLCBkaXNwYXRjaF9kZXYsIGVhY2gsIGVsZW1lbnQsIGVsZW1lbnRfaXMsIGVtcHR5LCBlbmRfaHlkcmF0aW5nLCBlc2NhcGUsIGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUsIGVzY2FwZV9vYmplY3QsIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMsIGZpeF9hbmRfZGVzdHJveV9ibG9jaywgZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jaywgZml4X3Bvc2l0aW9uLCBmbHVzaCwgZ2V0QWxsQ29udGV4dHMsIGdldENvbnRleHQsIGdldF9hbGxfZGlydHlfZnJvbV9zY29wZSwgZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUsIGdldF9jdXJyZW50X2NvbXBvbmVudCwgZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cywgZ2V0X3Jvb3RfZm9yX3N0eWxlLCBnZXRfc2xvdF9jaGFuZ2VzLCBnZXRfc3ByZWFkX29iamVjdCwgZ2V0X3NwcmVhZF91cGRhdGUsIGdldF9zdG9yZV92YWx1ZSwgZ2xvYmFscywgZ3JvdXBfb3V0cm9zLCBoYW5kbGVfcHJvbWlzZSwgaGFzQ29udGV4dCwgaGFzX3Byb3AsIGlkZW50aXR5LCBpbml0LCBpbnNlcnQsIGluc2VydF9kZXYsIGluc2VydF9oeWRyYXRpb24sIGluc2VydF9oeWRyYXRpb25fZGV2LCBpbnRyb3MsIGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLCBpc19jbGllbnQsIGlzX2Nyb3Nzb3JpZ2luLCBpc19lbXB0eSwgaXNfZnVuY3Rpb24sIGlzX3Byb21pc2UsIGlzX3ZvaWQsIGxpc3RlbiwgbGlzdGVuX2RldiwgbG9vcCwgbG9vcF9ndWFyZCwgbWVyZ2Vfc3NyX3N0eWxlcywgbWlzc2luZ19jb21wb25lbnQsIG1vdW50X2NvbXBvbmVudCwgbm9vcCwgbm90X2VxdWFsLCBub3csIG51bGxfdG9fZW1wdHksIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMsIG9uRGVzdHJveSwgb25Nb3VudCwgb25jZSwgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIHByZXZlbnRfZGVmYXVsdCwgcHJvcF9kZXYsIHF1ZXJ5X3NlbGVjdG9yX2FsbCwgcmFmLCBydW4sIHJ1bl9hbGwsIHNhZmVfbm90X2VxdWFsLCBzY2hlZHVsZV91cGRhdGUsIHNlbGVjdF9tdWx0aXBsZV92YWx1ZSwgc2VsZWN0X29wdGlvbiwgc2VsZWN0X29wdGlvbnMsIHNlbGVjdF92YWx1ZSwgc2VsZiwgc2V0Q29udGV4dCwgc2V0X2F0dHJpYnV0ZXMsIHNldF9jdXJyZW50X2NvbXBvbmVudCwgc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEsIHNldF9kYXRhLCBzZXRfZGF0YV9kZXYsIHNldF9pbnB1dF90eXBlLCBzZXRfaW5wdXRfdmFsdWUsIHNldF9ub3csIHNldF9yYWYsIHNldF9zdG9yZV92YWx1ZSwgc2V0X3N0eWxlLCBzZXRfc3ZnX2F0dHJpYnV0ZXMsIHNwYWNlLCBzcHJlYWQsIHNyY191cmxfZXF1YWwsIHN0YXJ0X2h5ZHJhdGluZywgc3RvcF9wcm9wYWdhdGlvbiwgc3Vic2NyaWJlLCBzdmdfZWxlbWVudCwgdGV4dCwgdGljaywgdGltZV9yYW5nZXNfdG9fYXJyYXksIHRvX251bWJlciwgdG9nZ2xlX2NsYXNzLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCwgdHJ1c3RlZCwgdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaCwgdXBkYXRlX2tleWVkX2VhY2gsIHVwZGF0ZV9zbG90LCB1cGRhdGVfc2xvdF9iYXNlLCB2YWxpZGF0ZV9jb21wb25lbnQsIHZhbGlkYXRlX2R5bmFtaWNfZWxlbWVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHZhbGlkYXRlX3ZvaWRfZHluYW1pY19lbGVtZW50LCB4bGlua19hdHRyIH07XG4iLCAiZXhwb3J0IHsgaWRlbnRpdHkgYXMgbGluZWFyIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXgubWpzJztcblxuLypcbkFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0dGRlc2xcbkRpc3RyaWJ1dGVkIHVuZGVyIE1JVCBMaWNlbnNlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZGVzbC9lYXNlcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4qL1xuZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1OCAqIDEuNTI1O1xuICAgIGlmICgodCAqPSAyKSA8IDEpXG4gICAgICAgIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSk7XG4gICAgcmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDIpO1xufVxuZnVuY3Rpb24gYmFja0luKHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbn1cbmZ1bmN0aW9uIGJhY2tPdXQodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiAtLXQgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xufVxuZnVuY3Rpb24gYm91bmNlT3V0KHQpIHtcbiAgICBjb25zdCBhID0gNC4wIC8gMTEuMDtcbiAgICBjb25zdCBiID0gOC4wIC8gMTEuMDtcbiAgICBjb25zdCBjID0gOS4wIC8gMTAuMDtcbiAgICBjb25zdCBjYSA9IDQzNTYuMCAvIDM2MS4wO1xuICAgIGNvbnN0IGNiID0gMzU0NDIuMCAvIDE4MDUuMDtcbiAgICBjb25zdCBjYyA9IDE2MDYxLjAgLyAxODA1LjA7XG4gICAgY29uc3QgdDIgPSB0ICogdDtcbiAgICByZXR1cm4gdCA8IGFcbiAgICAgICAgPyA3LjU2MjUgKiB0MlxuICAgICAgICA6IHQgPCBiXG4gICAgICAgICAgICA/IDkuMDc1ICogdDIgLSA5LjkgKiB0ICsgMy40XG4gICAgICAgICAgICA6IHQgPCBjXG4gICAgICAgICAgICAgICAgPyBjYSAqIHQyIC0gY2IgKiB0ICsgY2NcbiAgICAgICAgICAgICAgICA6IDEwLjggKiB0ICogdCAtIDIwLjUyICogdCArIDEwLjcyO1xufVxuZnVuY3Rpb24gYm91bmNlSW5PdXQodCkge1xuICAgIHJldHVybiB0IDwgMC41XG4gICAgICAgID8gMC41ICogKDEuMCAtIGJvdW5jZU91dCgxLjAgLSB0ICogMi4wKSlcbiAgICAgICAgOiAwLjUgKiBib3VuY2VPdXQodCAqIDIuMCAtIDEuMCkgKyAwLjU7XG59XG5mdW5jdGlvbiBib3VuY2VJbih0KSB7XG4gICAgcmV0dXJuIDEuMCAtIGJvdW5jZU91dCgxLjAgLSB0KTtcbn1cbmZ1bmN0aW9uIGNpcmNJbk91dCh0KSB7XG4gICAgaWYgKCh0ICo9IDIpIDwgMSlcbiAgICAgICAgcmV0dXJuIC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKTtcbiAgICByZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpO1xufVxuZnVuY3Rpb24gY2lyY0luKHQpIHtcbiAgICByZXR1cm4gMS4wIC0gTWF0aC5zcXJ0KDEuMCAtIHQgKiB0KTtcbn1cbmZ1bmN0aW9uIGNpcmNPdXQodCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xufVxuZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gICAgcmV0dXJuIHQgPCAwLjUgPyA0LjAgKiB0ICogdCAqIHQgOiAwLjUgKiBNYXRoLnBvdygyLjAgKiB0IC0gMi4wLCAzLjApICsgMS4wO1xufVxuZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdDtcbn1cbmZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgICBjb25zdCBmID0gdCAtIDEuMDtcbiAgICByZXR1cm4gZiAqIGYgKiBmICsgMS4wO1xufVxuZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNVxuICAgICAgICA/IDAuNSAqXG4gICAgICAgICAgICBNYXRoLnNpbigoKCsxMy4wICogTWF0aC5QSSkgLyAyKSAqIDIuMCAqIHQpICpcbiAgICAgICAgICAgIE1hdGgucG93KDIuMCwgMTAuMCAqICgyLjAgKiB0IC0gMS4wKSlcbiAgICAgICAgOiAwLjUgKlxuICAgICAgICAgICAgTWF0aC5zaW4oKCgtMTMuMCAqIE1hdGguUEkpIC8gMikgKiAoMi4wICogdCAtIDEuMCArIDEuMCkpICpcbiAgICAgICAgICAgIE1hdGgucG93KDIuMCwgLTEwLjAgKiAoMi4wICogdCAtIDEuMCkpICtcbiAgICAgICAgICAgIDEuMDtcbn1cbmZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgcmV0dXJuIE1hdGguc2luKCgxMy4wICogdCAqIE1hdGguUEkpIC8gMikgKiBNYXRoLnBvdygyLjAsIDEwLjAgKiAodCAtIDEuMCkpO1xufVxuZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XG4gICAgcmV0dXJuIChNYXRoLnNpbigoLTEzLjAgKiAodCArIDEuMCkgKiBNYXRoLlBJKSAvIDIpICogTWF0aC5wb3coMi4wLCAtMTAuMCAqIHQpICsgMS4wKTtcbn1cbmZ1bmN0aW9uIGV4cG9Jbk91dCh0KSB7XG4gICAgcmV0dXJuIHQgPT09IDAuMCB8fCB0ID09PSAxLjBcbiAgICAgICAgPyB0XG4gICAgICAgIDogdCA8IDAuNVxuICAgICAgICAgICAgPyArMC41ICogTWF0aC5wb3coMi4wLCAyMC4wICogdCAtIDEwLjApXG4gICAgICAgICAgICA6IC0wLjUgKiBNYXRoLnBvdygyLjAsIDEwLjAgLSB0ICogMjAuMCkgKyAxLjA7XG59XG5mdW5jdGlvbiBleHBvSW4odCkge1xuICAgIHJldHVybiB0ID09PSAwLjAgPyB0IDogTWF0aC5wb3coMi4wLCAxMC4wICogKHQgLSAxLjApKTtcbn1cbmZ1bmN0aW9uIGV4cG9PdXQodCkge1xuICAgIHJldHVybiB0ID09PSAxLjAgPyB0IDogMS4wIC0gTWF0aC5wb3coMi4wLCAtMTAuMCAqIHQpO1xufVxuZnVuY3Rpb24gcXVhZEluT3V0KHQpIHtcbiAgICB0IC89IDAuNTtcbiAgICBpZiAodCA8IDEpXG4gICAgICAgIHJldHVybiAwLjUgKiB0ICogdDtcbiAgICB0LS07XG4gICAgcmV0dXJuIC0wLjUgKiAodCAqICh0IC0gMikgLSAxKTtcbn1cbmZ1bmN0aW9uIHF1YWRJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0O1xufVxuZnVuY3Rpb24gcXVhZE91dCh0KSB7XG4gICAgcmV0dXJuIC10ICogKHQgLSAyLjApO1xufVxuZnVuY3Rpb24gcXVhcnRJbk91dCh0KSB7XG4gICAgcmV0dXJuIHQgPCAwLjVcbiAgICAgICAgPyArOC4wICogTWF0aC5wb3codCwgNC4wKVxuICAgICAgICA6IC04LjAgKiBNYXRoLnBvdyh0IC0gMS4wLCA0LjApICsgMS4wO1xufVxuZnVuY3Rpb24gcXVhcnRJbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHQsIDQuMCk7XG59XG5mdW5jdGlvbiBxdWFydE91dCh0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHQgLSAxLjAsIDMuMCkgKiAoMS4wIC0gdCkgKyAxLjA7XG59XG5mdW5jdGlvbiBxdWludEluT3V0KHQpIHtcbiAgICBpZiAoKHQgKj0gMikgPCAxKVxuICAgICAgICByZXR1cm4gMC41ICogdCAqIHQgKiB0ICogdCAqIHQ7XG4gICAgcmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKTtcbn1cbmZ1bmN0aW9uIHF1aW50SW4odCkge1xuICAgIHJldHVybiB0ICogdCAqIHQgKiB0ICogdDtcbn1cbmZ1bmN0aW9uIHF1aW50T3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqIHQgKiB0ICogdCArIDE7XG59XG5mdW5jdGlvbiBzaW5lSW5PdXQodCkge1xuICAgIHJldHVybiAtMC41ICogKE1hdGguY29zKE1hdGguUEkgKiB0KSAtIDEpO1xufVxuZnVuY3Rpb24gc2luZUluKHQpIHtcbiAgICBjb25zdCB2ID0gTWF0aC5jb3ModCAqIE1hdGguUEkgKiAwLjUpO1xuICAgIGlmIChNYXRoLmFicyh2KSA8IDFlLTE0KVxuICAgICAgICByZXR1cm4gMTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiAxIC0gdjtcbn1cbmZ1bmN0aW9uIHNpbmVPdXQodCkge1xuICAgIHJldHVybiBNYXRoLnNpbigodCAqIE1hdGguUEkpIC8gMik7XG59XG5cbmV4cG9ydCB7IGJhY2tJbiwgYmFja0luT3V0LCBiYWNrT3V0LCBib3VuY2VJbiwgYm91bmNlSW5PdXQsIGJvdW5jZU91dCwgY2lyY0luLCBjaXJjSW5PdXQsIGNpcmNPdXQsIGN1YmljSW4sIGN1YmljSW5PdXQsIGN1YmljT3V0LCBlbGFzdGljSW4sIGVsYXN0aWNJbk91dCwgZWxhc3RpY091dCwgZXhwb0luLCBleHBvSW5PdXQsIGV4cG9PdXQsIHF1YWRJbiwgcXVhZEluT3V0LCBxdWFkT3V0LCBxdWFydEluLCBxdWFydEluT3V0LCBxdWFydE91dCwgcXVpbnRJbiwgcXVpbnRJbk91dCwgcXVpbnRPdXQsIHNpbmVJbiwgc2luZUluT3V0LCBzaW5lT3V0IH07XG4iLCAiaW1wb3J0IHsgY3ViaWNJbk91dCwgbGluZWFyLCBjdWJpY091dCB9IGZyb20gJy4uL2Vhc2luZy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNfZnVuY3Rpb24sIGFzc2lnbiB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cblxuZnVuY3Rpb24gYmx1cihub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljSW5PdXQsIGFtb3VudCA9IDUsIG9wYWNpdHkgPSAwIH0gPSB7fSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB0YXJnZXRfb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgIGNvbnN0IGYgPSBzdHlsZS5maWx0ZXIgPT09ICdub25lJyA/ICcnIDogc3R5bGUuZmlsdGVyO1xuICAgIGNvbnN0IG9kID0gdGFyZ2V0X29wYWNpdHkgKiAoMSAtIG9wYWNpdHkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6IChfdCwgdSkgPT4gYG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSAob2QgKiB1KX07IGZpbHRlcjogJHtmfSBibHVyKCR7dSAqIGFtb3VudH1weCk7YFxuICAgIH07XG59XG5mdW5jdGlvbiBmYWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gbGluZWFyIH0gPSB7fSkge1xuICAgIGNvbnN0IG8gPSArZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5vcGFjaXR5O1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6IHQgPT4gYG9wYWNpdHk6ICR7dCAqIG99YFxuICAgIH07XG59XG5mdW5jdGlvbiBmbHkobm9kZSwgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBjdWJpY091dCwgeCA9IDAsIHkgPSAwLCBvcGFjaXR5ID0gMCB9ID0ge30pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgY29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgIGNvbnN0IG9kID0gdGFyZ2V0X29wYWNpdHkgKiAoMSAtIG9wYWNpdHkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6ICh0LCB1KSA9PiBgXG5cdFx0XHR0cmFuc2Zvcm06ICR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHsoMSAtIHQpICogeH1weCwgJHsoMSAtIHQpICogeX1weCk7XG5cdFx0XHRvcGFjaXR5OiAke3RhcmdldF9vcGFjaXR5IC0gKG9kICogdSl9YFxuICAgIH07XG59XG5mdW5jdGlvbiBzbGlkZShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0IH0gPSB7fSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VGbG9hdChzdHlsZS5oZWlnaHQpO1xuICAgIGNvbnN0IHBhZGRpbmdfdG9wID0gcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nVG9wKTtcbiAgICBjb25zdCBwYWRkaW5nX2JvdHRvbSA9IHBhcnNlRmxvYXQoc3R5bGUucGFkZGluZ0JvdHRvbSk7XG4gICAgY29uc3QgbWFyZ2luX3RvcCA9IHBhcnNlRmxvYXQoc3R5bGUubWFyZ2luVG9wKTtcbiAgICBjb25zdCBtYXJnaW5fYm90dG9tID0gcGFyc2VGbG9hdChzdHlsZS5tYXJnaW5Cb3R0b20pO1xuICAgIGNvbnN0IGJvcmRlcl90b3Bfd2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlclRvcFdpZHRoKTtcbiAgICBjb25zdCBib3JkZXJfYm90dG9tX3dpZHRoID0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJCb3R0b21XaWR0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogdCA9PiAnb3ZlcmZsb3c6IGhpZGRlbjsnICtcbiAgICAgICAgICAgIGBvcGFjaXR5OiAke01hdGgubWluKHQgKiAyMCwgMSkgKiBvcGFjaXR5fTtgICtcbiAgICAgICAgICAgIGBoZWlnaHQ6ICR7dCAqIGhlaWdodH1weDtgICtcbiAgICAgICAgICAgIGBwYWRkaW5nLXRvcDogJHt0ICogcGFkZGluZ190b3B9cHg7YCArXG4gICAgICAgICAgICBgcGFkZGluZy1ib3R0b206ICR7dCAqIHBhZGRpbmdfYm90dG9tfXB4O2AgK1xuICAgICAgICAgICAgYG1hcmdpbi10b3A6ICR7dCAqIG1hcmdpbl90b3B9cHg7YCArXG4gICAgICAgICAgICBgbWFyZ2luLWJvdHRvbTogJHt0ICogbWFyZ2luX2JvdHRvbX1weDtgICtcbiAgICAgICAgICAgIGBib3JkZXItdG9wLXdpZHRoOiAke3QgKiBib3JkZXJfdG9wX3dpZHRofXB4O2AgK1xuICAgICAgICAgICAgYGJvcmRlci1ib3R0b20td2lkdGg6ICR7dCAqIGJvcmRlcl9ib3R0b21fd2lkdGh9cHg7YFxuICAgIH07XG59XG5mdW5jdGlvbiBzY2FsZShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0LCBzdGFydCA9IDAsIG9wYWNpdHkgPSAwIH0gPSB7fSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB0YXJnZXRfb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgY29uc3Qgc2QgPSAxIC0gc3RhcnQ7XG4gICAgY29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKF90LCB1KSA9PiBgXG5cdFx0XHR0cmFuc2Zvcm06ICR7dHJhbnNmb3JtfSBzY2FsZSgkezEgLSAoc2QgKiB1KX0pO1xuXHRcdFx0b3BhY2l0eTogJHt0YXJnZXRfb3BhY2l0eSAtIChvZCAqIHUpfVxuXHRcdGBcbiAgICB9O1xufVxuZnVuY3Rpb24gZHJhdyhub2RlLCB7IGRlbGF5ID0gMCwgc3BlZWQsIGR1cmF0aW9uLCBlYXNpbmcgPSBjdWJpY0luT3V0IH0gPSB7fSkge1xuICAgIGxldCBsZW4gPSBub2RlLmdldFRvdGFsTGVuZ3RoKCk7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5zdHJva2VMaW5lY2FwICE9PSAnYnV0dCcpIHtcbiAgICAgICAgbGVuICs9IHBhcnNlSW50KHN0eWxlLnN0cm9rZVdpZHRoKTtcbiAgICB9XG4gICAgaWYgKGR1cmF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHNwZWVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gODAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZHVyYXRpb24gPSBsZW4gLyBzcGVlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbihsZW4pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiAodCwgdSkgPT4gYHN0cm9rZS1kYXNoYXJyYXk6ICR7dCAqIGxlbn0gJHt1ICogbGVufWBcbiAgICB9O1xufVxuZnVuY3Rpb24gY3Jvc3NmYWRlKF9hKSB7XG4gICAgdmFyIHsgZmFsbGJhY2sgfSA9IF9hLCBkZWZhdWx0cyA9IF9fcmVzdChfYSwgW1wiZmFsbGJhY2tcIl0pO1xuICAgIGNvbnN0IHRvX3JlY2VpdmUgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgdG9fc2VuZCA9IG5ldyBNYXAoKTtcbiAgICBmdW5jdGlvbiBjcm9zc2ZhZGUoZnJvbSwgbm9kZSwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IGQgPT4gTWF0aC5zcXJ0KGQpICogMzAsIGVhc2luZyA9IGN1YmljT3V0IH0gPSBhc3NpZ24oYXNzaWduKHt9LCBkZWZhdWx0cyksIHBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgZHggPSBmcm9tLmxlZnQgLSB0by5sZWZ0O1xuICAgICAgICBjb25zdCBkeSA9IGZyb20udG9wIC0gdG8udG9wO1xuICAgICAgICBjb25zdCBkdyA9IGZyb20ud2lkdGggLyB0by53aWR0aDtcbiAgICAgICAgY29uc3QgZGggPSBmcm9tLmhlaWdodCAvIHRvLmhlaWdodDtcbiAgICAgICAgY29uc3QgZCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgY29uc3Qgb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVsYXksXG4gICAgICAgICAgICBkdXJhdGlvbjogaXNfZnVuY3Rpb24oZHVyYXRpb24pID8gZHVyYXRpb24oZCkgOiBkdXJhdGlvbixcbiAgICAgICAgICAgIGVhc2luZyxcbiAgICAgICAgICAgIGNzczogKHQsIHUpID0+IGBcblx0XHRcdFx0b3BhY2l0eTogJHt0ICogb3BhY2l0eX07XG5cdFx0XHRcdHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xuXHRcdFx0XHR0cmFuc2Zvcm06ICR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHt1ICogZHh9cHgsJHt1ICogZHl9cHgpIHNjYWxlKCR7dCArICgxIC0gdCkgKiBkd30sICR7dCArICgxIC0gdCkgKiBkaH0pO1xuXHRcdFx0YFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uKGl0ZW1zLCBjb3VudGVycGFydHMsIGludHJvKSB7XG4gICAgICAgIHJldHVybiAobm9kZSwgcGFyYW1zKSA9PiB7XG4gICAgICAgICAgICBpdGVtcy5zZXQocGFyYW1zLmtleSwge1xuICAgICAgICAgICAgICAgIHJlY3Q6IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY291bnRlcnBhcnRzLmhhcyhwYXJhbXMua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHJlY3QgfSA9IGNvdW50ZXJwYXJ0cy5nZXQocGFyYW1zLmtleSk7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXJwYXJ0cy5kZWxldGUocGFyYW1zLmtleSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcm9zc2ZhZGUocmVjdCwgbm9kZSwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIG5vZGUgaXMgZGlzYXBwZWFyaW5nIGFsdG9nZXRoZXJcbiAgICAgICAgICAgICAgICAvLyAoaS5lLiB3YXNuJ3QgY2xhaW1lZCBieSB0aGUgb3RoZXIgbGlzdClcbiAgICAgICAgICAgICAgICAvLyB0aGVuIHdlIG5lZWQgdG8gc3VwcGx5IGFuIG91dHJvXG4gICAgICAgICAgICAgICAgaXRlbXMuZGVsZXRlKHBhcmFtcy5rZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxsYmFjayAmJiBmYWxsYmFjayhub2RlLCBwYXJhbXMsIGludHJvKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIHRyYW5zaXRpb24odG9fc2VuZCwgdG9fcmVjZWl2ZSwgZmFsc2UpLFxuICAgICAgICB0cmFuc2l0aW9uKHRvX3JlY2VpdmUsIHRvX3NlbmQsIHRydWUpXG4gICAgXTtcbn1cblxuZXhwb3J0IHsgYmx1ciwgY3Jvc3NmYWRlLCBkcmF3LCBmYWRlLCBmbHksIHNjYWxlLCBzbGlkZSB9O1xuIiwgIjxzY3JpcHQ+XG5cdHZhciBfX2F3YWl0ZXIgPVxuXHRcdCh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fFxuXHRcdGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcblx0XHRcdGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFBcblx0XHRcdFx0XHQ/IHZhbHVlXG5cdFx0XHRcdFx0OiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKHZhbHVlKTtcblx0XHRcdFx0XHQgIH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jdGlvbiBzdGVwKHJlc3VsdCkge1xuXHRcdFx0XHRcdHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25Nb3VudCwgdGljayB9IGZyb20gXCJzdmVsdGVcIjtcblx0aW1wb3J0IHsgZmFkZSwgc2xpZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcblx0aW1wb3J0IHsgaW50ZXJwcmV0LCBzZWxlY3Rpb25NYWNoaW5lLCBzZXR1cEludGVyYWN0aW9uTGlzdGVuZXIsIHNldHVwT3Blbkxpc3RlbmVyIH0gZnJvbSBcIkBhY3R1cy9jb3JlXCI7XG5cdC8vIExvY2FsIHZhcnNcblx0bGV0IHJlc3VsdHMgPSBbXTtcblx0bGV0IG91dGVyRWxlbWVudDtcblx0bGV0IHRlYXJkb3duSW5wdXRMaXN0ZW5lciA9ICgpID0+IHt9O1xuXHRsZXQgdGVhckRvd25PcGVuTGlzdGVuZXIgPSAoKSA9PiB7fTtcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0Ly8gRXhwb3J0cyAvIEFQSVxuXHRleHBvcnQgbGV0IHRoZW1lID0ge1xuXHRcdFwiLS1hY3RpdmUtcmVzdWx0LWJhY2tncm91bmQtY29sb3JcIjogXCJcIixcblx0XHRcIi0tYmFja2dyb3VuZC1jb2xvclwiOiBcIlwiLFxuXHRcdFwiLS1yZXN1bHQtZGVzY3JpcHRpb24tY29sb3JcIjogXCJcIixcblx0XHRcIi0tYWN0aXZlLXJlc3VsdC1kZXNjcmlwdGlvbi1jb2xvclwiOiBcIlwiLFxuXHRcdFwiLS1hY3RpdmUtcmVzdWx0LXRpdGxlLWNvbG9yXCI6IFwiXCIsXG5cdFx0XCItLWNvbG9yXCI6IFwiXCIsXG5cdFx0XCItLXNjYWxlXCI6IFwiXCIsXG5cdH07XG5cdGV4cG9ydCBsZXQgY29tbWFuZHMgPSBbXTtcblx0ZXhwb3J0IGxldCB0b2dnbGVLZXkgPSBcInBcIjtcblx0ZXhwb3J0IGxldCBjdHJsS2V5ID0gZmFsc2U7XG5cdGV4cG9ydCBsZXQgcGxhY2Vob2xkZXIgPSBcIlR5cGUgc29tZXRoaW5nXCI7XG5cdC8vIFN0YXJ0IG1hY2hpbmVcblx0Y29uc3Qgc2VsZWN0aW9uU2VydmljZSA9IGludGVycHJldChcblx0XHRzZWxlY3Rpb25NYWNoaW5lLndpdGhDb250ZXh0KFxuXHRcdFx0T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzZWxlY3Rpb25NYWNoaW5lLmNvbnRleHQpLCB7IGNvbW1hbmRzLCB0b2dnbGVLZXksIGN0cmxLZXkgfSlcblx0XHQpXG5cdCkuc3RhcnQoKTtcblx0Ly8gRXhwb3NlIHRvZ2dsZSBmdW50aW9uIHNvIHRoZSBvdXRzaWRlIGNhbiB0b2dnbGUgdmlzaWJpbGl0eVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0ZXhwb3J0IGNvbnN0IHRvZ2dsZSA9ICgpID0+IHtcblx0XHRpZiAoJHNlbGVjdGlvblNlcnZpY2UubWF0Y2hlcyhcIm9wZW5cIikpIHtcblx0XHRcdHNlbGVjdGlvblNlcnZpY2Uuc2VuZCh7IHR5cGU6IFwiQ0xPU0VcIiB9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0c2VsZWN0aW9uU2VydmljZS5zZW5kKFwiT1BFTlwiKTtcblx0fTtcblx0Ly8gTWFjaGluZSBsaXN0ZW5lcnNcblx0ZnVuY3Rpb24gaGFuZGxlTWFjaGluZVRyYW5zaXRpb25zKHN0YXRlLCBldmVudCkge1xuXHRcdE9iamVjdC5rZXlzKG1hY2hpbmVTdGF0ZXNMaXN0ZW5lcnMpLmZvckVhY2goKHN0YXRlU3RyaW5nKSA9PiB7XG5cdFx0XHRpZiAoc3RhdGUubWF0Y2hlcyhzdGF0ZVN0cmluZykpIHtcblx0XHRcdFx0bWFjaGluZVN0YXRlc0xpc3RlbmVyc1tzdGF0ZVN0cmluZ10oc3RhdGUsIGV2ZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZiAobWFjaGluZUV2ZW50TGlzdGVuZXJzW2V2ZW50LnR5cGVdKSB7XG5cdFx0XHRtYWNoaW5lRXZlbnRMaXN0ZW5lcnNbZXZlbnQudHlwZV0oc3RhdGUsIGV2ZW50KTtcblx0XHR9XG5cdH1cblx0Y29uc3QgbWFjaGluZVN0YXRlc0xpc3RlbmVycyA9IHtcblx0XHRjbG9zZWQ6IChzdGF0ZSkgPT4ge1xuXHRcdFx0dGVhcmRvd25PdXRzaWRlQ2xpY2tMaXN0ZW5lcigpO1xuXHRcdFx0dGVhcmRvd25JbnB1dExpc3RlbmVyKCk7XG5cdFx0XHRkaXNwYXRjaChcImNsb3NlXCIpO1xuXHRcdFx0c2V0dXBPcGVuaW5nTGlzdGVuZXIoKTtcblx0XHRcdHJlc3VsdHMgPSBzdGF0ZS5jb250ZXh0LnJlc3VsdElkcy5tYXAoKGlkKSA9PiByZXNsdXRJZFRvQ29tbWFuZChzdGF0ZS5jb250ZXh0LmNvbW1hbmRzLCBpZCkpO1xuXHRcdH0sXG5cdH07XG5cdGNvbnN0IG1hY2hpbmVFdmVudExpc3RlbmVycyA9IHtcblx0XHRJTlBVVDogKHN0YXRlKSA9PiB7XG5cdFx0XHRyZXN1bHRzID0gc3RhdGUuY29udGV4dC5yZXN1bHRJZHMubWFwKChpZCkgPT4gcmVzbHV0SWRUb0NvbW1hbmQoc3RhdGUuY29udGV4dC5jb21tYW5kcywgaWQpKTtcblx0XHR9LFxuXHRcdE5FV19DT01NQU5EUzogKHN0YXRlKSA9PiB7XG5cdFx0XHRyZXN1bHRzID0gc3RhdGUuY29udGV4dC5yZXN1bHRJZHMubWFwKChpZCkgPT4gcmVzbHV0SWRUb0NvbW1hbmQoc3RhdGUuY29udGV4dC5jb21tYW5kcywgaWQpKTtcblx0XHR9LFxuXHRcdE9QRU46IChzdGF0ZSkgPT4ge1xuXHRcdFx0c2V0dXBJbnB1dExpc3RlbmVyKCk7XG5cdFx0XHRzZXR1cE91dHNpZGVDbGlja0xpc3RlbmVyKCk7XG5cdFx0XHR0ZWFyRG93bk9wZW5MaXN0ZW5lcigpO1xuXHRcdFx0ZGlzcGF0Y2goXCJvcGVuXCIpO1xuXHRcdFx0cmVzdWx0cyA9IGNvbW1hbmRzLnNsaWNlKDAsIDMpLm1hcCgoeyBpZCB9KSA9PiByZXNsdXRJZFRvQ29tbWFuZChzdGF0ZS5jb250ZXh0LmNvbW1hbmRzLCBpZCkpO1xuXHRcdH0sXG5cdFx0RVhFQ19ET05FOiAoXywgZXZlbnQpID0+IHJlc3VsdEV4ZWMoZXZlbnQuaWQsIGV2ZW50LmlucHV0KSxcblx0XHRTVEVQOiAoKSA9PlxuXHRcdFx0X19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRcdHlpZWxkIHRpY2soKTtcblx0XHRcdFx0Y29uc3QgYWN0aXZlRWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImFjdGl2ZVwiKTtcblx0XHRcdFx0aWYgKCFhY3RpdmVFbHMgfHwgIWFjdGl2ZUVscy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgZWxlbSA9IGFjdGl2ZUVsc1swXTtcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRpZiAoZWxlbSAmJiBlbGVtLnNjcm9sbEludG9WaWV3SWZOZWVkZWQpIHtcblx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdFx0ZWxlbS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHR9O1xuXHRvbk1vdW50KCgpID0+IHtcblx0XHRzZWxlY3Rpb25TZXJ2aWNlLm9uVHJhbnNpdGlvbihoYW5kbGVNYWNoaW5lVHJhbnNpdGlvbnMpO1xuXHR9KTtcblx0Ly8gTWFjaGluZSBpbnRlcmFjdGlvbnNcblx0JDogaWYgKGNvbW1hbmRzLmxlbmd0aCkge1xuXHRcdHNlbGVjdGlvblNlcnZpY2Uuc2VuZCh7IHR5cGU6IFwiTkVXX0NPTU1BTkRTXCIsIGNvbW1hbmRzIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIGNoYW5nZWQoZSkge1xuXHRcdHNlbGVjdGlvblNlcnZpY2Uuc2VuZCh7IHR5cGU6IFwiSU5QVVRcIiwgaW5wdXQ6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KTtcblx0fVxuXHQvLyBIVE1MIEV2ZW50cyBmb3Igb3V0ZXIgY29tcG9uZW50IHRvIGxpc3RlbiBvblxuXHRmdW5jdGlvbiByZXN1bHRFeGVjKGlkLCBpbnB1dCkge1xuXHRcdGNvbnN0IHBheWxvYWQgPSB7IGlkLCBpbnB1dCB9O1xuXHRcdGRpc3BhdGNoKFwiZXhlY3V0ZVwiLCBwYXlsb2FkKTtcblx0fVxuXHQvLyBIZWxwZXIgZnVuY3Rpb25zXG5cdGZ1bmN0aW9uIHNldHVwT3BlbmluZ0xpc3RlbmVyKCkge1xuXHRcdHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRpZiAoc2VsZWN0aW9uU2VydmljZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRzZXRUaW1lb3V0KHNldHVwT3BlbmluZ0xpc3RlbmVyLCA1MCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRlYXJEb3duT3Blbkxpc3RlbmVyID0gc2V0dXBPcGVuTGlzdGVuZXIoc2VsZWN0aW9uU2VydmljZSk7XG5cdFx0fSk7XG5cdH1cblx0ZnVuY3Rpb24gc2V0dXBJbnB1dExpc3RlbmVyKCkge1xuXHRcdHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHR5aWVsZCB0aWNrKCk7XG5cdFx0XHRpZiAoIW91dGVyRWxlbWVudCB8fCBzZWxlY3Rpb25TZXJ2aWNlID09PSBudWxsKSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoc2V0dXBJbnB1dExpc3RlbmVyLCA1MCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICh0ZWFyZG93bklucHV0TGlzdGVuZXIpIHtcblx0XHRcdFx0dGVhcmRvd25JbnB1dExpc3RlbmVyKCk7XG5cdFx0XHR9XG5cdFx0XHR0ZWFyZG93bklucHV0TGlzdGVuZXIgPSBzZXR1cEludGVyYWN0aW9uTGlzdGVuZXIob3V0ZXJFbGVtZW50LCBzZWxlY3Rpb25TZXJ2aWNlKTtcblx0XHR9KTtcblx0fVxuXHRmdW5jdGlvbiBjbGlja0xpc3RlbmVyKGUpIHtcblx0XHRjb25zdCB7IHRhcmdldCB9ID0gZTtcblx0XHRpZiAob3V0ZXJFbGVtZW50ICYmIHRhcmdldCAhPT0gb3V0ZXJFbGVtZW50ICYmICFvdXRlckVsZW1lbnQuY29udGFpbnModGFyZ2V0KSkge1xuXHRcdFx0c2VsZWN0aW9uU2VydmljZS5zZW5kKHsgdHlwZTogXCJDTE9TRVwiIH0pO1xuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBzZXR1cE91dHNpZGVDbGlja0xpc3RlbmVyKCkge1xuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrTGlzdGVuZXIpO1xuXHR9XG5cdGZ1bmN0aW9uIHRlYXJkb3duT3V0c2lkZUNsaWNrTGlzdGVuZXIoKSB7XG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tMaXN0ZW5lcik7XG5cdH1cblx0ZnVuY3Rpb24gZm9jdXMoZSkge1xuXHRcdGUuZm9jdXMoKTtcblx0fVxuXHRmdW5jdGlvbiByZW5kZXJEZXNjcmlwdGlvbihkZXNjcikge1xuXHRcdGlmICh0eXBlb2YgZGVzY3IgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdHJldHVybiBkZXNjcjtcblx0XHR9XG5cdFx0cmV0dXJuIGRlc2NyKCRzZWxlY3Rpb25TZXJ2aWNlLmNvbnRleHQucGFyc2VkSW5wdXQpO1xuXHR9XG5cdGZ1bmN0aW9uIHJlbmRlclRpdGxlKHRpdGxlKSB7XG5cdFx0aWYgKHR5cGVvZiB0aXRsZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0cmV0dXJuIHRpdGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGl0bGUoJHNlbGVjdGlvblNlcnZpY2UuY29udGV4dC5wYXJzZWRJbnB1dCk7XG5cdH1cblx0ZnVuY3Rpb24gcmVzbHV0SWRUb0NvbW1hbmQoY29tbWFuZHMsIHJlc3VsdElkKSB7XG5cdFx0Y29uc3QgY21kID0gY29tbWFuZHMuZmlsdGVyKChjKSA9PiBjLmlkID09PSByZXN1bHRJZCk7XG5cdFx0cmV0dXJuIGNtZFswXTtcblx0fVxuXHRmdW5jdGlvbiBzZWxlY3RFdmVudChpZCkge1xuXHRcdHJldHVybiB7IHR5cGU6IFwiU0VMRUNUXCIsIGlkIH07XG5cdH1cblx0ZnVuY3Rpb24gZXhlY0V2ZW50KGlkKSB7XG5cdFx0cmV0dXJuIHsgdHlwZTogXCJFWEVDXCIsIGlkIH07XG5cdH1cbjwvc2NyaXB0PlxuXG57I2lmICRzZWxlY3Rpb25TZXJ2aWNlLm1hdGNoZXMoXCJvcGVuXCIpfVxuXHQ8ZGl2XG5cdFx0dHJhbnNpdGlvbjpmYWRlPXt7IGR1cmF0aW9uOiAxNTAgfX1cblx0XHRiaW5kOnRoaXM9e291dGVyRWxlbWVudH1cblx0XHRjbGFzcz1cIndyYXBwZXJcIlxuXHRcdHN0eWxlPXtPYmplY3QuZW50cmllcyh0aGVtZSlcblx0XHRcdC5tYXAoKGUpID0+IGUuam9pbihcIjpcIikpXG5cdFx0XHQuam9pbihcIjtcIil9XG5cdD5cblx0XHQ8ZGl2IGNsYXNzPVwiY29tbWFuZC1zZWN0aW9uXCI+XG5cdFx0XHQ8aW5wdXRcblx0XHRcdFx0dXNlOmZvY3VzXG5cdFx0XHRcdHZhbHVlPXskc2VsZWN0aW9uU2VydmljZS5jb250ZXh0LmlucHV0fVxuXHRcdFx0XHRvbjppbnB1dHxwcmV2ZW50RGVmYXVsdD17Y2hhbmdlZH1cblx0XHRcdFx0dHlwZT1cInRleHRcIlxuXHRcdFx0XHR7cGxhY2Vob2xkZXJ9XG5cdFx0XHQvPlxuXHRcdDwvZGl2PlxuXHRcdHsjaWYgcmVzdWx0cy5sZW5ndGh9XG5cdFx0XHQ8ZGl2IGNsYXNzPVwicmVzdWx0c1wiIHRyYW5zaXRpb246c2xpZGU9e3sgZHVyYXRpb246IDE1MCB9fT5cblx0XHRcdFx0eyNlYWNoIHJlc3VsdHMgYXMgcmVzdWx0LCByZXN1bHRJbmRleH1cblx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRkYXRhLXRlc3RpZD17YHRlc3QtaWQtJHtyZXN1bHRJbmRleH1gfVxuXHRcdFx0XHRcdFx0Y2xhc3M6YWN0aXZlPXskc2VsZWN0aW9uU2VydmljZS5jb250ZXh0LnNlbGVjdGVkSWQgPT09IHJlc3VsdC5pZH1cblx0XHRcdFx0XHRcdG9uOm1vdXNlZG93bj17KCkgPT4gc2VsZWN0aW9uU2VydmljZS5zZW5kKGV4ZWNFdmVudChyZXN1bHQuaWQpKX1cblx0XHRcdFx0XHRcdG9uOm1vdXNlb3Zlcj17KCkgPT4gc2VsZWN0aW9uU2VydmljZS5zZW5kKHNlbGVjdEV2ZW50KHJlc3VsdC5pZCkpfVxuXHRcdFx0XHRcdFx0b246Zm9jdXM9eygpID0+IHNlbGVjdGlvblNlcnZpY2Uuc2VuZChzZWxlY3RFdmVudChyZXN1bHQuaWQpKX1cblx0XHRcdFx0XHRcdGNsYXNzPVwicmVzdWx0XCJcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHR7cmVuZGVyVGl0bGUocmVzdWx0LnRpdGxlKX1cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwicmVzdWx0LWRlc2NyaXB0aW9uXCI+e3JlbmRlckRlc2NyaXB0aW9uKHJlc3VsdC5kZXNjcmlwdGlvbil9PC9zcGFuPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHR7L2VhY2h9XG5cdFx0XHQ8L2Rpdj5cblx0XHR7L2lmfVxuXHQ8L2Rpdj5cbnsvaWZ9XG5cbjxzdHlsZT5cblx0LndyYXBwZXIge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY29sb3IsIHJnYmEoMzYsIDM2LCAzNiwgMSkpO1xuXHRcdGNvbG9yOiB2YXIoLS1jb2xvciwgcmdiYSgyMTIsIDIwOCwgMTk5LCAxKSk7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRib3gtc2hhZG93OiAwcHggNXB4IDVweCByZ2JhKDAsIDAsIDAsIDAuNCk7XG5cdFx0Ym9yZGVyLXJhZGl1czogNHB4O1xuXHRcdHRyYW5zZm9ybS1vcmlnaW46IHRvcCBjZW50ZXI7XG5cdFx0dHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1zY2FsZSwgMSkpO1xuXHRcdHdpZHRoOiA0MDBweDtcblx0fVxuXHQuY29tbWFuZC1zZWN0aW9uIHtcblx0XHRtYXJnaW46IDA7XG5cdH1cblx0LnJlc3VsdCB7XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdHBhZGRpbmc6IDAuNnJlbTtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yLCByZ2JhKDM2LCAzNiwgMzYsIDEpKTtcblx0XHRmb250LXNpemU6IDAuOXJlbTtcblx0fVxuXHQucmVzdWx0LmFjdGl2ZSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWN0aXZlLXJlc3VsdC1iYWNrZ3JvdW5kLWNvbG9yLCByZ2JhKDY0LCA2NCwgNjQsIDEpKTtcblx0XHRjb2xvcjogdmFyKC0tYWN0aXZlLXJlc3VsdC10aXRsZS1jb2xvciwgcmdiYSgyNTUsIDI1NSwgMjU1LCAxKSk7XG5cdH1cblx0LnJlc3VsdC1kZXNjcmlwdGlvbiB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0Zm9udC1zaXplOiAwLjdyZW07XG5cdFx0Zm9udC1zdHlsZTogaXRhbGljO1xuXHRcdGNvbG9yOiB2YXIoLS1yZXN1bHQtZGVzY3JpcHRpb24tY29sb3IsIHJnYmEoMjEyLCAyMDgsIDE5OSwgMSkpO1xuXHR9XG5cdC5yZXN1bHQuYWN0aXZlIC5yZXN1bHQtZGVzY3JpcHRpb24ge1xuXHRcdGNvbG9yOiB2YXIoLS1hY3RpdmUtcmVzdWx0LWRlc2NyaXB0aW9uLWNvbG9yLCByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpKTtcblx0fVxuXHQucmVzdWx0cyB7XG5cdFx0d2lkdGg6IDQwMHB4O1xuXHRcdG1hcmdpbjogMDtcblx0XHRtYXgtaGVpZ2h0OiAzNTBweDtcblx0XHRvdmVyZmxvdy15OiBhdXRvO1xuXHRcdGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDtcblx0XHRib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xuXHRcdHBhZGRpbmctdG9wOiAwLjFyZW07XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvciwgcmdiYSgzNiwgMzYsIDM2LCAxKSk7XG5cdFx0c2Nyb2xsYmFyLXdpZHRoOiB0aGluO1xuXHRcdHNjcm9sbGJhci1jb2xvcjogdmFyKC0tY29sb3IsIHJnYmEoMjEyLCAyMDgsIDE5OSwgMSkpIHZhcigtLWJhY2tncm91bmQtY29sb3IsIHJnYmEoMzYsIDM2LCAzNiwgMSkpO1xuXHR9XG5cdC5yZXN1bHRzOjotd2Via2l0LXNjcm9sbGJhciB7XG5cdFx0d2lkdGg6IDZweDtcblx0fVxuXHQucmVzdWx0czo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLCByZ2JhKDIxMiwgMjA4LCAxOTksIDEpKTtcblx0XHRib3JkZXItcmFkaXVzOiA2cHg7XG5cdH1cblx0LnJlc3VsdHM6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcblx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yLCByZ2JhKDM2LCAzNiwgMzYsIDEpKTtcblx0fVxuXHRbdHlwZT1cInRleHRcIl0ge1xuXHRcdGZvbnQtc2l6ZTogMXJlbTtcblx0XHRwYWRkaW5nOiAwLjVyZW07XG5cdFx0Ym9yZGVyOiAwO1xuXHRcdHdpZHRoOiBjYWxjKDQwMHB4IC0gMXJlbSk7XG5cdFx0bWFyZ2luOiA0cHggMDtcblx0XHRjb2xvcjogdmFyKC0tY29sb3IsIHJnYmEoMjEyLCAyMDgsIDE5OSwgMSkpO1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY29sb3IsIHJnYmEoMzYsIDM2LCAzNiwgMSkpO1xuXHR9XG5cdFt0eXBlPVwidGV4dFwiXTpmb2N1cyB7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0fVxuPC9zdHlsZT5cbiIsIG51bGwsICI8c2NyaXB0PlxuXHRpbXBvcnQgQ29tbWFuZFBhbGV0dGUgZnJvbSBcIkBhY3R1cy9zdmVsdGUvZGlzdC9cIjtcblxuXHRleHBvcnQgbGV0IHBsYWNlaG9sZGVyO1xuXHRleHBvcnQgbGV0IGN1cnJlbnRUaGVtZTtcblx0ZXhwb3J0IGxldCBjb21tYW5kcztcblx0ZXhwb3J0IGxldCB0b2dnbGVLZXkgPSBcInBcIjtcblxuXHRsZXQgZHJhZ2dpbmcgPSBmYWxzZTtcblx0bGV0IHggPSAwO1xuXHRsZXQgeSA9IDA7XG5cblx0JDogdGhlbWUgPSB7XG5cdFx0XCItLWNvbG9yXCI6IGN1cnJlbnRUaGVtZS5jb2xvcixcblx0XHRcIi0tcmVzdWx0LWRlc2NyaXB0aW9uLWNvbG9yXCI6IGN1cnJlbnRUaGVtZS5kZXNjcmlwdGlvbkNvbG9yLFxuXHRcdFwiLS1iYWNrZ3JvdW5kLWNvbG9yXCI6IGN1cnJlbnRUaGVtZS5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XCItLWFjdGl2ZS1yZXN1bHQtYmFja2dyb3VuZC1jb2xvclwiOiBjdXJyZW50VGhlbWUuYWN0aXZlUmVzdWx0QmFja2dyb3VuZENvbG9yLFxuXHRcdFwiLS1hY3RpdmUtcmVzdWx0LWRlc2NyaXB0aW9uLWNvbG9yXCI6IGN1cnJlbnRUaGVtZS5hY3RpdmVSZXN1bHREZXNjcmlwdGlvbkNvbG9yLFxuXHRcdFwiLS1hY3RpdmUtcmVzdWx0LXRpdGxlLWNvbG9yXCI6IGN1cnJlbnRUaGVtZS5hY3RpdmVSZXN1bHRUaXRsZUNvbG9yLFxuXHRcdFwiLS1zY2FsZVwiOiBjdXJyZW50VGhlbWUuc2NhbGUsXG5cdH07XG5cdCQ6IGNvbnNvbGUubG9nKHBsYWNlaG9sZGVyKTtcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOndpbmRvd1xuXHRvbjptb3VzZW1vdmU9eyhldmVudCkgPT4ge1xuXHRcdGlmIChkcmFnZ2luZykge1xuXHRcdFx0eCArPSBldmVudC5tb3ZlbWVudFg7XG5cdFx0XHR5ICs9IGV2ZW50Lm1vdmVtZW50WTtcblx0XHR9XG5cdH19XG5cdG9uOm1vdXNldXA9eygpID0+IHtcblx0XHRkcmFnZ2luZyA9IGZhbHNlO1xuXHR9fVxuLz5cblxuPG5hdlxuXHRjbGFzcz1cImRyYWdnYWJsZVwiXG5cdG9uOm1vdXNlZG93bnxwcmV2ZW50RGVmYXVsdHxzdG9wUHJvcGFnYXRpb249eygpID0+IHtcblx0XHRkcmFnZ2luZyA9IHRydWU7XG5cdH19XG4+XG5cdDxDb21tYW5kUGFsZXR0ZSB7Y29tbWFuZHN9IHtwbGFjZWhvbGRlcn0ge3RoZW1lfSB7dG9nZ2xlS2V5fSAvPlxuPC9uYXY+XG5cbjxzdHlsZT5cblx0bmF2IHtcblx0XHRwb3NpdGlvbjogZml4ZWQ7XG5cdFx0dG9wOiAzMCU7XG5cdFx0bGVmdDogNTAlO1xuXHRcdHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcblx0XHR6LWluZGV4OiA5OTk5O1xuXHR9XG5cblx0bmF2IDpnbG9iYWwoLmNvbW1hbmQtc2VjdGlvbiBpbnB1dDpmb2N1cykge1xuXHRcdGJveC1zaGFkb3c6IHVuc2V0O1xuXHR9XG48L3N0eWxlPlxuIiwgImltcG9ydCBQYWxldHRlIGZyb20gXCIuL1BhbGV0dGUuc3ZlbHRlXCI7XG5pbXBvcnQgeyBkZWZpbmVBY3Rpb25zIH0gZnJvbSBcInN2ZWx0ZS1jb21tYW5kLXBhbGV0dGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUaGVtZSB7XG5cdG5hbWU6IHN0cmluZztcblx0Y29sb3I6IHN0cmluZztcblx0ZGVzY3JpcHRpb25Db2xvcjogc3RyaW5nO1xuXHRiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcblx0YWN0aXZlUmVzdWx0QmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG5cdGFjdGl2ZVJlc3VsdERlc2NyaXB0aW9uQ29sb3I6IHN0cmluZztcblx0YWN0aXZlUmVzdWx0VGl0bGVDb2xvcjogc3RyaW5nO1xuXHRzY2FsZTogc3RyaW5nO1xufVxuXG5jb25zdCB0ID0gKHN0cmluZykgPT4gZ2FtZS5pMThuLmxvY2FsaXplKHN0cmluZyk7XG5cbkhvb2tzLm9uY2UoXCJpbml0XCIsICgpID0+IHtcblx0Q09ORklHLmZjcCA9IHtcblx0XHRjb21tYW5kczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpZDogXCJvcGVuLXNldHRpbmdzXCIsXG5cdFx0XHRcdHRpdGxlOiBcIk9wZW4gU2V0dGluZ3NcIixcblx0XHRcdFx0ZGVzY3JpcHRpb246IFwiT3BlbnMgdGhlIHNldHRpbmdzIG1lbnVcIixcblx0XHRcdFx0ZXhlYzogKCkgPT4gZ2FtZS5zZXR0aW5ncy5zaGVldC5yZW5kZXIodHJ1ZSksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpZDogXCJvcGVuLW1hY3Jvc1wiLFxuXHRcdFx0XHR0aXRsZTogXCJPcGVuIE1hY3Jvc1wiLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogXCJPcGVucyB0aGUgbWFjcm9zIG1lbnVcIixcblx0XHRcdFx0ZXhlYzogKCkgPT4gdWkubWFjcm9zLnJlbmRlclBvcG91dCh0cnVlKSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHR0aGVtZXM6IHtcblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0bmFtZTogXCJEZWZhdWx0XCIsXG5cdFx0XHRcdGNvbG9yOiBcInJnYmEoMjEyLCAyMDgsIDE5OSwgMS4wMClcIixcblx0XHRcdFx0ZGVzY3JpcHRpb25Db2xvcjogXCJyZ2JhKDIxMiwgMjA4LCAxOTksIDEuMDApXCIsXG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDM2LCAzNiwgMzYsIDEuMDApXCIsXG5cdFx0XHRcdGFjdGl2ZVJlc3VsdEJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDY0LCA2NCwgNjQsIDEuMDApXCIsXG5cdFx0XHRcdGFjdGl2ZVJlc3VsdERlc2NyaXB0aW9uQ29sb3I6IFwicmdiYSgyNTUsIDI1NSwgMjU1LCAxLjAwKVwiLFxuXHRcdFx0XHRhY3RpdmVSZXN1bHRUaXRsZUNvbG9yOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMS4wMClcIixcblx0XHRcdFx0c2NhbGU6IFwiMS4zXCIsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0aW5zdGFuY2U6IG51bGwsXG5cdH07XG59KTtcblxuSG9va3Mub25jZShcInNldHVwXCIsICgpID0+IHtcblx0Y29uc3QgY2hvaWNlcyA9IE9iamVjdC5lbnRyaWVzKENPTkZJRy5mY3AudGhlbWVzKS5yZWR1Y2UoKG9iaiwgW2tleSwgdGhlbWVdOiBbc3RyaW5nLCBUaGVtZV0pID0+IHtcblx0XHRvYmpba2V5XSA9IHRoZW1lLm5hbWU7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXG5cdGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoXCJmY3BcIiwgXCJ0aGVtZVwiLCB7XG5cdFx0bmFtZTogdChcIkZDUC5TZXR0aW5ncy5UaGVtZS5OYW1lXCIpLFxuXHRcdGhpbnQ6IHQoXCJGQ1AuU2V0dGluZ3MuVGhlbWUuRGVzY3JpcHRpb25cIiksXG5cdFx0c2NvcGU6IFwiY2xpZW50XCIsXG5cdFx0Y29uZmlnOiB0cnVlLFxuXHRcdHR5cGU6IFN0cmluZyxcblx0XHRjaG9pY2VzLFxuXHRcdGRlZmF1bHQ6IFwiRGVmYXVsdFwiLFxuXHR9KTtcblx0Z2FtZS5zZXR0aW5ncy5yZWdpc3RlcihcImZjcFwiLCBcInRvZ2dsZUtleVwiLCB7XG5cdFx0bmFtZTogdChcIkZDUC5TZXR0aW5ncy5Ub2dnbGVLZXkuTmFtZVwiKSxcblx0XHRoaW50OiB0KFwiRkNQLlNldHRpbmdzLlRvZ2dsZUtleS5EZXNjcmlwdGlvblwiKSxcblx0XHRzY29wZTogXCJjbGllbnRcIixcblx0XHRjb25maWc6IHRydWUsXG5cdFx0dHlwZTogU3RyaW5nLFxuXHRcdGRlZmF1bHQ6IFwicFwiLFxuXHR9KTtcbn0pO1xuXG5Ib29rcy5vbmNlKFwicmVhZHlcIiwgKCkgPT4ge1xuXHRjb25zdCBjb21tYW5kcyA9IENPTkZJRz8uZmNwLmNvbW1hbmRzO1xuXHRjb25zdCB0b2dnbGVLZXkgPSBnYW1lLnNldHRpbmdzLmdldChcImZjcFwiLCBcInRvZ2dsZUtleVwiKTtcblx0Y29uc3QgcGxhY2Vob2xkZXIgPSB0KFwiRkNQLkNvbW1hbmRQYWxldHRlLlBsYWNlaG9sZGVyXCIpO1xuXHRjb25zdCBjdXJyZW50VGhlbWVLZXkgPSBnYW1lLnNldHRpbmdzLmdldChcImZjcFwiLCBcInRoZW1lXCIpO1xuXHRjb25zdCBjdXJyZW50VGhlbWUgPSBDT05GSUcuZmNwLnRoZW1lc1tjdXJyZW50VGhlbWVLZXldO1xuXG5cdENPTkZJRy5mY3AuaW5zdGFuY2UgPSBuZXcgUGFsZXR0ZSh7XG5cdFx0dGFyZ2V0OiBkb2N1bWVudC5ib2R5LFxuXHRcdHByb3BzOiB7XG5cdFx0XHRjb21tYW5kcyxcblx0XHRcdGN1cnJlbnRUaGVtZSxcblx0XHRcdHRvZ2dsZUtleSxcblx0XHRcdHBsYWNlaG9sZGVyLFxuXHRcdH0sXG5cdH0pO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiK2hCQUFBLElBQUFBLEdBQUFDLEVBQUFDLElBQUEsY0FFQSxPQUFPLGVBQWVBLEdBQVMsYUFBYyxDQUFFLE1BQU8sRUFBSyxDQUFDLEVBaUI1REEsR0FBUSxTQUFXLFVBQVcsQ0FDMUIsT0FBQUEsR0FBUSxTQUFXLE9BQU8sUUFBVSxTQUFrQixFQUFHLENBQ3JELFFBQVNDLEVBQUdDLEVBQUksRUFBR0MsRUFBSSxVQUFVLE9BQVFELEVBQUlDLEVBQUdELElBQUssQ0FDakRELEVBQUksVUFBVUMsR0FDZCxRQUFTRSxLQUFLSCxFQUFPLE9BQU8sVUFBVSxlQUFlLEtBQUtBLEVBQUdHLENBQUMsSUFBRyxFQUFFQSxHQUFLSCxFQUFFRyxHQUM5RSxDQUNBLE9BQU8sQ0FDWCxFQUNPSixHQUFRLFNBQVMsTUFBTSxLQUFNLFNBQVMsQ0FDakQsRUFFQSxTQUFTSyxHQUFPSixFQUFHSyxFQUFHLENBQ2xCLElBQUlDLEVBQUksQ0FBQyxFQUNULFFBQVNILEtBQUtILEVBQU8sT0FBTyxVQUFVLGVBQWUsS0FBS0EsRUFBR0csQ0FBQyxHQUFLRSxFQUFFLFFBQVFGLENBQUMsRUFBSSxJQUM5RUcsRUFBRUgsR0FBS0gsRUFBRUcsSUFDYixHQUFJSCxHQUFLLE1BQVEsT0FBTyxPQUFPLHVCQUEwQixXQUNyRCxRQUFTLEVBQUksRUFBR0csRUFBSSxPQUFPLHNCQUFzQkgsQ0FBQyxFQUFHLEVBQUlHLEVBQUUsT0FBUSxJQUMzREUsRUFBRSxRQUFRRixFQUFFLEVBQUUsRUFBSSxHQUFLLE9BQU8sVUFBVSxx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R0FBRSx5QkFBeUIsRUFDakMsS0FBTUEsR0FBRSxnQ0FBZ0MsRUFDeEMsTUFBTyxTQUNQLE9BQVEsR0FDUixLQUFNLE9BQ04sUUFBQUUsRUFDQSxRQUFTLFNBQ1YsQ0FBQyxFQUNELEtBQUssU0FBUyxTQUFTLE1BQU8sWUFBYSxDQUMxQyxLQUFNRixHQUFFLDZCQUE2QixFQUNyQyxLQUFNQSxHQUFFLG9DQUFvQyxFQUM1QyxNQUFPLFNBQ1AsT0FBUSxHQUNSLEtBQU0sT0FDTixRQUFTLEdBQ1YsQ0FBQyxDQUNGLENBQUMsRUFFRCxNQUFNLEtBQUssUUFBUyxJQUFNLENBQ3pCLElBQU1NLEVBQVcsUUFBUSxJQUFJLFNBQ3ZCQyxFQUFZLEtBQUssU0FBUyxJQUFJLE1BQU8sV0FBVyxFQUNoREMsRUFBY1IsR0FBRSxnQ0FBZ0MsRUFDaERTLEVBQWtCLEtBQUssU0FBUyxJQUFJLE1BQU8sT0FBTyxFQUNsREMsRUFBZSxPQUFPLElBQUksT0FBT0QsR0FFdkMsT0FBTyxJQUFJLFNBQVcsSUFBSUUsR0FBUSxDQUNqQyxPQUFRLFNBQVMsS0FDakIsTUFBTyxDQUNOLFNBQUFMLEVBQ0EsYUFBQUksRUFDQSxVQUFBSCxFQUNBLFlBQUFDLENBQ0QsQ0FDRCxDQUFDLENBQ0YsQ0FBQyIsCiAgIm5hbWVzIjogWyJyZXF1aXJlX3RzbGliIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJzIiwgImkiLCAibiIsICJwIiwgIl9fcmVzdCIsICJlIiwgInQiLCAiX192YWx1ZXMiLCAibyIsICJtIiwgIl9fcmVhZCIsICJyIiwgImFyIiwgImVycm9yIiwgIl9fc3ByZWFkQXJyYXkiLCAidG8iLCAiZnJvbSIsICJwYWNrIiwgImwiLCAicmVxdWlyZV90eXBlcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiQWN0aW9uVHlwZXMiLCAiU3BlY2lhbFRhcmdldHMiLCAicmVxdWlyZV9hY3Rpb25UeXBlcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAidHlwZXMiLCAic3RhcnQiLCAic3RvcCIsICJyYWlzZSIsICJzZW5kIiwgImNhbmNlbCIsICJudWxsRXZlbnQiLCAiYXNzaWduIiwgImFmdGVyIiwgImRvbmVTdGF0ZSIsICJsb2ciLCAiaW5pdCIsICJpbnZva2UiLCAiZXJyb3JFeGVjdXRpb24iLCAiZXJyb3JQbGF0Zm9ybSIsICJlcnJvciIsICJ1cGRhdGUiLCAiY2hvb3NlIiwgInB1cmUiLCAicmVxdWlyZV9jb25zdGFudHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIlNUQVRFX0RFTElNSVRFUiIsICJFTVBUWV9BQ1RJVklUWV9NQVAiLCAiREVGQVVMVF9HVUFSRF9UWVBFIiwgIlRBUkdFVExFU1NfS0VZIiwgInJlcXVpcmVfZW52aXJvbm1lbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIklTX1BST0RVQ1RJT04iLCAicmVxdWlyZV91dGlscyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiX3RzbGliIiwgImNvbnN0YW50cyIsICJlbnZpcm9ubWVudCIsICJfYSIsICJrZXlzIiwgInZhbHVlIiwgIm1hdGNoZXNTdGF0ZSIsICJwYXJlbnRTdGF0ZUlkIiwgImNoaWxkU3RhdGVJZCIsICJkZWxpbWl0ZXIiLCAicGFyZW50U3RhdGVWYWx1ZSIsICJ0b1N0YXRlVmFsdWUiLCAiY2hpbGRTdGF0ZVZhbHVlIiwgImlzU3RyaW5nIiwgImtleSIsICJnZXRFdmVudFR5cGUiLCAiZXZlbnQiLCAiZ2V0QWN0aW9uVHlwZSIsICJhY3Rpb24iLCAiaXNGdW5jdGlvbiIsICJ0b1N0YXRlUGF0aCIsICJzdGF0ZUlkIiwgImlzQXJyYXkiLCAiaXNTdGF0ZUxpa2UiLCAic3RhdGUiLCAic3RhdGVWYWx1ZSIsICJwYXRoVG9TdGF0ZVZhbHVlIiwgInN0YXRlUGF0aCIsICJtYXJrZXIiLCAiaSIsICJtYXBWYWx1ZXMiLCAiY29sbGVjdGlvbiIsICJpdGVyYXRlZSIsICJyZXN1bHQiLCAiY29sbGVjdGlvbktleXMiLCAibWFwRmlsdGVyVmFsdWVzIiwgInByZWRpY2F0ZSIsICJlXzEiLCAiX2IiLCAiX2MiLCAiaXRlbSIsICJlXzFfMSIsICJwYXRoIiwgInByb3BzIiwgIm9iamVjdCIsICJlXzIiLCAicHJvcHNfMSIsICJwcm9wc18xXzEiLCAicHJvcCIsICJlXzJfMSIsICJuZXN0ZWRQYXRoIiwgImFjY2Vzc29yUHJvcCIsICJlXzMiLCAicHJvcHNfMiIsICJwcm9wc18yXzEiLCAiZV8zXzEiLCAidG9TdGF0ZVBhdGhzIiwgImZsYXR0ZW4iLCAic3ViU3RhdGVWYWx1ZSIsICJzdWJQYXRoIiwgInBhdGhzVG9TdGF0ZVZhbHVlIiwgInBhdGhzIiwgImVfNCIsICJwYXRoc18xIiwgInBhdGhzXzFfMSIsICJjdXJyZW50UGF0aCIsICJlXzRfMSIsICJhcnJheSIsICJ0b0FycmF5U3RyaWN0IiwgInRvQXJyYXkiLCAibWFwQ29udGV4dCIsICJtYXBwZXIiLCAiY29udGV4dCIsICJfZXZlbnQiLCAiZV81IiwgInN1Yk1hcHBlciIsICJlXzVfMSIsICJpc0J1aWx0SW5FdmVudCIsICJldmVudFR5cGUiLCAiaXNQcm9taXNlTGlrZSIsICJpc0JlaGF2aW9yIiwgInBhcnRpdGlvbiIsICJpdGVtcyIsICJlXzYiLCAidHJ1dGh5IiwgImZhbHN5IiwgIml0ZW1zXzEiLCAiaXRlbXNfMV8xIiwgImVfNl8xIiwgInVwZGF0ZUhpc3RvcnlTdGF0ZXMiLCAiaGlzdCIsICJzdWJIaXN0IiwgInVwZGF0ZUhpc3RvcnlWYWx1ZSIsICJ1cGRhdGVDb250ZXh0IiwgImFzc2lnbkFjdGlvbnMiLCAidXBkYXRlZENvbnRleHQiLCAiYWNjIiwgImFzc2lnbkFjdGlvbiIsICJlXzciLCAiYXNzaWdubWVudCIsICJtZXRhIiwgInBhcnRpYWxVcGRhdGUiLCAicHJvcEFzc2lnbm1lbnQiLCAiZV83XzEiLCAiY29uZGl0aW9uIiwgIm1lc3NhZ2UiLCAiZXJyb3IiLCAiYXJncyIsICJ0b0d1YXJkIiwgImd1YXJkTWFwIiwgImlzT2JzZXJ2YWJsZSIsICJzeW1ib2xPYnNlcnZhYmxlIiwgImludGVyb3BTeW1ib2xzIiwgImlzTWFjaGluZSIsICJpc0FjdG9yIiwgInVuaXF1ZUlkIiwgImN1cnJlbnRJZCIsICJ0b0V2ZW50T2JqZWN0IiwgInBheWxvYWQiLCAidG9TQ1hNTEV2ZW50IiwgInNjeG1sRXZlbnQiLCAiZXZlbnRPYmplY3QiLCAidG9UcmFuc2l0aW9uQ29uZmlnQXJyYXkiLCAiY29uZmlnTGlrZSIsICJ0cmFuc2l0aW9ucyIsICJ0cmFuc2l0aW9uTGlrZSIsICJub3JtYWxpemVUYXJnZXQiLCAidGFyZ2V0IiwgInJlcG9ydFVuaGFuZGxlZEV4Y2VwdGlvbk9uSW52b2NhdGlvbiIsICJvcmlnaW5hbEVycm9yIiwgImN1cnJlbnRFcnJvciIsICJpZCIsICJvcmlnaW5hbFN0YWNrVHJhY2UiLCAic3RhY2tUcmFjZSIsICJldmFsdWF0ZUd1YXJkIiwgIm1hY2hpbmUiLCAiZ3VhcmQiLCAiZ3VhcmRzIiwgImd1YXJkTWV0YSIsICJjb25kRm4iLCAidG9JbnZva2VTb3VyY2UiLCAic3JjIiwgInRvT2JzZXJ2ZXIiLCAibmV4dEhhbmRsZXIiLCAiZXJyb3JIYW5kbGVyIiwgImNvbXBsZXRpb25IYW5kbGVyIiwgIm5vb3AiLCAiaXNPYnNlcnZlciIsICJzZWxmIiwgImNyZWF0ZUludm9rZUlkIiwgInN0YXRlTm9kZUlkIiwgImluZGV4IiwgInJlcXVpcmVfYWN0aW9ucyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiX3RzbGliIiwgInR5cGVzIiwgImFjdGlvblR5cGVzIiwgInV0aWxzIiwgImVudmlyb25tZW50IiwgImluaXRFdmVudCIsICJnZXRBY3Rpb25GdW5jdGlvbiIsICJhY3Rpb25UeXBlIiwgImFjdGlvbkZ1bmN0aW9uTWFwIiwgInRvQWN0aW9uT2JqZWN0IiwgImFjdGlvbiIsICJhY3Rpb25PYmplY3QiLCAiZXhlYyIsICJ0b0FjdGlvbk9iamVjdHMiLCAiYWN0aW9ucyIsICJzdWJBY3Rpb24iLCAidG9BY3Rpdml0eURlZmluaXRpb24iLCAicmFpc2UiLCAiZXZlbnQiLCAic2VuZCIsICJyZXNvbHZlUmFpc2UiLCAib3B0aW9ucyIsICJyZXNvbHZlU2VuZCIsICJjdHgiLCAiX2V2ZW50IiwgImRlbGF5c01hcCIsICJtZXRhIiwgInJlc29sdmVkRXZlbnQiLCAicmVzb2x2ZWREZWxheSIsICJjb25maWdEZWxheSIsICJyZXNvbHZlZFRhcmdldCIsICJzZW5kUGFyZW50IiwgInNlbmRUbyIsICJhY3RvciIsICJzZW5kVXBkYXRlIiwgInJlc3BvbmQiLCAiXyIsICJfXyIsICJfYSIsICJkZWZhdWx0TG9nRXhwciIsICJjb250ZXh0IiwgImxvZyIsICJleHByIiwgImxhYmVsIiwgInJlc29sdmVMb2ciLCAiY2FuY2VsIiwgInNlbmRJZCIsICJzdGFydCIsICJhY3Rpdml0eSIsICJhY3Rpdml0eURlZiIsICJzdG9wIiwgImFjdG9yUmVmIiwgInJlc29sdmVTdG9wIiwgImFjdG9yUmVmT3JTdHJpbmciLCAicmVzb2x2ZWRBY3RvclJlZiIsICJhc3NpZ24iLCAiYXNzaWdubWVudCIsICJpc0FjdGlvbk9iamVjdCIsICJhZnRlciIsICJkZWxheVJlZiIsICJpZCIsICJpZFN1ZmZpeCIsICJkb25lIiwgImRhdGEiLCAidHlwZSIsICJldmVudE9iamVjdCIsICJkb25lSW52b2tlIiwgImVycm9yIiwgInB1cmUiLCAiZ2V0QWN0aW9ucyIsICJmb3J3YXJkVG8iLCAidGFyZ2V0IiwgIm9yaWdpbmFsVGFyZ2V0XzEiLCAiYXJncyIsICJfaSIsICJlc2NhbGF0ZSIsICJlcnJvckRhdGEiLCAiY2hvb3NlIiwgImNvbmRzIiwgInJlc29sdmVBY3Rpb25zIiwgIm1hY2hpbmUiLCAiY3VycmVudFN0YXRlIiwgImN1cnJlbnRDb250ZXh0IiwgInByZWRpY3RhYmxlRXhlYyIsICJwcmVzZXJ2ZUFjdGlvbk9yZGVyIiwgImFzc2lnbkFjdGlvbnMiLCAib3RoZXJBY3Rpb25zIiwgInVwZGF0ZWRDb250ZXh0IiwgInByZXNlcnZlZENvbnRleHRzIiwgInJlc29sdmVkQWN0aW9ucyIsICJzZW5kQWN0aW9uIiwgInJlc29sdmVkIiwgImNob29zZUFjdGlvbiIsICJtYXRjaGVkQWN0aW9ucyIsICJjb25kaXRpb24iLCAiZ3VhcmQiLCAiX2IiLCAicmVzb2x2ZWRBY3Rpb25zRnJvbUNob29zZSIsICJyZXNvbHZlZENvbnRleHRGcm9tQ2hvb3NlIiwgIl9jIiwgInJlc29sdmVkQWN0aW9uc0Zyb21QdXJlIiwgInJlc29sdmVkQ29udGV4dCIsICJyZXNvbHZlZEFjdGlvbk9iamVjdCIsICJleGVjXzEiLCAiY29udGV4dEluZGV4XzEiLCAiX2N0eCIsICJhIiwgInJlcXVpcmVfc2VydmljZVNjb3BlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJzZXJ2aWNlU3RhY2siLCAicHJvdmlkZSIsICJzZXJ2aWNlIiwgImZuIiwgInJlc3VsdCIsICJjb25zdW1lIiwgInJlcXVpcmVfQWN0b3IiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIl90c2xpYiIsICJ1dGlscyIsICJzZXJ2aWNlU2NvcGUiLCAiY3JlYXRlTnVsbEFjdG9yIiwgImlkIiwgIl9hIiwgImNyZWF0ZUludm9jYWJsZUFjdG9yIiwgImludm9rZURlZmluaXRpb24iLCAibWFjaGluZSIsICJjb250ZXh0IiwgIl9ldmVudCIsICJpbnZva2VTcmMiLCAic2VydmljZUNyZWF0b3IiLCAicmVzb2x2ZWREYXRhIiwgInRlbXBBY3RvciIsICJjcmVhdGVEZWZlcnJlZEFjdG9yIiwgImVudGl0eSIsICJkYXRhIiwgImluaXRpYWxTdGF0ZV8xIiwgImlzQWN0b3IiLCAiaXRlbSIsICJpc1NwYXduZWRBY3RvciIsICJ0b0FjdG9yUmVmIiwgImFjdG9yUmVmTGlrZSIsICJyZXF1aXJlX3N0YXRlVXRpbHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIl90c2xpYiIsICJ1dGlscyIsICJpc0xlYWZOb2RlIiwgInN0YXRlTm9kZSIsICJnZXRBbGxDaGlsZHJlbiIsICJrZXkiLCAiZ2V0Q2hpbGRyZW4iLCAic24iLCAiZ2V0QWxsU3RhdGVOb2RlcyIsICJzdGF0ZU5vZGVzIiwgImdldENvbmZpZ3VyYXRpb24iLCAicHJldlN0YXRlTm9kZXMiLCAiZV8xIiwgIl9hIiwgImVfMiIsICJfYiIsICJlXzMiLCAiX2MiLCAiZV80IiwgIl9kIiwgInByZXZDb25maWd1cmF0aW9uIiwgInByZXZBZGpMaXN0IiwgImdldEFkakxpc3QiLCAiY29uZmlndXJhdGlvbiIsICJjb25maWd1cmF0aW9uXzEiLCAiY29uZmlndXJhdGlvbl8xXzEiLCAicyIsICJlXzFfMSIsICJhZGpMaXN0IiwgImNvbmZpZ3VyYXRpb25fMiIsICJjb25maWd1cmF0aW9uXzJfMSIsICJfZSIsICJfZiIsICJjaGlsZCIsICJlXzNfMSIsICJlXzJfMSIsICJjb25maWd1cmF0aW9uXzMiLCAiY29uZmlndXJhdGlvbl8zXzEiLCAiZV80XzEiLCAiZ2V0VmFsdWVGcm9tQWRqIiwgImJhc2VOb2RlIiwgImNoaWxkU3RhdGVOb2RlcyIsICJjaGlsZFN0YXRlTm9kZSIsICJzdGF0ZVZhbHVlIiwgImNzbiIsICJlXzUiLCAiY29uZmlndXJhdGlvbl80IiwgImNvbmZpZ3VyYXRpb25fNF8xIiwgImVfNV8xIiwgImdldFZhbHVlIiwgInJvb3ROb2RlIiwgImNvbmZpZyIsICJoYXMiLCAiaXRlcmFibGUiLCAiaXRlbSIsICJtZW1iZXIiLCAibmV4dEV2ZW50cyIsICJpc0luRmluYWxTdGF0ZSIsICJnZXRNZXRhIiwgImFjYyIsICJnZXRUYWdzRnJvbUNvbmZpZ3VyYXRpb24iLCAicmVxdWlyZV9TdGF0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiX3RzbGliIiwgImNvbnN0YW50cyIsICJ1dGlscyIsICJzdGF0ZVV0aWxzIiwgImFjdGlvbnMiLCAiZW52aXJvbm1lbnQiLCAic3RhdGVWYWx1ZXNFcXVhbCIsICJhIiwgImIiLCAiYUtleXMiLCAiYktleXMiLCAia2V5IiwgImlzU3RhdGVDb25maWciLCAic3RhdGUiLCAiaXNTdGF0ZSIsICJiaW5kQWN0aW9uVG9TdGF0ZSIsICJhY3Rpb24iLCAiZXhlYyIsICJib3VuZEFjdGlvbiIsICJTdGF0ZSIsICJjb25maWciLCAiX3RoaXMiLCAiX2EiLCAic3RhdGVWYWx1ZSIsICJjb250ZXh0IiwgIl9ldmVudCIsICJkZWxpbWl0ZXIiLCAidmFsdWVLZXlzIiwgInMiLCAidGFncyIsICJqc29uVmFsdWVzIiwgInBhcmVudFN0YXRlVmFsdWUiLCAidGFnIiwgImV2ZW50IiwgInRyYW5zaXRpb25EYXRhIiwgInQiLCAicmVxdWlyZV9zY2hlZHVsZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIl90c2xpYiIsICJkZWZhdWx0T3B0aW9ucyIsICJTY2hlZHVsZXIiLCAib3B0aW9ucyIsICJjYWxsYmFjayIsICJ0YXNrIiwgIm5leHRDYWxsYmFjayIsICJlIiwgInJlcXVpcmVfcmVnaXN0cnkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImNoaWxkcmVuIiwgInNlc3Npb25JZEluZGV4IiwgInJlZ2lzdHJ5IiwgImlkIiwgImFjdG9yIiwgInJlcXVpcmVfZGV2VG9vbHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImVudmlyb25tZW50IiwgImdldEdsb2JhbCIsICJnZXREZXZUb29scyIsICJnbG9iYWwiLCAicmVnaXN0ZXJTZXJ2aWNlIiwgInNlcnZpY2UiLCAiZGV2VG9vbHMiLCAicmVxdWlyZV9iZWhhdmlvcnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImFjdGlvbnMiLCAiQWN0b3IiLCAidXRpbHMiLCAiZnJvbVJlZHVjZXIiLCAidHJhbnNpdGlvbiIsICJpbml0aWFsU3RhdGUiLCAiZnJvbVByb21pc2UiLCAicHJvbWlzZUZuIiwgInN0YXRlIiwgImV2ZW50IiwgIl9hIiwgInBhcmVudCIsICJpZCIsICJvYnNlcnZlcnMiLCAib2JzZXJ2ZXIiLCAic2VsZiIsICJkYXRhIiwgInJlYXNvbiIsICJzcGF3bkJlaGF2aW9yIiwgImJlaGF2aW9yIiwgIm9wdGlvbnMiLCAibWFpbGJveCIsICJmbHVzaGluZyIsICJmbHVzaCIsICJldmVudF8xIiwgImFjdG9yQ3R4IiwgImFjdG9yIiwgIm5leHQiLCAiaGFuZGxlRXJyb3IiLCAiY29tcGxldGUiLCAicmVxdWlyZV9pbnRlcnByZXRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiX3RzbGliIiwgInR5cGVzIiwgIlN0YXRlIiwgImFjdGlvblR5cGVzIiwgImFjdGlvbnMiLCAiZW52aXJvbm1lbnQiLCAidXRpbHMiLCAic2NoZWR1bGVyIiwgIkFjdG9yIiwgInJlZ2lzdHJ5IiwgImRldlRvb2xzIiwgInNlcnZpY2VTY29wZSIsICJiZWhhdmlvcnMiLCAiREVGQVVMVF9TUEFXTl9PUFRJT05TIiwgIkludGVycHJldGVyU3RhdHVzIiwgIkludGVycHJldGVyIiwgIm1hY2hpbmUiLCAib3B0aW9ucyIsICJfdGhpcyIsICJldmVudCIsICJwYXlsb2FkIiwgIl9ldmVudCIsICJuZXh0U3RhdGUiLCAidG8iLCAiaXNQYXJlbnQiLCAidGFyZ2V0IiwgImFjdGlvbiIsICJjb250ZXh0IiwgImFjdGlvbkZ1bmN0aW9uTWFwIiwgImFjdGlvbk9yRXhlYyIsICJleGVjIiwgImVyciIsICJzZW5kQWN0aW9uIiwgImFjdGl2aXR5IiwgImludm9rZVNvdXJjZSIsICJzZXJ2aWNlQ3JlYXRvciIsICJpZCIsICJkYXRhIiwgImF1dG9Gb3J3YXJkIiwgInJlc29sdmVkRGF0YSIsICJzb3VyY2UiLCAibGFiZWwiLCAidmFsdWUiLCAicmVzb2x2ZWRPcHRpb25zIiwgImNsb2NrIiwgImxvZ2dlciIsICJwYXJlbnQiLCAicmVzb2x2ZWRJZCIsICJzdGF0ZSIsICJhY3Rpb25zQ29uZmlnIiwgImVfMSIsICJfYSIsICJfYiIsICJfYyIsICJlXzFfMSIsICJlXzIiLCAiZV8zIiwgImVfNCIsICJlXzUiLCAiX2QiLCAiY2hpbGQiLCAiX2UiLCAiX2YiLCAibGlzdGVuZXIiLCAiZV8yXzEiLCAiX2ciLCAiX2giLCAiZV8zXzEiLCAiX2oiLCAiX2siLCAiY29udGV4dExpc3RlbmVyIiwgImVfNF8xIiwgImZpbmFsQ2hpbGRTdGF0ZU5vZGUiLCAic24iLCAiZG9uZURhdGEiLCAiX2wiLCAiX20iLCAiZV81XzEiLCAibmV4dExpc3RlbmVyT3JPYnNlcnZlciIsICJfIiwgImNvbXBsZXRlTGlzdGVuZXIiLCAib2JzZXJ2ZXIiLCAiY29tcGxldGVPbmNlIiwgImluaXRpYWxTdGF0ZSIsICJyZXNvbHZlZFN0YXRlIiwgImVfNiIsICJlXzciLCAiZV84IiwgImVfOSIsICJlXzEwIiwgImVfNl8xIiwgImVfN18xIiwgImVfOF8xIiwgIl9vIiwgImVfOV8xIiwgIl9wIiwgIl9xIiwgImtleSIsICJlXzEwXzEiLCAiZXhpdEFjdGlvbnMiLCAiYSIsICJiIiwgInN0YXRlTm9kZSIsICJyZXNvbHZlZEFjdGlvbnMiLCAidXBkYXRlZENvbnRleHQiLCAibmV3U3RhdGUiLCAiZXZlbnRzIiwgImVfMTEiLCAiYmF0Y2hDaGFuZ2VkIiwgImJhdGNoZWRBY3Rpb25zIiwgIl9sb29wXzEiLCAiZXZlbnRfMSIsICJldmVudHNfMSIsICJldmVudHNfMV8xIiwgImVfMTFfMSIsICJuZXh0RXZlbnQiLCAiZV8xMiIsICJlXzEyXzEiLCAic2VuZElkIiwgImNoaWxkSWQiLCAiZW50aXR5IiwgIm5hbWUiLCAiY2hpbGRTZXJ2aWNlIiwgImFjdG9yIiwgImRvbmVFdmVudCIsICJiZWhhdmlvciIsICJhY3RvclJlZiIsICJwcm9taXNlIiwgImNhbmNlbGVkIiwgInJlc3BvbnNlIiwgImVycm9yRGF0YSIsICJlcnJvckV2ZW50IiwgImVycm9yIiwgIm5leHQiLCAiaGFuZGxlRXJyb3IiLCAiY29tcGxldGUiLCAidW5zdWJzY3JpYmVkIiwgImNhbGxiYWNrIiwgInJlY2VpdmVycyIsICJsaXN0ZW5lcnMiLCAiZW1pdHRlZCIsICJyZWNlaXZlIiwgImUiLCAiY2FsbGJhY2tTdG9wIiwgIm5ld0xpc3RlbmVyIiwgInJlY2VpdmVyIiwgInN1YnNjcmlwdGlvbiIsICJpbXBsZW1lbnRhdGlvbiIsICJkaXNwb3NlIiwgImdsb2JhbCIsICJkZXZUb29sc09wdGlvbnMiLCAiZm4iLCAibXMiLCAiaW50ZXJwcmV0IiwgInJlc29sdmVTcGF3bk9wdGlvbnMiLCAibmFtZU9yT3B0aW9ucyIsICJzcGF3biIsICJzZXJ2aWNlIiwgImlzTGF6eUVudGl0eSIsICJpbnRlcnByZXRlciIsICJyZXF1aXJlX2ludm9rZVV0aWxzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJfdHNsaWIiLCAiYWN0aW9uVHlwZXMiLCAidG9JbnZva2VTb3VyY2UiLCAic3JjIiwgInNpbXBsZVNyYyIsICJ0b0ludm9rZURlZmluaXRpb24iLCAiaW52b2tlQ29uZmlnIiwgImludm9rZURlZiIsICJyZXF1aXJlX1N0YXRlTm9kZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiX3RzbGliIiwgInV0aWxzIiwgInR5cGVzIiwgIlN0YXRlIiwgImFjdGlvblR5cGVzIiwgImFjdGlvbnMiLCAiZW52aXJvbm1lbnQiLCAiY29uc3RhbnRzIiwgInN0YXRlVXRpbHMiLCAiQWN0b3IiLCAiaW52b2tlVXRpbHMiLCAiTlVMTF9FVkVOVCIsICJTVEFURV9JREVOVElGSUVSIiwgIldJTERDQVJEIiwgIkVNUFRZX09CSkVDVCIsICJpc1N0YXRlSWQiLCAic3RyIiwgImNyZWF0ZURlZmF1bHRPcHRpb25zIiwgInZhbGlkYXRlQXJyYXlpZmllZFRyYW5zaXRpb25zIiwgInN0YXRlTm9kZSIsICJldmVudCIsICJ0cmFuc2l0aW9ucyIsICJoYXNOb25MYXN0VW5ndWFyZGVkVGFyZ2V0IiwgInRyYW5zaXRpb24iLCAiZXZlbnRUZXh0IiwgIlN0YXRlTm9kZSIsICJjb25maWciLCAib3B0aW9ucyIsICJfY29udGV4dCIsICJfc3RhdGVJbmZvIiwgIl90aGlzIiwgIl9hIiwgInN0YXRlQ29uZmlnIiwgImtleSIsICJvcmRlciIsICJkZnMiLCAiZV8xIiwgIl9iIiwgIl9jIiwgImNoaWxkIiwgImVfMV8xIiwgImFjdGlvbiIsICJpbnZva2VDb25maWciLCAiaSIsICJpbnZva2VJZCIsICJpbnZva2VTb3VyY2UiLCAiYWN0aXZpdHkiLCAiY29udGV4dCIsICJhY3Rpdml0aWVzIiwgImd1YXJkcyIsICJzZXJ2aWNlcyIsICJkZWxheXMiLCAic3RhdGUiLCAibWFwIiwgImV2ZW50TmFtZSIsICJ0cmFuc2llbnQiLCAiY2FuZGlkYXRlcyIsICJzYW1lRXZlbnRUeXBlIiwgImFmdGVyQ29uZmlnIiwgIm11dGF0ZUVudHJ5RXhpdCIsICJkZWxheSIsICJkZWxheVJlZiIsICJldmVudFR5cGUiLCAiZGVsYXllZFRyYW5zaXRpb25zIiwgImNvbmZpZ1RyYW5zaXRpb24iLCAicmVzb2x2ZWRUcmFuc2l0aW9uIiwgInJlc29sdmVkRGVsYXkiLCAiZGVsYXllZFRyYW5zaXRpb24iLCAic3RhdGVWYWx1ZSIsICJpbml0aWFsU3RhdGVWYWx1ZSIsICJzdWJTdGF0ZUtleXMiLCAic3ViU3RhdGVOb2RlcyIsICJzdWJTdGF0ZUtleSIsICJzdGF0ZUZyb21Db25maWciLCAiY29uZmlndXJhdGlvbiIsICJfZXZlbnQiLCAibmV4dCIsICJlXzIiLCAidHJhbnNpdGlvbk1hcCIsICJzdWJTdGF0ZVZhbHVlIiwgInN1YlN0YXRlTm9kZSIsICJlXzJfMSIsICJzdGF0ZVRyYW5zaXRpb25zIiwgImVuYWJsZWRUcmFuc2l0aW9ucyIsICJzdCIsICJ3aWxsVHJhbnNpdGlvbiIsICJlbnRyeU5vZGVzIiwgInQiLCAiZV8zIiwgIm5leHRTdGF0ZU5vZGVzIiwgInNlbGVjdGVkVHJhbnNpdGlvbiIsICJjYW5kaWRhdGUiLCAiY29uZCIsICJzdGF0ZUluIiwgInJlc29sdmVkQ29udGV4dCIsICJpc0luU3RhdGUiLCAiZ3VhcmRQYXNzZWQiLCAiZXJyIiwgImVfM18xIiwgImFsbE5leHRTdGF0ZU5vZGVzIiwgImlzSW50ZXJuYWwiLCAicmVlbnRyeU5vZGVzIiwgInRhcmdldE5vZGUiLCAibm9kZXMiLCAibWFya2VyIiwgInBvc3NpYmxlQW5jZXN0b3IiLCAicmVzb2x2ZWRDb25maWciLCAiaXNEb25lIiwgImN1cnJlbnRDb250ZXh0IiwgInByZXZTdGF0ZSIsICJlXzQiLCAiZV81IiwgInByZXZDb25maWciLCAicmVzb2x2ZWRDb25maWdfMSIsICJyZXNvbHZlZENvbmZpZ18xXzEiLCAic24iLCAiZV80XzEiLCAicHJldkNvbmZpZ18xIiwgInByZXZDb25maWdfMV8xIiwgImVfNV8xIiwgImRvbmVFdmVudHMiLCAiZXZlbnRzIiwgInBhcmVudCIsICJncmFuZHBhcmVudCIsICJwYXJlbnROb2RlIiwgImEiLCAiYiIsICJlbnRyeVN0YXRlcyIsICJleGl0U3RhdGVzIiwgImVudHJ5QWN0aW9ucyIsICJleGl0QWN0aW9ucyIsICJhY3Rpb25zJDEiLCAic3RvcEFjdGlvbnMiLCAiZXhlYyIsICJjdXJyZW50U3RhdGUiLCAicmVzb2x2ZWRTdGF0ZVZhbHVlIiwgInN0YXRlVHJhbnNpdGlvbiIsICJvcmlnaW5hbEV2ZW50IiwgInByZWRpY3RhYmxlRXhlYyIsICJjdXJyZW50QWN0aW9ucyIsICJlXzYiLCAicmVzb2x2ZWRDb25maWd1cmF0aW9uIiwgImhpc3RvcnlWYWx1ZSIsICJhY3Rpb25zXzEiLCAiYWN0aW9uc18xXzEiLCAiZV82XzEiLCAicmVzb2x2ZWRBY3Rpb25zIiwgInVwZGF0ZWRDb250ZXh0IiwgInJhaXNlZEV2ZW50cyIsICJub25SYWlzZWRBY3Rpb25zIiwgImludm9rZUFjdGlvbnMiLCAiY2hpbGRyZW4iLCAiYWNjIiwgIm5leHRTdGF0ZSIsICJkaWRVcGRhdGVDb250ZXh0IiwgImhpc3RvcnkiLCAiaGFzQWx3YXlzVHJhbnNpdGlvbnMiLCAibWF5YmVOZXh0U3RhdGUiLCAicmFpc2VkRXZlbnQiLCAiY2hhbmdlZCIsICJzdGF0ZUtleSIsICJyZXN1bHQiLCAic3RhdGVJZCIsICJyZXNvbHZlZFN0YXRlSWQiLCAic3RhdGVQYXRoIiwgImFycmF5U3RhdGVQYXRoIiwgImN1cnJlbnRTdGF0ZU5vZGUiLCAic3RhdGVJZGVudGlmaWVyIiwgInRhcmdldCIsICJoaXN0b3J5Q29uZmlnIiwgInJlbGF0aXZlU3RhdGVJZCIsICJyZXNvbHZlIiwgImluaXRpYWxTdGF0ZU5vZGVQYXRocyIsICJpbml0aWFsUGF0aCIsICJyZWxhdGl2ZVBhdGgiLCAiY2hpbGRTdGF0ZVBhdGgiLCAiY2hpbGRTdGF0ZU5vZGUiLCAicmVsYXRpdmVTdGF0ZVZhbHVlIiwgImhpc3RvcnlUYXJnZXQiLCAicmVsYXRpdmVDaGlsZFBhdGgiLCAic3ViSGlzdG9yeVZhbHVlIiwgInN1YlN0YXRlUGF0aCIsICJjaGlsZFN0YXRlSWRzIiwgImVfNyIsICJlXzgiLCAic3RhdGVzIiwgIl9kIiwgIl9lIiwgIl9mIiwgImV2ZW50XzEiLCAiZV84XzEiLCAiZV83XzEiLCAiX3RhcmdldCIsICJpc0ludGVybmFsVGFyZ2V0IiwgInJlc29sdmVkVGFyZ2V0IiwgInRhcmdldFN0YXRlTm9kZSIsICJ0cmFuc2l0aW9uQ29uZmlnIiwgIm5vcm1hbGl6ZWRUYXJnZXQiLCAiaW50ZXJuYWwiLCAiZV85IiwgIm9uQ29uZmlnIiwgIndpbGRjYXJkQ29uZmlncyIsICJzdHJpY3RUcmFuc2l0aW9uQ29uZmlnc18xIiwgInRyYW5zaXRpb25Db25maWdBcnJheSIsICJldmVudGxlc3NDb25maWciLCAiZG9uZUNvbmZpZyIsICJpbnZva2VEZWYiLCAic2V0dGxlVHJhbnNpdGlvbnMiLCAiZm9ybWF0dGVkVHJhbnNpdGlvbnMiLCAiZGVsYXllZFRyYW5zaXRpb25zXzEiLCAiZGVsYXllZFRyYW5zaXRpb25zXzFfMSIsICJlXzlfMSIsICJyZXF1aXJlX01hY2hpbmUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIlN0YXRlTm9kZSIsICJlbnZpcm9ubWVudCIsICJ3YXJuZWQiLCAiTWFjaGluZSIsICJjb25maWciLCAib3B0aW9ucyIsICJpbml0aWFsQ29udGV4dCIsICJjcmVhdGVNYWNoaW5lIiwgInJlcXVpcmVfbWFwU3RhdGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIl90c2xpYiIsICJ1dGlscyIsICJtYXBTdGF0ZSIsICJzdGF0ZU1hcCIsICJzdGF0ZUlkIiwgImVfMSIsICJfYSIsICJmb3VuZFN0YXRlSWQiLCAiX2IiLCAiX2MiLCAibWFwcGVkU3RhdGVJZCIsICJlXzFfMSIsICJyZXF1aXJlX21hdGNoIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJfdHNsaWIiLCAiU3RhdGUiLCAibWF0Y2hTdGF0ZSIsICJzdGF0ZSIsICJwYXR0ZXJucyIsICJkZWZhdWx0VmFsdWUiLCAiZV8xIiwgIl9hIiwgInJlc29sdmVkU3RhdGUiLCAicGF0dGVybnNfMSIsICJwYXR0ZXJuc18xXzEiLCAiX2IiLCAic3RhdGVWYWx1ZSIsICJnZXRWYWx1ZSIsICJlXzFfMSIsICJyZXF1aXJlX3NjaGVtYSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiY3JlYXRlU2NoZW1hIiwgInNjaGVtYSIsICJ0IiwgInJlcXVpcmVfbGliIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJhY3Rpb25zIiwgIkFjdG9yIiwgImludGVycHJldGVyIiwgIk1hY2hpbmUiLCAibWFwU3RhdGUiLCAibWF0Y2giLCAic2NoZW1hIiwgIlN0YXRlIiwgIlN0YXRlTm9kZSIsICJiZWhhdmlvcnMiLCAidHlwZXMiLCAidXRpbHMiLCAiYXNzaWduIiwgInNlbmQiLCAic2VuZFBhcmVudCIsICJzZW5kVXBkYXRlIiwgImZvcndhcmRUbyIsICJkb25lSW52b2tlIiwgIkxTX0tFWSIsICJDQUxMX0xJTUlUIiwgIkNBTExfTk9STUFMSVpFX0JZIiwgInN0b3JlIiwgImtleSIsICJ2YWx1ZSIsICJsb2FkIiwgImpzb25TdG9yZSIsICJlIiwgImdldEhpc3RvcmljQ2FsbHNGb3JJbnB1dCIsICJwYXJzZWRJbnB1dCIsICJsb2FkR3JhcGgiLCAiY3VycmVudEdyYXBoIiwgInRyYXZlcnNlVG9JbnB1dCIsICJleHBvcnRzIiwgInBlcnNpc3RFeGVjIiwgImNvbW1hbmRJZCIsICJwZXJzaXN0R3JhcGgiLCAidXBkYXRlQ2FsbFN0YXRzIiwgImdyYXBoIiwgInRyZWUiLCAiZnVsbCIsICJjdXJyIiwgImN1cnJlbnRQbGFjZSIsICJzdGVwIiwgImNyZWF0ZVByb3BJZk5vdEV4aXN0cyIsICJncmFwaEVuZHBvaW50IiwgImlucHV0IiwgImlkIiwgImNhbGxSZWNvcmRzIiwgImV4aXN0cyIsICJyIiwgIm5vcm1hbGl6ZUFsbENhbGxzIiwgIm9iaiIsICJwcm9wIiwgImRlZmF1bHRWYWwiLCAiY2hhcnNHcmFwaCIsICJpIiwgInJlcXVpcmVfbmVhcmxleSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJvb3QiLCAiZmFjdG9yeSIsICJSdWxlIiwgIm5hbWUiLCAic3ltYm9scyIsICJwb3N0cHJvY2VzcyIsICJ3aXRoQ3Vyc29yQXQiLCAic3ltYm9sU2VxdWVuY2UiLCAiZ2V0U3ltYm9sU2hvcnREaXNwbGF5IiwgIlN0YXRlIiwgInJ1bGUiLCAiZG90IiwgInJlZmVyZW5jZSIsICJ3YW50ZWRCeSIsICJjaGlsZCIsICJzdGF0ZSIsICJjaGlsZHJlbiIsICJub2RlIiwgIlBhcnNlciIsICJDb2x1bW4iLCAiZ3JhbW1hciIsICJpbmRleCIsICJuZXh0Q29sdW1uIiwgInN0YXRlcyIsICJ3YW50cyIsICJjb21wbGV0ZWQiLCAidyIsICJpIiwgImxlZnQiLCAiZXhwIiwgIm51bGxzIiwgInJpZ2h0IiwgInJ1bGVzIiwgInIiLCAicyIsICJjb3B5IiwgIkdyYW1tYXIiLCAic3RhcnQiLCAiYnlOYW1lIiwgImxleGVyIiwgImciLCAiU3RyZWFtTGV4ZXIiLCAiZGF0YSIsICJjaCIsICJ0b2tlbiIsICJtZXNzYWdlIiwgImJ1ZmZlciIsICJsaW5lcyIsICJuZXh0TGluZUJyZWFrIiwgImNvbCIsICJsYXN0TGluZURpZ2l0cyIsICJsaW5lIiwgInBhZCIsICJuIiwgImxlbmd0aCIsICJvcHRpb25zIiwgImtleSIsICJjb2x1bW4iLCAidGFibGUiLCAiY2h1bmsiLCAiZSIsICJlcnIiLCAibGl0ZXJhbCIsICJ2YWx1ZSIsICJzY2FubmFibGUiLCAiZXhwZWN0IiwgIm5leHQiLCAibGV4ZXJFcnJvciIsICJ0b2tlbkRpc3BsYXkiLCAibGV4ZXJNZXNzYWdlIiwgImxhc3RDb2x1bW5JbmRleCIsICJsYXN0Q29sdW1uIiwgImV4cGVjdGFudFN0YXRlcyIsICJuZXh0U3ltYm9sIiwgInN0YXRlU3RhY2tzIiwgInN0YXRlU3RhY2siLCAic3ltYm9sRGlzcGxheSIsICJsYXN0RGlzcGxheSIsICJzYW1lRGlzcGxheUNvdW50IiwgImoiLCAiZGlzcGxheSIsICJzeW1ib2wiLCAiZ2V0U3ltYm9sTG9uZ0Rpc3BsYXkiLCAidmlzaXRlZCIsICJwcmV2U3RhdGUiLCAiY2hpbGRWaXNpdGVkIiwgImNoaWxkUmVzdWx0IiwgImNvbnNpZGVyYXRpb25zIiwgInQiLCAiYyIsICJ0eXBlIiwgImlkIiwgImQiLCAiZ3JhbW1hciIsICJhbGwiLCAiZGQiLCAiZXhwb3J0cyIsICJNYXRjaFNjb3JlIiwgImV4cG9ydHMiLCAibmVhcmxleV8xIiwgIl9faW1wb3J0RGVmYXVsdCIsICJleGVjX2dyYXBoXzEiLCAiaW5wdXRfcGFyc2VyXzEiLCAidHlwZXNfMSIsICJwYXJzZUlucHV0IiwgImlucHV0IiwgInBhcnNlciIsICJwYXJzZXJSZXN1bHQiLCAiZXhwb3J0cyIsICJyYW5rIiwgImNvbW1hbmRzIiwgInBhcnNlZElucHV0IiwgImV4ZWNHcmFwaENhbGxzIiwgImlucHV0VG9NYXRjaCIsICJub3JtYWxpemVEaWFjdHJpdGljcyIsICJjIiwgImNvbW1hbmRUb01hdGNoIiwgImdldFN0cmluZ1RvTWF0Y2giLCAiZnVsbCIsICJmaXJzdEluV29yZHMiLCAic3RhcnRzIiwgImhhcyIsICJoaXN0b3J5Q2FsbHMiLCAiZWMiLCAiaGlzdG9yeUNhbGxWYWx1ZSIsICJhIiwgImIiLCAidyIsICJzIiwgInhzdGF0ZV8xIiwgImV4ZWNfZ3JhcGhfMSIsICJyYW5rXzEiLCAiZXhwb3J0cyIsICJjb250ZXh0IiwgImV2ZW50IiwgImNhbGxiYWNrIiwgImlkIiwgInBhcnNlZElucHV0IiwgImV4ZWN1dGVkQ29tbWFuZCIsICJjIiwgIl8iLCAicmVzdWx0cyIsICJjdXJyZW50SW5kZXgiLCAiY29tbWFuZE1hdGNoIiwgImNvbW1hbmQiLCAiaW5wdXRBcmdzIiwgImFyZyIsICJhcmdWYWwiLCAic2V0dXBJbnRlcmFjdGlvbkxpc3RlbmVyIiwgImVsIiwgInNlcnZpY2UiLCAiY2xvc2VMaXN0ZW5lckZuIiwgImUiLCAia2V5IiwgImludGVyYWN0aW9uTGlzdGVuZXJGbiIsICJleHBvcnRzIiwgInNldHVwT3Blbkxpc3RlbmVyIiwgInRvZ2dsZUZuIiwgInNlbGVjdGlvbl9tYWNoaW5lXzEiLCAiZXhwb3J0cyIsICJ4c3RhdGVfMSIsICJyYW5rXzEiLCAiaW50ZXJhY3Rpb25fbGlzdGVuZXJzXzEiLCAibm9vcCIsICJpZGVudGl0eSIsICJ4IiwgInJ1biIsICJmbiIsICJibGFua19vYmplY3QiLCAicnVuX2FsbCIsICJmbnMiLCAiaXNfZnVuY3Rpb24iLCAidGhpbmciLCAic2FmZV9ub3RfZXF1YWwiLCAiYSIsICJiIiwgImlzX2VtcHR5IiwgIm9iaiIsICJzdWJzY3JpYmUiLCAic3RvcmUiLCAiY2FsbGJhY2tzIiwgIm5vb3AiLCAidW5zdWIiLCAiY29tcG9uZW50X3N1YnNjcmliZSIsICJjb21wb25lbnQiLCAic3RvcmUiLCAiY2FsbGJhY2siLCAic3Vic2NyaWJlIiwgImFjdGlvbl9kZXN0cm95ZXIiLCAiYWN0aW9uX3Jlc3VsdCIsICJpc19mdW5jdGlvbiIsICJub29wIiwgImlzX2NsaWVudCIsICJub3ciLCAicmFmIiwgImNiIiwgInRhc2tzIiwgInJ1bl90YXNrcyIsICJub3ciLCAidGFzayIsICJyYWYiLCAibG9vcCIsICJjYWxsYmFjayIsICJ0YXNrIiwgInRhc2tzIiwgInJhZiIsICJydW5fdGFza3MiLCAiZnVsZmlsbCIsICJpc19oeWRyYXRpbmciLCAic3RhcnRfaHlkcmF0aW5nIiwgImVuZF9oeWRyYXRpbmciLCAiYXBwZW5kIiwgInRhcmdldCIsICJub2RlIiwgImFwcGVuZF9zdHlsZXMiLCAic3R5bGVfc2hlZXRfaWQiLCAic3R5bGVzIiwgImFwcGVuZF9zdHlsZXNfdG8iLCAiZ2V0X3Jvb3RfZm9yX3N0eWxlIiwgInN0eWxlIiwgImVsZW1lbnQiLCAiYXBwZW5kX3N0eWxlc2hlZXQiLCAicm9vdCIsICJhcHBlbmRfZW1wdHlfc3R5bGVzaGVldCIsICJzdHlsZV9lbGVtZW50IiwgImluc2VydCIsICJ0YXJnZXQiLCAibm9kZSIsICJhbmNob3IiLCAiZGV0YWNoIiwgIm5vZGUiLCAiZGVzdHJveV9lYWNoIiwgIml0ZXJhdGlvbnMiLCAiZGV0YWNoaW5nIiwgImkiLCAiZWxlbWVudCIsICJuYW1lIiwgInRleHQiLCAiZGF0YSIsICJzcGFjZSIsICJlbXB0eSIsICJsaXN0ZW4iLCAibm9kZSIsICJldmVudCIsICJoYW5kbGVyIiwgIm9wdGlvbnMiLCAicHJldmVudF9kZWZhdWx0IiwgImZuIiwgInN0b3BfcHJvcGFnYXRpb24iLCAiYXR0ciIsICJub2RlIiwgImF0dHJpYnV0ZSIsICJ2YWx1ZSIsICJjaGlsZHJlbiIsICJlbGVtZW50IiwgInNldF9kYXRhIiwgInRleHQiLCAiZGF0YSIsICJ0b2dnbGVfY2xhc3MiLCAiZWxlbWVudCIsICJuYW1lIiwgInRvZ2dsZSIsICJjdXN0b21fZXZlbnQiLCAidHlwZSIsICJkZXRhaWwiLCAiYnViYmxlcyIsICJjYW5jZWxhYmxlIiwgImUiLCAibWFuYWdlZF9zdHlsZXMiLCAiYWN0aXZlIiwgImhhc2giLCAic3RyIiwgImkiLCAiY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uIiwgImRvYyIsICJub2RlIiwgImluZm8iLCAiYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQiLCAiY3JlYXRlX3J1bGUiLCAiYSIsICJiIiwgImR1cmF0aW9uIiwgImRlbGF5IiwgImVhc2UiLCAiZm4iLCAidWlkIiwgInN0ZXAiLCAia2V5ZnJhbWVzIiwgInAiLCAidCIsICJydWxlIiwgIm5hbWUiLCAiZ2V0X3Jvb3RfZm9yX3N0eWxlIiwgInN0eWxlc2hlZXQiLCAicnVsZXMiLCAiYW5pbWF0aW9uIiwgImRlbGV0ZV9ydWxlIiwgInByZXZpb3VzIiwgIm5leHQiLCAiYW5pbSIsICJkZWxldGVkIiwgImNsZWFyX3J1bGVzIiwgInJhZiIsICJjdXJyZW50X2NvbXBvbmVudCIsICJzZXRfY3VycmVudF9jb21wb25lbnQiLCAiY29tcG9uZW50IiwgImdldF9jdXJyZW50X2NvbXBvbmVudCIsICJvbk1vdW50IiwgImZuIiwgImdldF9jdXJyZW50X2NvbXBvbmVudCIsICJjcmVhdGVFdmVudERpc3BhdGNoZXIiLCAiY29tcG9uZW50IiwgImdldF9jdXJyZW50X2NvbXBvbmVudCIsICJ0eXBlIiwgImRldGFpbCIsICJjYW5jZWxhYmxlIiwgImNhbGxiYWNrcyIsICJldmVudCIsICJjdXN0b21fZXZlbnQiLCAiZm4iLCAiZGlydHlfY29tcG9uZW50cyIsICJiaW5kaW5nX2NhbGxiYWNrcyIsICJyZW5kZXJfY2FsbGJhY2tzIiwgImZsdXNoX2NhbGxiYWNrcyIsICJyZXNvbHZlZF9wcm9taXNlIiwgInVwZGF0ZV9zY2hlZHVsZWQiLCAic2NoZWR1bGVfdXBkYXRlIiwgImZsdXNoIiwgInRpY2siLCAiYWRkX3JlbmRlcl9jYWxsYmFjayIsICJmbiIsICJzZWVuX2NhbGxiYWNrcyIsICJmbHVzaGlkeCIsICJmbHVzaCIsICJzYXZlZF9jb21wb25lbnQiLCAiY3VycmVudF9jb21wb25lbnQiLCAiZGlydHlfY29tcG9uZW50cyIsICJjb21wb25lbnQiLCAic2V0X2N1cnJlbnRfY29tcG9uZW50IiwgInVwZGF0ZSIsICJiaW5kaW5nX2NhbGxiYWNrcyIsICJpIiwgInJlbmRlcl9jYWxsYmFja3MiLCAiY2FsbGJhY2siLCAiZmx1c2hfY2FsbGJhY2tzIiwgInVwZGF0ZV9zY2hlZHVsZWQiLCAiJCQiLCAicnVuX2FsbCIsICJkaXJ0eSIsICJhZGRfcmVuZGVyX2NhbGxiYWNrIiwgInByb21pc2UiLCAid2FpdCIsICJkaXNwYXRjaCIsICJub2RlIiwgImRpcmVjdGlvbiIsICJraW5kIiwgImN1c3RvbV9ldmVudCIsICJvdXRyb2luZyIsICJvdXRyb3MiLCAiZ3JvdXBfb3V0cm9zIiwgImNoZWNrX291dHJvcyIsICJ0cmFuc2l0aW9uX2luIiwgImJsb2NrIiwgImxvY2FsIiwgInRyYW5zaXRpb25fb3V0IiwgImRldGFjaCIsICJudWxsX3RyYW5zaXRpb24iLCAiY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbiIsICJub2RlIiwgImZuIiwgInBhcmFtcyIsICJpbnRybyIsICJjb25maWciLCAidCIsICJydW5uaW5nX3Byb2dyYW0iLCAicGVuZGluZ19wcm9ncmFtIiwgImFuaW1hdGlvbl9uYW1lIiwgImNsZWFyX2FuaW1hdGlvbiIsICJkZWxldGVfcnVsZSIsICJpbml0IiwgInByb2dyYW0iLCAiZHVyYXRpb24iLCAiZCIsICJnbyIsICJiIiwgImRlbGF5IiwgImVhc2luZyIsICJpZGVudGl0eSIsICJ0aWNrIiwgIm5vb3AiLCAiY3NzIiwgIm51bGxfdHJhbnNpdGlvbiIsICJub3ciLCAib3V0cm9zIiwgImNyZWF0ZV9ydWxlIiwgImFkZF9yZW5kZXJfY2FsbGJhY2siLCAiZGlzcGF0Y2giLCAibG9vcCIsICJydW5fYWxsIiwgInAiLCAiaXNfZnVuY3Rpb24iLCAid2FpdCIsICJnbG9iYWxzIiwgImNyZWF0ZV9jb21wb25lbnQiLCAiYmxvY2siLCAibW91bnRfY29tcG9uZW50IiwgImNvbXBvbmVudCIsICJ0YXJnZXQiLCAiYW5jaG9yIiwgImN1c3RvbUVsZW1lbnQiLCAiZnJhZ21lbnQiLCAib25fbW91bnQiLCAib25fZGVzdHJveSIsICJhZnRlcl91cGRhdGUiLCAiYWRkX3JlbmRlcl9jYWxsYmFjayIsICJuZXdfb25fZGVzdHJveSIsICJydW4iLCAiaXNfZnVuY3Rpb24iLCAicnVuX2FsbCIsICJkZXN0cm95X2NvbXBvbmVudCIsICJkZXRhY2hpbmciLCAiJCQiLCAibWFrZV9kaXJ0eSIsICJpIiwgImRpcnR5X2NvbXBvbmVudHMiLCAic2NoZWR1bGVfdXBkYXRlIiwgImluaXQiLCAib3B0aW9ucyIsICJpbnN0YW5jZSIsICJjcmVhdGVfZnJhZ21lbnQiLCAibm90X2VxdWFsIiwgInByb3BzIiwgImFwcGVuZF9zdHlsZXMiLCAiZGlydHkiLCAicGFyZW50X2NvbXBvbmVudCIsICJjdXJyZW50X2NvbXBvbmVudCIsICJzZXRfY3VycmVudF9jb21wb25lbnQiLCAibm9vcCIsICJibGFua19vYmplY3QiLCAicmVhZHkiLCAicmV0IiwgInJlc3QiLCAidmFsdWUiLCAic3RhcnRfaHlkcmF0aW5nIiwgIm5vZGVzIiwgImNoaWxkcmVuIiwgImRldGFjaCIsICJ0cmFuc2l0aW9uX2luIiwgImVuZF9oeWRyYXRpbmciLCAiZmx1c2giLCAiU3ZlbHRlRWxlbWVudCIsICJrZXkiLCAiYXR0ciIsICJfb2xkVmFsdWUiLCAibmV3VmFsdWUiLCAidHlwZSIsICJjYWxsYmFjayIsICJjYWxsYmFja3MiLCAiaW5kZXgiLCAiJCRwcm9wcyIsICJpc19lbXB0eSIsICJTdmVsdGVDb21wb25lbnQiLCAiY3ViaWNPdXQiLCAidCIsICJmIiwgImZhZGUiLCAibm9kZSIsICJkZWxheSIsICJkdXJhdGlvbiIsICJlYXNpbmciLCAiaWRlbnRpdHkiLCAibyIsICJ0IiwgInNsaWRlIiwgIm5vZGUiLCAiZGVsYXkiLCAiZHVyYXRpb24iLCAiZWFzaW5nIiwgImN1YmljT3V0IiwgInN0eWxlIiwgIm9wYWNpdHkiLCAiaGVpZ2h0IiwgInBhZGRpbmdfdG9wIiwgInBhZGRpbmdfYm90dG9tIiwgIm1hcmdpbl90b3AiLCAibWFyZ2luX2JvdHRvbSIsICJib3JkZXJfdG9wX3dpZHRoIiwgImJvcmRlcl9ib3R0b21fd2lkdGgiLCAidCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiZnVuYyIsICJpbnNlcnQiLCAidGFyZ2V0IiwgImRpdjEiLCAiYW5jaG9yIiwgImFwcGVuZCIsICJkaXYwIiwgImlucHV0IiwgImlucHV0X3ZhbHVlX3ZhbHVlIiwgImkiLCAiZGl2IiwgInNwYW4iLCAic2V0X2RhdGEiLCAidDAiLCAidDBfdmFsdWUiLCAidDIiLCAidDJfdmFsdWUiLCAiZm9jdXMiLCAicmVzbHV0SWRUb0NvbW1hbmQiLCAiY29tbWFuZHMiLCAicmVzdWx0SWQiLCAiYyIsICJzZWxlY3RFdmVudCIsICJpZCIsICJleGVjRXZlbnQiLCAiX19hd2FpdGVyIiwgInRoaXNBcmciLCAiX2FyZ3VtZW50cyIsICJQIiwgImdlbmVyYXRvciIsICJhZG9wdCIsICJ2YWx1ZSIsICJyZXNvbHZlIiwgInJlamVjdCIsICJmdWxmaWxsZWQiLCAic3RlcCIsICJlIiwgInJlamVjdGVkIiwgInJlc3VsdCIsICJyZXN1bHRzIiwgIm91dGVyRWxlbWVudCIsICJ0ZWFyZG93bklucHV0TGlzdGVuZXIiLCAidGVhckRvd25PcGVuTGlzdGVuZXIiLCAiZGlzcGF0Y2giLCAiY3JlYXRlRXZlbnREaXNwYXRjaGVyIiwgInRoZW1lIiwgIiQkcHJvcHMiLCAidG9nZ2xlS2V5IiwgImN0cmxLZXkiLCAicGxhY2Vob2xkZXIiLCAic2VsZWN0aW9uU2VydmljZSIsICJ0b2dnbGUiLCAiJHNlbGVjdGlvblNlcnZpY2UiLCAiaGFuZGxlTWFjaGluZVRyYW5zaXRpb25zIiwgInN0YXRlIiwgImV2ZW50IiwgIm1hY2hpbmVTdGF0ZXNMaXN0ZW5lcnMiLCAic3RhdGVTdHJpbmciLCAibWFjaGluZUV2ZW50TGlzdGVuZXJzIiwgInRlYXJkb3duT3V0c2lkZUNsaWNrTGlzdGVuZXIiLCAic2V0dXBPcGVuaW5nTGlzdGVuZXIiLCAic2V0dXBJbnB1dExpc3RlbmVyIiwgInNldHVwT3V0c2lkZUNsaWNrTGlzdGVuZXIiLCAiXyIsICJyZXN1bHRFeGVjIiwgInRpY2siLCAiYWN0aXZlRWxzIiwgImVsZW0iLCAib25Nb3VudCIsICJjaGFuZ2VkIiwgImNsaWNrTGlzdGVuZXIiLCAicmVuZGVyRGVzY3JpcHRpb24iLCAiZGVzY3IiLCAicmVuZGVyVGl0bGUiLCAidGl0bGUiLCAiJCR2YWx1ZSIsICIkIiwgImRpc3RfZGVmYXVsdCIsICJDb21wb25lbnRfZGVmYXVsdCIsICJpbnNlcnQiLCAidGFyZ2V0IiwgIm5hdiIsICJhbmNob3IiLCAicGxhY2Vob2xkZXIiLCAiJCRwcm9wcyIsICJjdXJyZW50VGhlbWUiLCAiY29tbWFuZHMiLCAidG9nZ2xlS2V5IiwgImRyYWdnaW5nIiwgIngiLCAieSIsICJldmVudCIsICIkIiwgIiQkaW52YWxpZGF0ZSIsICJ0aGVtZSIsICJ0IiwgInN0cmluZyIsICJjaG9pY2VzIiwgIm9iaiIsICJrZXkiLCAidGhlbWUiLCAiY29tbWFuZHMiLCAidG9nZ2xlS2V5IiwgInBsYWNlaG9sZGVyIiwgImN1cnJlbnRUaGVtZUtleSIsICJjdXJyZW50VGhlbWUiLCAiUGFsZXR0ZV9kZWZhdWx0Il0KfQo=
